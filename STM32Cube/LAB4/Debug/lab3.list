
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003040  08003040  00020894  2**0
                  CONTENTS
  4 .ARM          00000000  08003040  08003040  00020894  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003040  08003040  00020894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000894  20000000  0800304c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000894  080038e0  00020894  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000978  080038e0  00020978  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020894  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc94  00000000  00000000  000208bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260f  00000000  00000000  0002e551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00030b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00031690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f16  00000000  00000000  00032090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d042  00000000  00000000  00049fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085817  00000000  00000000  00056fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc7ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed8  00000000  00000000  000dc854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000894 	.word	0x20000894
 8000128:	00000000 	.word	0x00000000
 800012c:	08003000 	.word	0x08003000

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000898 	.word	0x20000898
 8000148:	08003000 	.word	0x08003000

0800014c <getKeyinput1>:
#include "button.h"


int buttonFlag[3] = {0,0,0};
uint8_t count = 0;
void getKeyinput1(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (count > 0 ) count--;
 8000150:	4b1f      	ldr	r3, [pc, #124]	; (80001d0 <getKeyinput1+0x84>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d005      	beq.n	8000164 <getKeyinput1+0x18>
 8000158:	4b1d      	ldr	r3, [pc, #116]	; (80001d0 <getKeyinput1+0x84>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	3b01      	subs	r3, #1
 800015e:	b2da      	uxtb	r2, r3
 8000160:	4b1b      	ldr	r3, [pc, #108]	; (80001d0 <getKeyinput1+0x84>)
 8000162:	701a      	strb	r2, [r3, #0]
	//-----PROCESS BUTTON 1------------
	if((count == 0) && (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == 0)){
 8000164:	4b1a      	ldr	r3, [pc, #104]	; (80001d0 <getKeyinput1+0x84>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d10c      	bne.n	8000186 <getKeyinput1+0x3a>
 800016c:	2101      	movs	r1, #1
 800016e:	4819      	ldr	r0, [pc, #100]	; (80001d4 <getKeyinput1+0x88>)
 8000170:	f001 fb1e 	bl	80017b0 <HAL_GPIO_ReadPin>
 8000174:	4603      	mov	r3, r0
 8000176:	2b00      	cmp	r3, #0
 8000178:	d105      	bne.n	8000186 <getKeyinput1+0x3a>
		buttonFlag[0] = 1;
 800017a:	4b17      	ldr	r3, [pc, #92]	; (80001d8 <getKeyinput1+0x8c>)
 800017c:	2201      	movs	r2, #1
 800017e:	601a      	str	r2, [r3, #0]
		count = 10;
 8000180:	4b13      	ldr	r3, [pc, #76]	; (80001d0 <getKeyinput1+0x84>)
 8000182:	220a      	movs	r2, #10
 8000184:	701a      	strb	r2, [r3, #0]
	}
	// ----PROCESS BUTTON 2-----------
	if((count == 0) && (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0)){
 8000186:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <getKeyinput1+0x84>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d10c      	bne.n	80001a8 <getKeyinput1+0x5c>
 800018e:	2102      	movs	r1, #2
 8000190:	4810      	ldr	r0, [pc, #64]	; (80001d4 <getKeyinput1+0x88>)
 8000192:	f001 fb0d 	bl	80017b0 <HAL_GPIO_ReadPin>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d105      	bne.n	80001a8 <getKeyinput1+0x5c>
		buttonFlag[1] = 1;
 800019c:	4b0e      	ldr	r3, [pc, #56]	; (80001d8 <getKeyinput1+0x8c>)
 800019e:	2201      	movs	r2, #1
 80001a0:	605a      	str	r2, [r3, #4]
		count = 10;
 80001a2:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <getKeyinput1+0x84>)
 80001a4:	220a      	movs	r2, #10
 80001a6:	701a      	strb	r2, [r3, #0]
	}
	// ----- PROCESS BUTTON 3 -----------
	if((count == 0) && (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == 0)){
 80001a8:	4b09      	ldr	r3, [pc, #36]	; (80001d0 <getKeyinput1+0x84>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d10c      	bne.n	80001ca <getKeyinput1+0x7e>
 80001b0:	2104      	movs	r1, #4
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <getKeyinput1+0x88>)
 80001b4:	f001 fafc 	bl	80017b0 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d105      	bne.n	80001ca <getKeyinput1+0x7e>
		buttonFlag[2] = 1;
 80001be:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <getKeyinput1+0x8c>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	609a      	str	r2, [r3, #8]
		count = 10;
 80001c4:	4b02      	ldr	r3, [pc, #8]	; (80001d0 <getKeyinput1+0x84>)
 80001c6:	220a      	movs	r2, #10
 80001c8:	701a      	strb	r2, [r3, #0]
	}

}
 80001ca:	bf00      	nop
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	200008bc 	.word	0x200008bc
 80001d4:	40010c00 	.word	0x40010c00
 80001d8:	200008b0 	.word	0x200008b0

080001dc <isButtonPress>:
int isButtonPress(int i){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 80001e4:	4a09      	ldr	r2, [pc, #36]	; (800020c <isButtonPress+0x30>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d106      	bne.n	80001fe <isButtonPress+0x22>
		buttonFlag[i] = 0;
 80001f0:	4a06      	ldr	r2, [pc, #24]	; (800020c <isButtonPress+0x30>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2100      	movs	r1, #0
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001fa:	2301      	movs	r3, #1
 80001fc:	e000      	b.n	8000200 <isButtonPress+0x24>
	}
	return 0;
 80001fe:	2300      	movs	r3, #0
}
 8000200:	4618      	mov	r0, r3
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	200008b0 	.word	0x200008b0

08000210 <task_display_time_1>:
// Khai báo biến toàn cục
  // Biến này lưu giá trị của lane hiện tại


// Wrapper hàm không tham số, chuyển tham số lane vào hàm chính
void task_display_time_1(void) {
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
    task_display_time(1);  // Gọi hàm chính với tham số là lane
 8000214:	2001      	movs	r0, #1
 8000216:	f000 f82d 	bl	8000274 <task_display_time>
}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}

0800021e <task_display_time_0>:
void task_display_time_0(void) {
 800021e:	b580      	push	{r7, lr}
 8000220:	af00      	add	r7, sp, #0
    task_display_time(0);  // Gọi hàm chính với tham số là lane
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f826 	bl	8000274 <task_display_time>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}

0800022c <counttime0>:
void counttime0(void){
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	if (remaining_time_lane_0 >0) {
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <counttime0+0x20>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	dd04      	ble.n	8000242 <counttime0+0x16>
	    remaining_time_lane_0--; // Giảm thời gian còn lại
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <counttime0+0x20>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	3b01      	subs	r3, #1
 800023e:	4a03      	ldr	r2, [pc, #12]	; (800024c <counttime0+0x20>)
 8000240:	6013      	str	r3, [r2, #0]
	  }
}
 8000242:	bf00      	nop
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	200008c4 	.word	0x200008c4

08000250 <counttime1>:
void counttime1(void){
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	if (remaining_time_lane_1> 0) {
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <counttime1+0x20>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	dd04      	ble.n	8000266 <counttime1+0x16>
		    remaining_time_lane_1--;
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <counttime1+0x20>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3b01      	subs	r3, #1
 8000262:	4a03      	ldr	r2, [pc, #12]	; (8000270 <counttime1+0x20>)
 8000264:	6013      	str	r3, [r2, #0]
		  }
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	200008c8 	.word	0x200008c8

08000274 <task_display_time>:
// Hàm hiển thị thời gian còn lại cho từng lane
void task_display_time(int lane) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
    if (lane == 0) {
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d11e      	bne.n	80002c0 <task_display_time+0x4c>

        display7SEG(0, remaining_time_lane_0 % 10);  // Hiển thị hàng đơn vị
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <task_display_time+0x90>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b20      	ldr	r3, [pc, #128]	; (8000308 <task_display_time+0x94>)
 8000288:	fb83 1302 	smull	r1, r3, r3, r2
 800028c:	1099      	asrs	r1, r3, #2
 800028e:	17d3      	asrs	r3, r2, #31
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	460b      	mov	r3, r1
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	440b      	add	r3, r1
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	1ad1      	subs	r1, r2, r3
 800029c:	2000      	movs	r0, #0
 800029e:	f000 fb0d 	bl	80008bc <display7SEG>
        display7SEG(1,(int) remaining_time_lane_0 / 10);// Hiển thị hàng chục
 80002a2:	4b18      	ldr	r3, [pc, #96]	; (8000304 <task_display_time+0x90>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a18      	ldr	r2, [pc, #96]	; (8000308 <task_display_time+0x94>)
 80002a8:	fb82 1203 	smull	r1, r2, r2, r3
 80002ac:	1092      	asrs	r2, r2, #2
 80002ae:	17db      	asrs	r3, r3, #31
 80002b0:	1ad3      	subs	r3, r2, r3
 80002b2:	4619      	mov	r1, r3
 80002b4:	2001      	movs	r0, #1
 80002b6:	f000 fb01 	bl	80008bc <display7SEG>
       counttime0();
 80002ba:	f7ff ffb7 	bl	800022c <counttime0>

        display7SEG(2, remaining_time_lane_1 % 10);  // Hiển thị hàng đơn vị
        display7SEG(3,(int) remaining_time_lane_1 / 10);  // Hiển thị hàng chục
        counttime1();
    }
}
 80002be:	e01d      	b.n	80002fc <task_display_time+0x88>
        display7SEG(2, remaining_time_lane_1 % 10);  // Hiển thị hàng đơn vị
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <task_display_time+0x98>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b10      	ldr	r3, [pc, #64]	; (8000308 <task_display_time+0x94>)
 80002c6:	fb83 1302 	smull	r1, r3, r3, r2
 80002ca:	1099      	asrs	r1, r3, #2
 80002cc:	17d3      	asrs	r3, r2, #31
 80002ce:	1ac9      	subs	r1, r1, r3
 80002d0:	460b      	mov	r3, r1
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	440b      	add	r3, r1
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	1ad1      	subs	r1, r2, r3
 80002da:	2002      	movs	r0, #2
 80002dc:	f000 faee 	bl	80008bc <display7SEG>
        display7SEG(3,(int) remaining_time_lane_1 / 10);  // Hiển thị hàng chục
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <task_display_time+0x98>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a08      	ldr	r2, [pc, #32]	; (8000308 <task_display_time+0x94>)
 80002e6:	fb82 1203 	smull	r1, r2, r2, r3
 80002ea:	1092      	asrs	r2, r2, #2
 80002ec:	17db      	asrs	r3, r3, #31
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	4619      	mov	r1, r3
 80002f2:	2003      	movs	r0, #3
 80002f4:	f000 fae2 	bl	80008bc <display7SEG>
        counttime1();
 80002f8:	f7ff ffaa 	bl	8000250 <counttime1>
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200008c4 	.word	0x200008c4
 8000308:	66666667 	.word	0x66666667
 800030c:	200008c8 	.word	0x200008c8

08000310 <task_fsm_lane_0>:
// Quản lý trạng thái cho lane 0
void task_fsm_lane_0(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
    switch (LED_STATE[0]) {
 8000314:	4b25      	ldr	r3, [pc, #148]	; (80003ac <task_fsm_lane_0+0x9c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	3b01      	subs	r3, #1
 800031a:	2b03      	cmp	r3, #3
 800031c:	d842      	bhi.n	80003a4 <task_fsm_lane_0+0x94>
 800031e:	a201      	add	r2, pc, #4	; (adr r2, 8000324 <task_fsm_lane_0+0x14>)
 8000320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000324:	08000335 	.word	0x08000335
 8000328:	0800034b 	.word	0x0800034b
 800032c:	08000387 	.word	0x08000387
 8000330:	08000369 	.word	0x08000369
        case INIT_STATE:
            setTrafficLightDefault(0);
 8000334:	2000      	movs	r0, #0
 8000336:	f000 fe7b 	bl	8001030 <setTrafficLightDefault>
            remaining_time_lane_0 = RED_DURATION;
 800033a:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <task_fsm_lane_0+0xa0>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a1d      	ldr	r2, [pc, #116]	; (80003b4 <task_fsm_lane_0+0xa4>)
 8000340:	6013      	str	r3, [r2, #0]
            LED_STATE[0] = RED_STATE;
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <task_fsm_lane_0+0x9c>)
 8000344:	2202      	movs	r2, #2
 8000346:	601a      	str	r2, [r3, #0]
            break;
 8000348:	e02d      	b.n	80003a6 <task_fsm_lane_0+0x96>
        case RED_STATE:
        	setTrafficLightRed(0);
 800034a:	2000      	movs	r0, #0
 800034c:	f000 fe9c 	bl	8001088 <setTrafficLightRed>
        	SCH_Add_Task(task_red_state_lane_0,RED_DURATION*500,0);
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <task_fsm_lane_0+0xa0>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000358:	fb02 f303 	mul.w	r3, r2, r3
 800035c:	2200      	movs	r2, #0
 800035e:	4619      	mov	r1, r3
 8000360:	4815      	ldr	r0, [pc, #84]	; (80003b8 <task_fsm_lane_0+0xa8>)
 8000362:	f000 fbef 	bl	8000b44 <SCH_Add_Task>
            break;
 8000366:	e01e      	b.n	80003a6 <task_fsm_lane_0+0x96>
        case YELLOW_STATE:
        	setTrafficLightAmber(0);
 8000368:	2000      	movs	r0, #0
 800036a:	f000 fee5 	bl	8001138 <setTrafficLightAmber>
        	SCH_Add_Task(task_yellow_state_lane_0,YELLOW_DURATION*500,0);
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <task_fsm_lane_0+0xac>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000376:	fb02 f303 	mul.w	r3, r2, r3
 800037a:	2200      	movs	r2, #0
 800037c:	4619      	mov	r1, r3
 800037e:	4810      	ldr	r0, [pc, #64]	; (80003c0 <task_fsm_lane_0+0xb0>)
 8000380:	f000 fbe0 	bl	8000b44 <SCH_Add_Task>
            break;
 8000384:	e00f      	b.n	80003a6 <task_fsm_lane_0+0x96>
        case GREEN_STATE:
        	setTrafficLightGreen(0);
 8000386:	2000      	movs	r0, #0
 8000388:	f000 feaa 	bl	80010e0 <setTrafficLightGreen>
              	SCH_Add_Task(task_green_state_lane_0,GREEN_DURATION*500,0);
 800038c:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <task_fsm_lane_0+0xb4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000394:	fb02 f303 	mul.w	r3, r2, r3
 8000398:	2200      	movs	r2, #0
 800039a:	4619      	mov	r1, r3
 800039c:	480a      	ldr	r0, [pc, #40]	; (80003c8 <task_fsm_lane_0+0xb8>)
 800039e:	f000 fbd1 	bl	8000b44 <SCH_Add_Task>
                  break;
 80003a2:	e000      	b.n	80003a6 <task_fsm_lane_0+0x96>
        default:
            break;
 80003a4:	bf00      	nop
    }
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000000 	.word	0x20000000
 80003b0:	2000000c 	.word	0x2000000c
 80003b4:	200008c4 	.word	0x200008c4
 80003b8:	08000489 	.word	0x08000489
 80003bc:	20000010 	.word	0x20000010
 80003c0:	080004b1 	.word	0x080004b1
 80003c4:	20000014 	.word	0x20000014
 80003c8:	080004d9 	.word	0x080004d9

080003cc <task_fsm_lane_1>:

// Quản lý trạng thái cho lane 1
void task_fsm_lane_1(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
    switch (LED_STATE[1]) {
 80003d0:	4b25      	ldr	r3, [pc, #148]	; (8000468 <task_fsm_lane_1+0x9c>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	3b01      	subs	r3, #1
 80003d6:	2b03      	cmp	r3, #3
 80003d8:	d842      	bhi.n	8000460 <task_fsm_lane_1+0x94>
 80003da:	a201      	add	r2, pc, #4	; (adr r2, 80003e0 <task_fsm_lane_1+0x14>)
 80003dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e0:	080003f1 	.word	0x080003f1
 80003e4:	08000407 	.word	0x08000407
 80003e8:	08000443 	.word	0x08000443
 80003ec:	08000425 	.word	0x08000425
        case INIT_STATE:
            setTrafficLightDefault(1);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f000 fe1d 	bl	8001030 <setTrafficLightDefault>
            remaining_time_lane_1 = GREEN_DURATION;
 80003f6:	4b1d      	ldr	r3, [pc, #116]	; (800046c <task_fsm_lane_1+0xa0>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a1d      	ldr	r2, [pc, #116]	; (8000470 <task_fsm_lane_1+0xa4>)
 80003fc:	6013      	str	r3, [r2, #0]
            LED_STATE[1] = GREEN_STATE;
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <task_fsm_lane_1+0x9c>)
 8000400:	2203      	movs	r2, #3
 8000402:	605a      	str	r2, [r3, #4]
            break;
 8000404:	e02d      	b.n	8000462 <task_fsm_lane_1+0x96>
        case RED_STATE:
        	setTrafficLightRed(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f000 fe3e 	bl	8001088 <setTrafficLightRed>
        	SCH_Add_Task(task_red_state_lane_1,RED_DURATION*500,0);
 800040c:	4b19      	ldr	r3, [pc, #100]	; (8000474 <task_fsm_lane_1+0xa8>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000414:	fb02 f303 	mul.w	r3, r2, r3
 8000418:	2200      	movs	r2, #0
 800041a:	4619      	mov	r1, r3
 800041c:	4816      	ldr	r0, [pc, #88]	; (8000478 <task_fsm_lane_1+0xac>)
 800041e:	f000 fb91 	bl	8000b44 <SCH_Add_Task>

        	break;
 8000422:	e01e      	b.n	8000462 <task_fsm_lane_1+0x96>
        case YELLOW_STATE:
        	setTrafficLightAmber(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f000 fe87 	bl	8001138 <setTrafficLightAmber>
        	SCH_Add_Task(task_yellow_state_lane_1,YELLOW_DURATION*500,0);
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <task_fsm_lane_1+0xb0>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000432:	fb02 f303 	mul.w	r3, r2, r3
 8000436:	2200      	movs	r2, #0
 8000438:	4619      	mov	r1, r3
 800043a:	4811      	ldr	r0, [pc, #68]	; (8000480 <task_fsm_lane_1+0xb4>)
 800043c:	f000 fb82 	bl	8000b44 <SCH_Add_Task>
             break;
 8000440:	e00f      	b.n	8000462 <task_fsm_lane_1+0x96>
        case GREEN_STATE:
        	setTrafficLightGreen(1);
 8000442:	2001      	movs	r0, #1
 8000444:	f000 fe4c 	bl	80010e0 <setTrafficLightGreen>
        	SCH_Add_Task(task_green_state_lane_1,GREEN_DURATION*500,0);
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <task_fsm_lane_1+0xa0>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000450:	fb02 f303 	mul.w	r3, r2, r3
 8000454:	2200      	movs	r2, #0
 8000456:	4619      	mov	r1, r3
 8000458:	480a      	ldr	r0, [pc, #40]	; (8000484 <task_fsm_lane_1+0xb8>)
 800045a:	f000 fb73 	bl	8000b44 <SCH_Add_Task>
        	break;
 800045e:	e000      	b.n	8000462 <task_fsm_lane_1+0x96>
        default:
        	break;
 8000460:	bf00      	nop
            }
    }
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000000 	.word	0x20000000
 800046c:	20000014 	.word	0x20000014
 8000470:	200008c8 	.word	0x200008c8
 8000474:	2000000c 	.word	0x2000000c
 8000478:	08000501 	.word	0x08000501
 800047c:	20000010 	.word	0x20000010
 8000480:	08000529 	.word	0x08000529
 8000484:	08000551 	.word	0x08000551

08000488 <task_red_state_lane_0>:

void task_red_state_lane_0(void) {
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	 //setTrafficLightRed(0);
	   LED_STATE[0] = GREEN_STATE;
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <task_red_state_lane_0+0x1c>)
 800048e:	2203      	movs	r2, #3
 8000490:	601a      	str	r2, [r3, #0]
	   remaining_time_lane_0 = GREEN_DURATION;
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <task_red_state_lane_0+0x20>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a05      	ldr	r2, [pc, #20]	; (80004ac <task_red_state_lane_0+0x24>)
 8000498:	6013      	str	r3, [r2, #0]
	 //  SCH_Add_Task(task_display_time_0,0,500);

	}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	20000000 	.word	0x20000000
 80004a8:	20000014 	.word	0x20000014
 80004ac:	200008c4 	.word	0x200008c4

080004b0 <task_yellow_state_lane_0>:
	void task_yellow_state_lane_0(void) {
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	   // setTrafficLightAmber(0);
	    LED_STATE[0] = RED_STATE;
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <task_yellow_state_lane_0+0x1c>)
 80004b6:	2202      	movs	r2, #2
 80004b8:	601a      	str	r2, [r3, #0]
	    remaining_time_lane_0 = RED_DURATION;
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <task_yellow_state_lane_0+0x20>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <task_yellow_state_lane_0+0x24>)
 80004c0:	6013      	str	r3, [r2, #0]
	   // SCH_Add_Task(task_display_time_0,0,500);

	}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000000 	.word	0x20000000
 80004d0:	2000000c 	.word	0x2000000c
 80004d4:	200008c4 	.word	0x200008c4

080004d8 <task_green_state_lane_0>:
	void task_green_state_lane_0(void) {
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
		//setTrafficLightGreen(0);
	      remaining_time_lane_0 = YELLOW_DURATION;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <task_green_state_lane_0+0x1c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <task_green_state_lane_0+0x20>)
 80004e2:	6013      	str	r3, [r2, #0]

	      LED_STATE[0] = YELLOW_STATE;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <task_green_state_lane_0+0x24>)
 80004e6:	2204      	movs	r2, #4
 80004e8:	601a      	str	r2, [r3, #0]
	     // SCH_Add_Task(task_display_time_0,0,500);
	}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000010 	.word	0x20000010
 80004f8:	200008c4 	.word	0x200008c4
 80004fc:	20000000 	.word	0x20000000

08000500 <task_red_state_lane_1>:

void task_red_state_lane_1(void) {
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	//setTrafficLightRed(1);
   LED_STATE[1] = GREEN_STATE;
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <task_red_state_lane_1+0x1c>)
 8000506:	2203      	movs	r2, #3
 8000508:	605a      	str	r2, [r3, #4]
   remaining_time_lane_1 = GREEN_DURATION;
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <task_red_state_lane_1+0x20>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a05      	ldr	r2, [pc, #20]	; (8000524 <task_red_state_lane_1+0x24>)
 8000510:	6013      	str	r3, [r2, #0]
 //  SCH_Add_Task(task_display_time_1,0,500);


}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	20000014 	.word	0x20000014
 8000524:	200008c8 	.word	0x200008c8

08000528 <task_yellow_state_lane_1>:
void task_yellow_state_lane_1(void) {
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
   // setTrafficLightAmber(1);
    LED_STATE[1] = RED_STATE;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <task_yellow_state_lane_1+0x1c>)
 800052e:	2202      	movs	r2, #2
 8000530:	605a      	str	r2, [r3, #4]
    remaining_time_lane_1 = RED_DURATION;
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <task_yellow_state_lane_1+0x20>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a05      	ldr	r2, [pc, #20]	; (800054c <task_yellow_state_lane_1+0x24>)
 8000538:	6013      	str	r3, [r2, #0]
  // SCH_Add_Task(task_display_time_1,0,500);

}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	2000000c 	.word	0x2000000c
 800054c:	200008c8 	.word	0x200008c8

08000550 <task_green_state_lane_1>:
void task_green_state_lane_1(void) {
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	// setTrafficLightGreen(1);
      remaining_time_lane_1 = YELLOW_DURATION;
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <task_green_state_lane_1+0x1c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <task_green_state_lane_1+0x20>)
 800055a:	6013      	str	r3, [r2, #0]
      LED_STATE[1] = YELLOW_STATE;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <task_green_state_lane_1+0x24>)
 800055e:	2204      	movs	r2, #4
 8000560:	605a      	str	r2, [r3, #4]
    //  SCH_Add_Task(task_display_time_1,0,500);
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000010 	.word	0x20000010
 8000570:	200008c8 	.word	0x200008c8
 8000574:	20000000 	.word	0x20000000

08000578 <changeMode>:
 *      Author: Admin
 */

#include"fsm_manual.h"
int tempDuration = 0;
void changeMode(int mode){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	setTrafficLightDefault(0);
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fd55 	bl	8001030 <setTrafficLightDefault>
	setTrafficLightDefault(1);
 8000586:	2001      	movs	r0, #1
 8000588:	f000 fd52 	bl	8001030 <setTrafficLightDefault>
	MODE = mode;
 800058c:	4a03      	ldr	r2, [pc, #12]	; (800059c <changeMode+0x24>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]

}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000008 	.word	0x20000008

080005a0 <displayDuration>:

void displayDuration(int mode, int duration){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	display7SEG(0, mode);
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 f985 	bl	80008bc <display7SEG>
	display7SEG(1, 0);
 80005b2:	2100      	movs	r1, #0
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 f981 	bl	80008bc <display7SEG>
	display7SEG(2, duration % 10);
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <displayDuration+0x58>)
 80005be:	fb83 1302 	smull	r1, r3, r3, r2
 80005c2:	1099      	asrs	r1, r3, #2
 80005c4:	17d3      	asrs	r3, r2, #31
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	460b      	mov	r3, r1
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	440b      	add	r3, r1
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	1ad1      	subs	r1, r2, r3
 80005d2:	2002      	movs	r0, #2
 80005d4:	f000 f972 	bl	80008bc <display7SEG>
	display7SEG(3, (int) (duration / 10));
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <displayDuration+0x58>)
 80005dc:	fb82 1203 	smull	r1, r2, r2, r3
 80005e0:	1092      	asrs	r2, r2, #2
 80005e2:	17db      	asrs	r3, r3, #31
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f967 	bl	80008bc <display7SEG>

}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	66666667 	.word	0x66666667

080005fc <fsm_manual_run>:

void fsm_manual_run(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	switch(MODE){
 8000600:	4b8c      	ldr	r3, [pc, #560]	; (8000834 <fsm_manual_run+0x238>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3b0b      	subs	r3, #11
 8000606:	2b03      	cmp	r3, #3
 8000608:	f200 8109 	bhi.w	800081e <fsm_manual_run+0x222>
 800060c:	a201      	add	r2, pc, #4	; (adr r2, 8000614 <fsm_manual_run+0x18>)
 800060e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000612:	bf00      	nop
 8000614:	08000625 	.word	0x08000625
 8000618:	08000687 	.word	0x08000687
 800061c:	0800070f 	.word	0x0800070f
 8000620:	08000795 	.word	0x08000795
		case MODE_1:
//			fsm_automatic_run(0);
//			fsm_automatic_run(1);
			//displayDuration(1, 0);
			 SCH_Add_Task(task_fsm_lane_0,0,10);  // Lên lịch cho lane 0
 8000624:	220a      	movs	r2, #10
 8000626:	2100      	movs	r1, #0
 8000628:	4883      	ldr	r0, [pc, #524]	; (8000838 <fsm_manual_run+0x23c>)
 800062a:	f000 fa8b 	bl	8000b44 <SCH_Add_Task>
			 SCH_Add_Task(task_fsm_lane_1, 0,10);  // Lên lịch cho lane 1
 800062e:	220a      	movs	r2, #10
 8000630:	2100      	movs	r1, #0
 8000632:	4882      	ldr	r0, [pc, #520]	; (800083c <fsm_manual_run+0x240>)
 8000634:	f000 fa86 	bl	8000b44 <SCH_Add_Task>
			 SCH_Add_Task(task_display_time_1,0,500);
 8000638:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800063c:	2100      	movs	r1, #0
 800063e:	4880      	ldr	r0, [pc, #512]	; (8000840 <fsm_manual_run+0x244>)
 8000640:	f000 fa80 	bl	8000b44 <SCH_Add_Task>
			 SCH_Add_Task(task_display_time_0,0,500);
 8000644:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000648:	2100      	movs	r1, #0
 800064a:	487e      	ldr	r0, [pc, #504]	; (8000844 <fsm_manual_run+0x248>)
 800064c:	f000 fa7a 	bl	8000b44 <SCH_Add_Task>
			if (isButtonPress(0) == 1){
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff fdc3 	bl	80001dc <isButtonPress>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	f040 80e2 	bne.w	8000822 <fsm_manual_run+0x226>
				SCH_Delete_Task(task_fsm_lane_0);
 800065e:	4876      	ldr	r0, [pc, #472]	; (8000838 <fsm_manual_run+0x23c>)
 8000660:	f000 fbae 	bl	8000dc0 <SCH_Delete_Task>
				SCH_Delete_Task(task_fsm_lane_1);
 8000664:	4875      	ldr	r0, [pc, #468]	; (800083c <fsm_manual_run+0x240>)
 8000666:	f000 fbab 	bl	8000dc0 <SCH_Delete_Task>
				SCH_Delete_Task(task_display_time_1);
 800066a:	4875      	ldr	r0, [pc, #468]	; (8000840 <fsm_manual_run+0x244>)
 800066c:	f000 fba8 	bl	8000dc0 <SCH_Delete_Task>
				SCH_Delete_Task(task_display_time_0);
 8000670:	4874      	ldr	r0, [pc, #464]	; (8000844 <fsm_manual_run+0x248>)
 8000672:	f000 fba5 	bl	8000dc0 <SCH_Delete_Task>
				tempDuration = RED_DURATION;
 8000676:	4b74      	ldr	r3, [pc, #464]	; (8000848 <fsm_manual_run+0x24c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a74      	ldr	r2, [pc, #464]	; (800084c <fsm_manual_run+0x250>)
 800067c:	6013      	str	r3, [r2, #0]
				changeMode(MODE_2);
 800067e:	200c      	movs	r0, #12
 8000680:	f7ff ff7a 	bl	8000578 <changeMode>
			}
			break;
 8000684:	e0cd      	b.n	8000822 <fsm_manual_run+0x226>
		case MODE_2:

			displayDuration(2, tempDuration);
 8000686:	4b71      	ldr	r3, [pc, #452]	; (800084c <fsm_manual_run+0x250>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	2002      	movs	r0, #2
 800068e:	f7ff ff87 	bl	80005a0 <displayDuration>
			HAL_GPIO_TogglePin(GPIOA, RED1_Pin);
 8000692:	2102      	movs	r1, #2
 8000694:	486e      	ldr	r0, [pc, #440]	; (8000850 <fsm_manual_run+0x254>)
 8000696:	f001 f8ba 	bl	800180e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, RED2_Pin);
 800069a:	2110      	movs	r1, #16
 800069c:	486c      	ldr	r0, [pc, #432]	; (8000850 <fsm_manual_run+0x254>)
 800069e:	f001 f8b6 	bl	800180e <HAL_GPIO_TogglePin>
			if (isButtonPress(0) == 1){
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff fd9a 	bl	80001dc <isButtonPress>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d106      	bne.n	80006bc <fsm_manual_run+0xc0>
				tempDuration = YELLOW_DURATION;
 80006ae:	4b69      	ldr	r3, [pc, #420]	; (8000854 <fsm_manual_run+0x258>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a66      	ldr	r2, [pc, #408]	; (800084c <fsm_manual_run+0x250>)
 80006b4:	6013      	str	r3, [r2, #0]
				changeMode(MODE_3);
 80006b6:	200d      	movs	r0, #13
 80006b8:	f7ff ff5e 	bl	8000578 <changeMode>
			}
			if (isButtonPress(1) == 1){
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff fd8d 	bl	80001dc <isButtonPress>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d116      	bne.n	80006f6 <fsm_manual_run+0xfa>
				tempDuration++;
 80006c8:	4b60      	ldr	r3, [pc, #384]	; (800084c <fsm_manual_run+0x250>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	4a5f      	ldr	r2, [pc, #380]	; (800084c <fsm_manual_run+0x250>)
 80006d0:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 80006d2:	4b5e      	ldr	r3, [pc, #376]	; (800084c <fsm_manual_run+0x250>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	4b60      	ldr	r3, [pc, #384]	; (8000858 <fsm_manual_run+0x25c>)
 80006d8:	fb83 1302 	smull	r1, r3, r3, r2
 80006dc:	1159      	asrs	r1, r3, #5
 80006de:	17d3      	asrs	r3, r2, #31
 80006e0:	1acb      	subs	r3, r1, r3
 80006e2:	2164      	movs	r1, #100	; 0x64
 80006e4:	fb01 f303 	mul.w	r3, r1, r3
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	4a58      	ldr	r2, [pc, #352]	; (800084c <fsm_manual_run+0x250>)
 80006ec:	6013      	str	r3, [r2, #0]
				RED_DURATION = tempDuration;
 80006ee:	4b57      	ldr	r3, [pc, #348]	; (800084c <fsm_manual_run+0x250>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a55      	ldr	r2, [pc, #340]	; (8000848 <fsm_manual_run+0x24c>)
 80006f4:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPress(2) == 1){
 80006f6:	2002      	movs	r0, #2
 80006f8:	f7ff fd70 	bl	80001dc <isButtonPress>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b01      	cmp	r3, #1
 8000700:	f040 8091 	bne.w	8000826 <fsm_manual_run+0x22a>
				RED_DURATION = tempDuration;
 8000704:	4b51      	ldr	r3, [pc, #324]	; (800084c <fsm_manual_run+0x250>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a4f      	ldr	r2, [pc, #316]	; (8000848 <fsm_manual_run+0x24c>)
 800070a:	6013      	str	r3, [r2, #0]
			}



			break;
 800070c:	e08b      	b.n	8000826 <fsm_manual_run+0x22a>
		case MODE_3:

			displayDuration(3, tempDuration);
 800070e:	4b4f      	ldr	r3, [pc, #316]	; (800084c <fsm_manual_run+0x250>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4619      	mov	r1, r3
 8000714:	2003      	movs	r0, #3
 8000716:	f7ff ff43 	bl	80005a0 <displayDuration>
			HAL_GPIO_TogglePin(GPIOA, YELLOW1_Pin);
 800071a:	2104      	movs	r1, #4
 800071c:	484c      	ldr	r0, [pc, #304]	; (8000850 <fsm_manual_run+0x254>)
 800071e:	f001 f876 	bl	800180e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, YELLOW2_Pin);
 8000722:	2120      	movs	r1, #32
 8000724:	484a      	ldr	r0, [pc, #296]	; (8000850 <fsm_manual_run+0x254>)
 8000726:	f001 f872 	bl	800180e <HAL_GPIO_TogglePin>
			if (isButtonPress(0) == 1){
 800072a:	2000      	movs	r0, #0
 800072c:	f7ff fd56 	bl	80001dc <isButtonPress>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d106      	bne.n	8000744 <fsm_manual_run+0x148>
				tempDuration = GREEN_DURATION;
 8000736:	4b49      	ldr	r3, [pc, #292]	; (800085c <fsm_manual_run+0x260>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a44      	ldr	r2, [pc, #272]	; (800084c <fsm_manual_run+0x250>)
 800073c:	6013      	str	r3, [r2, #0]
				changeMode(MODE_4);
 800073e:	200e      	movs	r0, #14
 8000740:	f7ff ff1a 	bl	8000578 <changeMode>
			}
			if (isButtonPress(1) == 1){
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff fd49 	bl	80001dc <isButtonPress>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d116      	bne.n	800077e <fsm_manual_run+0x182>
				tempDuration++;
 8000750:	4b3e      	ldr	r3, [pc, #248]	; (800084c <fsm_manual_run+0x250>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	4a3d      	ldr	r2, [pc, #244]	; (800084c <fsm_manual_run+0x250>)
 8000758:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 800075a:	4b3c      	ldr	r3, [pc, #240]	; (800084c <fsm_manual_run+0x250>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <fsm_manual_run+0x25c>)
 8000760:	fb83 1302 	smull	r1, r3, r3, r2
 8000764:	1159      	asrs	r1, r3, #5
 8000766:	17d3      	asrs	r3, r2, #31
 8000768:	1acb      	subs	r3, r1, r3
 800076a:	2164      	movs	r1, #100	; 0x64
 800076c:	fb01 f303 	mul.w	r3, r1, r3
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	4a36      	ldr	r2, [pc, #216]	; (800084c <fsm_manual_run+0x250>)
 8000774:	6013      	str	r3, [r2, #0]
				YELLOW_DURATION = tempDuration;
 8000776:	4b35      	ldr	r3, [pc, #212]	; (800084c <fsm_manual_run+0x250>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a36      	ldr	r2, [pc, #216]	; (8000854 <fsm_manual_run+0x258>)
 800077c:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPress(2) == 1){
 800077e:	2002      	movs	r0, #2
 8000780:	f7ff fd2c 	bl	80001dc <isButtonPress>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d14f      	bne.n	800082a <fsm_manual_run+0x22e>
				YELLOW_DURATION = tempDuration;
 800078a:	4b30      	ldr	r3, [pc, #192]	; (800084c <fsm_manual_run+0x250>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a31      	ldr	r2, [pc, #196]	; (8000854 <fsm_manual_run+0x258>)
 8000790:	6013      	str	r3, [r2, #0]
			}



			break;
 8000792:	e04a      	b.n	800082a <fsm_manual_run+0x22e>
		case MODE_4:

			displayDuration(4, tempDuration);
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <fsm_manual_run+0x250>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	2004      	movs	r0, #4
 800079c:	f7ff ff00 	bl	80005a0 <displayDuration>
			HAL_GPIO_TogglePin(GPIOA, GREEN1_Pin);
 80007a0:	2108      	movs	r1, #8
 80007a2:	482b      	ldr	r0, [pc, #172]	; (8000850 <fsm_manual_run+0x254>)
 80007a4:	f001 f833 	bl	800180e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GREEN2_Pin);
 80007a8:	2140      	movs	r1, #64	; 0x40
 80007aa:	4829      	ldr	r0, [pc, #164]	; (8000850 <fsm_manual_run+0x254>)
 80007ac:	f001 f82f 	bl	800180e <HAL_GPIO_TogglePin>
			if (isButtonPress(0) == 1){
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff fd13 	bl	80001dc <isButtonPress>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d108      	bne.n	80007ce <fsm_manual_run+0x1d2>
				LED_STATE [0] = INIT_STATE;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <fsm_manual_run+0x264>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
				LED_STATE [1] = INIT_STATE;
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <fsm_manual_run+0x264>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	605a      	str	r2, [r3, #4]
				changeMode(MODE_1);
 80007c8:	200b      	movs	r0, #11
 80007ca:	f7ff fed5 	bl	8000578 <changeMode>
			}
			if (isButtonPress(1) == 1){
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff fd04 	bl	80001dc <isButtonPress>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d116      	bne.n	8000808 <fsm_manual_run+0x20c>
				tempDuration++;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <fsm_manual_run+0x250>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	4a1a      	ldr	r2, [pc, #104]	; (800084c <fsm_manual_run+0x250>)
 80007e2:	6013      	str	r3, [r2, #0]
				tempDuration %= 100;
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <fsm_manual_run+0x250>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <fsm_manual_run+0x25c>)
 80007ea:	fb83 1302 	smull	r1, r3, r3, r2
 80007ee:	1159      	asrs	r1, r3, #5
 80007f0:	17d3      	asrs	r3, r2, #31
 80007f2:	1acb      	subs	r3, r1, r3
 80007f4:	2164      	movs	r1, #100	; 0x64
 80007f6:	fb01 f303 	mul.w	r3, r1, r3
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <fsm_manual_run+0x250>)
 80007fe:	6013      	str	r3, [r2, #0]
				GREEN_DURATION = tempDuration;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <fsm_manual_run+0x250>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a15      	ldr	r2, [pc, #84]	; (800085c <fsm_manual_run+0x260>)
 8000806:	6013      	str	r3, [r2, #0]
			}
			if (isButtonPress(2) == 1){
 8000808:	2002      	movs	r0, #2
 800080a:	f7ff fce7 	bl	80001dc <isButtonPress>
 800080e:	4603      	mov	r3, r0
 8000810:	2b01      	cmp	r3, #1
 8000812:	d10c      	bne.n	800082e <fsm_manual_run+0x232>
				GREEN_DURATION = tempDuration;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <fsm_manual_run+0x250>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a10      	ldr	r2, [pc, #64]	; (800085c <fsm_manual_run+0x260>)
 800081a:	6013      	str	r3, [r2, #0]
			}

			break;
 800081c:	e007      	b.n	800082e <fsm_manual_run+0x232>
		default:
			 break;
 800081e:	bf00      	nop
 8000820:	e006      	b.n	8000830 <fsm_manual_run+0x234>
			break;
 8000822:	bf00      	nop
 8000824:	e004      	b.n	8000830 <fsm_manual_run+0x234>
			break;
 8000826:	bf00      	nop
 8000828:	e002      	b.n	8000830 <fsm_manual_run+0x234>
			break;
 800082a:	bf00      	nop
 800082c:	e000      	b.n	8000830 <fsm_manual_run+0x234>
			break;
 800082e:	bf00      	nop

	}
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000008 	.word	0x20000008
 8000838:	08000311 	.word	0x08000311
 800083c:	080003cd 	.word	0x080003cd
 8000840:	08000211 	.word	0x08000211
 8000844:	0800021f 	.word	0x0800021f
 8000848:	2000000c 	.word	0x2000000c
 800084c:	200008c0 	.word	0x200008c0
 8000850:	40010800 	.word	0x40010800
 8000854:	20000010 	.word	0x20000010
 8000858:	51eb851f 	.word	0x51eb851f
 800085c:	20000014 	.word	0x20000014
 8000860:	20000000 	.word	0x20000000

08000864 <displaySEG>:
 *  Created on: 28 Oct 2024
 *      Author: Admin
 */

#include"led7_seg.h"
void displaySEG(int bit, uint16_t type) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	807b      	strh	r3, [r7, #2]
    if (bit < 9) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b08      	cmp	r3, #8
 8000874:	dc0a      	bgt.n	800088c <displaySEG+0x28>

        HAL_GPIO_WritePin(GPIOA, BIT_A[bit], type);
 8000876:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <displaySEG+0x48>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800087e:	887a      	ldrh	r2, [r7, #2]
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	4619      	mov	r1, r3
 8000884:	480a      	ldr	r0, [pc, #40]	; (80008b0 <displaySEG+0x4c>)
 8000886:	f000 ffaa 	bl	80017de <HAL_GPIO_WritePin>
    } else {

        HAL_GPIO_WritePin(GPIOB, BIT_B[bit - 9], type);
    }
}
 800088a:	e00a      	b.n	80008a2 <displaySEG+0x3e>
        HAL_GPIO_WritePin(GPIOB, BIT_B[bit - 9], type);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b09      	subs	r3, #9
 8000890:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <displaySEG+0x50>)
 8000892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000896:	887a      	ldrh	r2, [r7, #2]
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	4619      	mov	r1, r3
 800089c:	4806      	ldr	r0, [pc, #24]	; (80008b8 <displaySEG+0x54>)
 800089e:	f000 ff9e 	bl	80017de <HAL_GPIO_WritePin>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000001c 	.word	0x2000001c
 80008b0:	40010800 	.word	0x40010800
 80008b4:	20000030 	.word	0x20000030
 80008b8:	40010c00 	.word	0x40010c00

080008bc <display7SEG>:

void display7SEG(int type, int num) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]

    if (num < 0 || num > 9) {
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	db02      	blt.n	80008d2 <display7SEG+0x16>
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	2b09      	cmp	r3, #9
 80008d0:	dd01      	ble.n	80008d6 <display7SEG+0x1a>
        num = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
    }

    for (int i = 0; i < 4; i++) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e011      	b.n	8000900 <display7SEG+0x44>
        displaySEG(type * 4 + i, (num >> i) & 0x01);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	009a      	lsls	r2, r3, #2
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	18d0      	adds	r0, r2, r3
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	fa42 f303 	asr.w	r3, r2, r3
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	f7ff ffb5 	bl	8000864 <displaySEG>
    for (int i = 0; i < 4; i++) {
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2b03      	cmp	r3, #3
 8000904:	ddea      	ble.n	80008dc <display7SEG+0x20>
    }
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f000 fc62 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f81a 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f000 f8a0 	bl	8000a60 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000920:	f000 f852 	bl	80009c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000924:	4807      	ldr	r0, [pc, #28]	; (8000944 <main+0x34>)
 8000926:	f001 fbb7 	bl	8002098 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
//  SCH_Init();

//	  SCH_Add_Task(task_fsm_lane_0,0,10);  // Lên lịch cho lane 0
//    SCH_Add_Task(task_fsm_lane_1, 0,10);  // Lên lịch cho lane 1
SCH_Add_Task(fsm_manual_run, 0,10);
 800092a:	220a      	movs	r2, #10
 800092c:	2100      	movs	r1, #0
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <main+0x38>)
 8000930:	f000 f908 	bl	8000b44 <SCH_Add_Task>
 SCH_Add_Task(getKeyinput1, 0, 10);
 8000934:	220a      	movs	r2, #10
 8000936:	2100      	movs	r1, #0
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <main+0x3c>)
 800093a:	f000 f903 	bl	8000b44 <SCH_Add_Task>

  while (1)
  {


	  SCH_Dispatch_Task();
 800093e:	f000 f989 	bl	8000c54 <SCH_Dispatch_Task>
 8000942:	e7fc      	b.n	800093e <main+0x2e>
 8000944:	20000904 	.word	0x20000904
 8000948:	080005fd 	.word	0x080005fd
 800094c:	0800014d 	.word	0x0800014d

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b090      	sub	sp, #64	; 0x40
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	2228      	movs	r2, #40	; 0x28
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f002 f9a2 	bl	8002ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000976:	2301      	movs	r3, #1
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097a:	2310      	movs	r3, #16
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000982:	f107 0318 	add.w	r3, r7, #24
 8000986:	4618      	mov	r0, r3
 8000988:	f000 ff5a 	bl	8001840 <HAL_RCC_OscConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000992:	f000 f8d1 	bl	8000b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000996:	230f      	movs	r3, #15
 8000998:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f9c6 	bl	8001d40 <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009ba:	f000 f8bd 	bl	8000b38 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3740      	adds	r7, #64	; 0x40
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009ee:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009fc:	2209      	movs	r2, #9
 80009fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a0e:	f001 faf3 	bl	8001ff8 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a18:	f000 f88e 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a2a:	f001 fc71 	bl	8002310 <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a34:	f000 f880 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a46:	f001 fe49 	bl	80026dc <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f872 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000904 	.word	0x20000904

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a27      	ldr	r2, [pc, #156]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000aaa:	481c      	ldr	r0, [pc, #112]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000aac:	f000 fe97 	bl	80017de <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|BIT0_Pin|BIT1_Pin
                          |BIT2_Pin|BIT3_Pin|BIT4_Pin|BIT5_Pin
                          |BIT6_Pin|BIT7_Pin|BIT8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIT9_Pin|BIT10_Pin|BIT11_Pin|BIT12_Pin
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000ab6:	481a      	ldr	r0, [pc, #104]	; (8000b20 <MX_GPIO_Init+0xc0>)
 8000ab8:	f000 fe91 	bl	80017de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin BIT0_Pin BIT1_Pin
                           BIT2_Pin BIT3_Pin BIT4_Pin BIT5_Pin
                           BIT6_Pin BIT7_Pin BIT8_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000abc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000ac0:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|BIT0_Pin|BIT1_Pin
                          |BIT2_Pin|BIT3_Pin|BIT4_Pin|BIT5_Pin
                          |BIT6_Pin|BIT7_Pin|BIT8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2302      	movs	r3, #2
 8000acc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000ad6:	f000 fcf1 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000ada:	2307      	movs	r3, #7
 8000adc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <MX_GPIO_Init+0xc0>)
 8000aee:	f000 fce5 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BIT9_Pin BIT10_Pin BIT11_Pin BIT12_Pin
                           BIT13_Pin BIT14_Pin BIT15_Pin */
  GPIO_InitStruct.Pin = BIT9_Pin|BIT10_Pin|BIT11_Pin|BIT12_Pin
 8000af2:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000af6:	60bb      	str	r3, [r7, #8]
                          |BIT13_Pin|BIT14_Pin|BIT15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2302      	movs	r3, #2
 8000b02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_GPIO_Init+0xc0>)
 8000b0c:	f000 fcd6 	bl	80014bc <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00

08000b24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000b2c:	f000 f85c 	bl	8000be8 <SCH_Update>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <SCH_Add_Task>:
    taskRunList.head = NULL;
    taskRunList.tail = NULL;
    taskRunList.numTask = 0;
}

void SCH_Add_Task(void (*function)(), uint32_t Delay, uint32_t Period){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
	if(SCH_Is_Task_Exist(function) == 1)
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f000 f985 	bl	8000e60 <SCH_Is_Task_Exist>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d03b      	beq.n	8000bd4 <SCH_Add_Task+0x90>
		return;
	sTask * newTask = (sTask *) malloc (sizeof(sTask));
 8000b5c:	2014      	movs	r0, #20
 8000b5e:	f001 fe51 	bl	8002804 <malloc>
 8000b62:	4603      	mov	r3, r0
 8000b64:	617b      	str	r3, [r7, #20]
	if (newTask == NULL)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d035      	beq.n	8000bd8 <SCH_Add_Task+0x94>
		return;

	newTask->pTask = function;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	601a      	str	r2, [r3, #0]
	newTask->Delay = Delay/10; // scale for TIM2 10ms run
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	4a1a      	ldr	r2, [pc, #104]	; (8000be0 <SCH_Add_Task+0x9c>)
 8000b76:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7a:	08da      	lsrs	r2, r3, #3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	605a      	str	r2, [r3, #4]
	newTask->Period = Period/10;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <SCH_Add_Task+0x9c>)
 8000b84:	fba2 2303 	umull	r2, r3, r2, r3
 8000b88:	08da      	lsrs	r2, r3, #3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	609a      	str	r2, [r3, #8]
	newTask->next = NULL;
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
	newTask->prev = NULL;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]

	if(taskList.head == NULL){
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <SCH_Add_Task+0xa0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d106      	bne.n	8000bb0 <SCH_Add_Task+0x6c>
		taskList.head = newTask;
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <SCH_Add_Task+0xa0>)
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	6013      	str	r3, [r2, #0]
		taskList.tail = newTask;
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <SCH_Add_Task+0xa0>)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	6053      	str	r3, [r2, #4]
 8000bae:	e00a      	b.n	8000bc6 <SCH_Add_Task+0x82>
	}
	else{
		newTask->prev = taskList.tail;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <SCH_Add_Task+0xa0>)
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	611a      	str	r2, [r3, #16]
		taskList.tail->next = newTask;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <SCH_Add_Task+0xa0>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	60da      	str	r2, [r3, #12]
		taskList.tail = newTask;
 8000bc0:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <SCH_Add_Task+0xa0>)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	6053      	str	r3, [r2, #4]
	}
	taskList.numTask++;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <SCH_Add_Task+0xa0>)
 8000bc8:	7a1b      	ldrb	r3, [r3, #8]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SCH_Add_Task+0xa0>)
 8000bd0:	721a      	strb	r2, [r3, #8]
 8000bd2:	e002      	b.n	8000bda <SCH_Add_Task+0x96>
		return;
 8000bd4:	bf00      	nop
 8000bd6:	e000      	b.n	8000bda <SCH_Add_Task+0x96>
		return;
 8000bd8:	bf00      	nop
}
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	cccccccd 	.word	0xcccccccd
 8000be4:	2000094c 	.word	0x2000094c

08000be8 <SCH_Update>:

void SCH_Update(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	sTask * temp = taskList.head;
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <SCH_Update+0x68>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 8000bf4:	e024      	b.n	8000c40 <SCH_Update+0x58>
		if(temp->Delay > 0){
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d005      	beq.n	8000c0a <SCH_Update+0x22>
			temp->Delay --;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	1e5a      	subs	r2, r3, #1
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	e017      	b.n	8000c3a <SCH_Update+0x52>
		}
		else{
			//temp->RunMe++;
			add_TaskToRunList(temp->pTask);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f83e 	bl	8000c90 <add_TaskToRunList>
			temp->Delay = temp->Period;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	605a      	str	r2, [r3, #4]
			if(temp->Period == 0){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d10a      	bne.n	8000c3a <SCH_Update+0x52>
				sTask * del = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	603b      	str	r3, [r7, #0]
				temp = temp->next;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	607b      	str	r3, [r7, #4]
				SCH_Delete_Task(del->pTask);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f8c4 	bl	8000dc0 <SCH_Delete_Task>
				continue;
 8000c38:	e002      	b.n	8000c40 <SCH_Update+0x58>
			}
		}
		temp = temp->next;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1d7      	bne.n	8000bf6 <SCH_Update+0xe>
	}
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000094c 	.word	0x2000094c

08000c54 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
	sTask * temp = taskRunList.head;
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <SCH_Dispatch_Task+0x38>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	607b      	str	r3, [r7, #4]
	while(temp != NULL){
 8000c60:	e00c      	b.n	8000c7c <SCH_Dispatch_Task+0x28>
		temp->pTask();
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4798      	blx	r3
		sTask* del = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	603b      	str	r3, [r7, #0]
		temp = temp->next;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	607b      	str	r3, [r7, #4]
		delete_TaskFromRunList(del->pTask);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f83e 	bl	8000cf8 <delete_TaskFromRunList>
	while(temp != NULL){
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1ef      	bne.n	8000c62 <SCH_Dispatch_Task+0xe>
	}
}
 8000c82:	bf00      	nop
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000958 	.word	0x20000958

08000c90 <add_TaskToRunList>:

void add_TaskToRunList(void (*function)()){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	sTask * newTask = (sTask *) malloc ( sizeof(sTask));
 8000c98:	2014      	movs	r0, #20
 8000c9a:	f001 fdb3 	bl	8002804 <malloc>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	60fb      	str	r3, [r7, #12]
	newTask->pTask = function;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	601a      	str	r2, [r3, #0]
	newTask->next = NULL;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
	newTask->prev = NULL;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
	if(taskRunList.numTask == 0){
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <add_TaskToRunList+0x64>)
 8000cb6:	7a1b      	ldrb	r3, [r3, #8]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d106      	bne.n	8000cca <add_TaskToRunList+0x3a>
		taskRunList.head = newTask;
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <add_TaskToRunList+0x64>)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6013      	str	r3, [r2, #0]
		taskRunList.tail = newTask;
 8000cc2:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <add_TaskToRunList+0x64>)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6053      	str	r3, [r2, #4]
 8000cc8:	e00a      	b.n	8000ce0 <add_TaskToRunList+0x50>

	}
	else{
		newTask->prev = taskRunList.tail;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <add_TaskToRunList+0x64>)
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
		taskRunList.tail->next = newTask;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <add_TaskToRunList+0x64>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	60da      	str	r2, [r3, #12]
		taskRunList.tail = newTask;
 8000cda:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <add_TaskToRunList+0x64>)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6053      	str	r3, [r2, #4]
	}
	taskRunList.numTask++;
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <add_TaskToRunList+0x64>)
 8000ce2:	7a1b      	ldrb	r3, [r3, #8]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <add_TaskToRunList+0x64>)
 8000cea:	721a      	strb	r2, [r3, #8]
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000958 	.word	0x20000958

08000cf8 <delete_TaskFromRunList>:

void delete_TaskFromRunList(void (*function)()){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	if(taskRunList.numTask == 0)
 8000d00:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <delete_TaskFromRunList+0xc4>)
 8000d02:	7a1b      	ldrb	r3, [r3, #8]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d054      	beq.n	8000db2 <delete_TaskFromRunList+0xba>
		return ;
	if(taskRunList.numTask == 1){
 8000d08:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <delete_TaskFromRunList+0xc4>)
 8000d0a:	7a1b      	ldrb	r3, [r3, #8]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d112      	bne.n	8000d36 <delete_TaskFromRunList+0x3e>
		sTask * del = taskRunList.head;
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <delete_TaskFromRunList+0xc4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60bb      	str	r3, [r7, #8]
		taskRunList.head = NULL;
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <delete_TaskFromRunList+0xc4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
		taskRunList.tail = NULL;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <delete_TaskFromRunList+0xc4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
		free(del);
 8000d22:	68b8      	ldr	r0, [r7, #8]
 8000d24:	f001 fd76 	bl	8002814 <free>
		taskRunList.numTask--;
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <delete_TaskFromRunList+0xc4>)
 8000d2a:	7a1b      	ldrb	r3, [r3, #8]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <delete_TaskFromRunList+0xc4>)
 8000d32:	721a      	strb	r2, [r3, #8]
		return;
 8000d34:	e03e      	b.n	8000db4 <delete_TaskFromRunList+0xbc>
	}
	sTask * temp = taskRunList.head;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <delete_TaskFromRunList+0xc4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	60fb      	str	r3, [r7, #12]
	while(temp != 0){
 8000d3c:	e035      	b.n	8000daa <delete_TaskFromRunList+0xb2>
		if(temp->pTask == function){
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d12d      	bne.n	8000da4 <delete_TaskFromRunList+0xac>
			if(temp->prev == NULL){ // delete head
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d108      	bne.n	8000d62 <delete_TaskFromRunList+0x6a>
				temp->next->prev = NULL;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
				taskRunList.head = temp->next;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <delete_TaskFromRunList+0xc4>)
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e016      	b.n	8000d90 <delete_TaskFromRunList+0x98>
			}
			else if (temp->next == NULL){ //delete tail
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d108      	bne.n	8000d7c <delete_TaskFromRunList+0x84>
				temp->prev->next = NULL;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
				taskRunList.tail = temp->prev;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <delete_TaskFromRunList+0xc4>)
 8000d78:	6053      	str	r3, [r2, #4]
 8000d7a:	e009      	b.n	8000d90 <delete_TaskFromRunList+0x98>
			}
			else{
				temp->prev->next = temp->next;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	68d2      	ldr	r2, [r2, #12]
 8000d84:	60da      	str	r2, [r3, #12]
				temp->next->prev = temp->prev;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	6912      	ldr	r2, [r2, #16]
 8000d8e:	611a      	str	r2, [r3, #16]
			}
			taskRunList.numTask--;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <delete_TaskFromRunList+0xc4>)
 8000d92:	7a1b      	ldrb	r3, [r3, #8]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <delete_TaskFromRunList+0xc4>)
 8000d9a:	721a      	strb	r2, [r3, #8]
			free(temp);
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f001 fd39 	bl	8002814 <free>
			return;
 8000da2:	e007      	b.n	8000db4 <delete_TaskFromRunList+0xbc>
		}
		temp = temp->next;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60fb      	str	r3, [r7, #12]
	while(temp != 0){
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1c6      	bne.n	8000d3e <delete_TaskFromRunList+0x46>
 8000db0:	e000      	b.n	8000db4 <delete_TaskFromRunList+0xbc>
		return ;
 8000db2:	bf00      	nop
	}
}
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000958 	.word	0x20000958

08000dc0 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(void (*function)()){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	if(taskList.numTask == 0)
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <SCH_Delete_Task+0x9c>)
 8000dca:	7a1b      	ldrb	r3, [r3, #8]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <SCH_Delete_Task+0x14>
		return 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e03e      	b.n	8000e52 <SCH_Delete_Task+0x92>
	sTask * temp = taskList.head;
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <SCH_Delete_Task+0x9c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
	while(temp != 0){
 8000dda:	e036      	b.n	8000e4a <SCH_Delete_Task+0x8a>
		if(temp->pTask == function){
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d12e      	bne.n	8000e44 <SCH_Delete_Task+0x84>
			if(temp->prev == NULL){ // delete head
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d108      	bne.n	8000e00 <SCH_Delete_Task+0x40>
				temp->next->prev = NULL;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
				taskList.head = temp->next;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	4a18      	ldr	r2, [pc, #96]	; (8000e5c <SCH_Delete_Task+0x9c>)
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e016      	b.n	8000e2e <SCH_Delete_Task+0x6e>
			}
			else if (temp->next == NULL){ //delete tail
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d108      	bne.n	8000e1a <SCH_Delete_Task+0x5a>
				temp->prev->next = NULL;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
				taskList.tail = temp->prev;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <SCH_Delete_Task+0x9c>)
 8000e16:	6053      	str	r3, [r2, #4]
 8000e18:	e009      	b.n	8000e2e <SCH_Delete_Task+0x6e>
			}
			else{
				temp->prev->next = temp->next;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	68d2      	ldr	r2, [r2, #12]
 8000e22:	60da      	str	r2, [r3, #12]
				temp->next->prev = temp->prev;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	6912      	ldr	r2, [r2, #16]
 8000e2c:	611a      	str	r2, [r3, #16]
			}
			taskList.numTask--;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <SCH_Delete_Task+0x9c>)
 8000e30:	7a1b      	ldrb	r3, [r3, #8]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <SCH_Delete_Task+0x9c>)
 8000e38:	721a      	strb	r2, [r3, #8]
			free(temp);
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f001 fcea 	bl	8002814 <free>
			return 1;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e006      	b.n	8000e52 <SCH_Delete_Task+0x92>
		}
		temp = temp->next;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60fb      	str	r3, [r7, #12]
	while(temp != 0){
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1c5      	bne.n	8000ddc <SCH_Delete_Task+0x1c>
	}
	return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000094c 	.word	0x2000094c

08000e60 <SCH_Is_Task_Exist>:

uint8_t SCH_Is_Task_Exist(void (*function)()){
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	if(taskList.numTask == 0) return 0;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <SCH_Is_Task_Exist+0x44>)
 8000e6a:	7a1b      	ldrb	r3, [r3, #8]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <SCH_Is_Task_Exist+0x14>
 8000e70:	2300      	movs	r3, #0
 8000e72:	e011      	b.n	8000e98 <SCH_Is_Task_Exist+0x38>
	sTask * temp = taskList.head;
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <SCH_Is_Task_Exist+0x44>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 8000e7a:	e009      	b.n	8000e90 <SCH_Is_Task_Exist+0x30>
		if(temp->pTask == function)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d101      	bne.n	8000e8a <SCH_Is_Task_Exist+0x2a>
			return 1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e006      	b.n	8000e98 <SCH_Is_Task_Exist+0x38>
		temp = temp->next;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f2      	bne.n	8000e7c <SCH_Is_Task_Exist+0x1c>
	}
	return 0;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000094c 	.word	0x2000094c

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_MspInit+0x5c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <HAL_MspInit+0x5c>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6193      	str	r3, [r2, #24]
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_MspInit+0x5c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_MspInit+0x60>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_MspInit+0x60>)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000

08000f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f1c:	d113      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_TIM_Base_MspInit+0x44>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <HAL_TIM_Base_MspInit+0x44>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_TIM_Base_MspInit+0x44>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	201c      	movs	r0, #28
 8000f3c:	f000 fa87 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f40:	201c      	movs	r0, #28
 8000f42:	f000 faa0 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <NMI_Handler+0x4>

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <MemManage_Handler+0x4>

08000f66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9a:	f000 f965 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <TIM2_IRQHandler+0x10>)
 8000faa:	f001 f8c1 	bl	8002130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000904 	.word	0x20000904

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f001 fbe2 	bl	80027b0 <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20002800 	.word	0x20002800
 8001018:	00000400 	.word	0x00000400
 800101c:	200008cc 	.word	0x200008cc
 8001020:	20000978 	.word	0x20000978

08001024 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <setTrafficLightDefault>:
		BIT11_Pin, BIT12_Pin, BIT13_Pin, BIT14_Pin, BIT15_Pin};
uint16_t BIT_A[9] = {BIT0_Pin, BIT1_Pin, BIT2_Pin, BIT3_Pin, BIT4_Pin,
                     BIT5_Pin, BIT6_Pin, BIT7_Pin, BIT8_Pin};
uint16_t BIT_B[7] = {BIT9_Pin, BIT10_Pin, BIT11_Pin, BIT12_Pin,
                     BIT13_Pin, BIT14_Pin, BIT15_Pin};
void setTrafficLightDefault(int lane){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, REDLIGHT[lane], SET);
 8001038:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <setTrafficLightDefault+0x48>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001040:	2201      	movs	r2, #1
 8001042:	4619      	mov	r1, r3
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <setTrafficLightDefault+0x4c>)
 8001046:	f000 fbca 	bl	80017de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENLIGHT[lane], SET);
 800104a:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <setTrafficLightDefault+0x50>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001052:	2201      	movs	r2, #1
 8001054:	4619      	mov	r1, r3
 8001056:	4809      	ldr	r0, [pc, #36]	; (800107c <setTrafficLightDefault+0x4c>)
 8001058:	f000 fbc1 	bl	80017de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AMBERLIGHT[lane], SET);
 800105c:	4a09      	ldr	r2, [pc, #36]	; (8001084 <setTrafficLightDefault+0x54>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001064:	2201      	movs	r2, #1
 8001066:	4619      	mov	r1, r3
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <setTrafficLightDefault+0x4c>)
 800106a:	f000 fbb8 	bl	80017de <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000040 	.word	0x20000040
 800107c:	40010800 	.word	0x40010800
 8001080:	20000044 	.word	0x20000044
 8001084:	20000048 	.word	0x20000048

08001088 <setTrafficLightRed>:
void setTrafficLightRed(int lane){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, REDLIGHT[lane], RESET);
 8001090:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <setTrafficLightRed+0x48>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <setTrafficLightRed+0x4c>)
 800109e:	f000 fb9e 	bl	80017de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENLIGHT[lane], SET);
 80010a2:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <setTrafficLightRed+0x50>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010aa:	2201      	movs	r2, #1
 80010ac:	4619      	mov	r1, r3
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <setTrafficLightRed+0x4c>)
 80010b0:	f000 fb95 	bl	80017de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AMBERLIGHT[lane], SET);
 80010b4:	4a09      	ldr	r2, [pc, #36]	; (80010dc <setTrafficLightRed+0x54>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010bc:	2201      	movs	r2, #1
 80010be:	4619      	mov	r1, r3
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <setTrafficLightRed+0x4c>)
 80010c2:	f000 fb8c 	bl	80017de <HAL_GPIO_WritePin>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000040 	.word	0x20000040
 80010d4:	40010800 	.word	0x40010800
 80010d8:	20000044 	.word	0x20000044
 80010dc:	20000048 	.word	0x20000048

080010e0 <setTrafficLightGreen>:
void setTrafficLightGreen(int lane){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, REDLIGHT[lane], SET);
 80010e8:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <setTrafficLightGreen+0x48>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f0:	2201      	movs	r2, #1
 80010f2:	4619      	mov	r1, r3
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <setTrafficLightGreen+0x4c>)
 80010f6:	f000 fb72 	bl	80017de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENLIGHT[lane], RESET);
 80010fa:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <setTrafficLightGreen+0x50>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	4809      	ldr	r0, [pc, #36]	; (800112c <setTrafficLightGreen+0x4c>)
 8001108:	f000 fb69 	bl	80017de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AMBERLIGHT[lane], SET);
 800110c:	4a09      	ldr	r2, [pc, #36]	; (8001134 <setTrafficLightGreen+0x54>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <setTrafficLightGreen+0x4c>)
 800111a:	f000 fb60 	bl	80017de <HAL_GPIO_WritePin>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000040 	.word	0x20000040
 800112c:	40010800 	.word	0x40010800
 8001130:	20000044 	.word	0x20000044
 8001134:	20000048 	.word	0x20000048

08001138 <setTrafficLightAmber>:
void setTrafficLightAmber(int lane){
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, REDLIGHT[lane], SET);
 8001140:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <setTrafficLightAmber+0x48>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001148:	2201      	movs	r2, #1
 800114a:	4619      	mov	r1, r3
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <setTrafficLightAmber+0x4c>)
 800114e:	f000 fb46 	bl	80017de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENLIGHT[lane], SET);
 8001152:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <setTrafficLightAmber+0x50>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800115a:	2201      	movs	r2, #1
 800115c:	4619      	mov	r1, r3
 800115e:	4809      	ldr	r0, [pc, #36]	; (8001184 <setTrafficLightAmber+0x4c>)
 8001160:	f000 fb3d 	bl	80017de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AMBERLIGHT[lane], RESET);
 8001164:	4a09      	ldr	r2, [pc, #36]	; (800118c <setTrafficLightAmber+0x54>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800116c:	2200      	movs	r2, #0
 800116e:	4619      	mov	r1, r3
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <setTrafficLightAmber+0x4c>)
 8001172:	f000 fb34 	bl	80017de <HAL_GPIO_WritePin>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000040 	.word	0x20000040
 8001184:	40010800 	.word	0x40010800
 8001188:	20000044 	.word	0x20000044
 800118c:	20000048 	.word	0x20000048

08001190 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001190:	f7ff ff48 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001196:	490c      	ldr	r1, [pc, #48]	; (80011c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011ac:	4c09      	ldr	r4, [pc, #36]	; (80011d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ba:	f001 faff 	bl	80027bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011be:	f7ff fba7 	bl	8000910 <main>
  bx lr
 80011c2:	4770      	bx	lr
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000894 	.word	0x20000894
  ldr r2, =_sidata
 80011cc:	0800304c 	.word	0x0800304c
  ldr r2, =_sbss
 80011d0:	20000894 	.word	0x20000894
  ldr r4, =_ebss
 80011d4:	20000978 	.word	0x20000978

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x28>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x28>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f923 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fe56 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40022000 	.word	0x40022000

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f93b 	bl	80014a2 <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f903 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000018 	.word	0x20000018
 8001260:	20000050 	.word	0x20000050
 8001264:	2000004c 	.word	0x2000004c

08001268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x1c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x20>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_IncTick+0x20>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000050 	.word	0x20000050
 8001288:	20000964 	.word	0x20000964

0800128c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <HAL_GetTick+0x10>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	20000964 	.word	0x20000964

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4906      	ldr	r1, [pc, #24]	; (8001338 <__NVIC_EnableIRQ+0x34>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff90 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff2d 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff42 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff90 	bl	8001390 <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5f 	bl	800133c <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff35 	bl	8001304 <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b08b      	sub	sp, #44	; 0x2c
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	e148      	b.n	8001762 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d0:	2201      	movs	r2, #1
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f040 8137 	bne.w	800175c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4aa3      	ldr	r2, [pc, #652]	; (8001780 <HAL_GPIO_Init+0x2c4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d05e      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 80014f8:	4aa1      	ldr	r2, [pc, #644]	; (8001780 <HAL_GPIO_Init+0x2c4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d875      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 80014fe:	4aa1      	ldr	r2, [pc, #644]	; (8001784 <HAL_GPIO_Init+0x2c8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d058      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001504:	4a9f      	ldr	r2, [pc, #636]	; (8001784 <HAL_GPIO_Init+0x2c8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d86f      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 800150a:	4a9f      	ldr	r2, [pc, #636]	; (8001788 <HAL_GPIO_Init+0x2cc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d052      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001510:	4a9d      	ldr	r2, [pc, #628]	; (8001788 <HAL_GPIO_Init+0x2cc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d869      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001516:	4a9d      	ldr	r2, [pc, #628]	; (800178c <HAL_GPIO_Init+0x2d0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d04c      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 800151c:	4a9b      	ldr	r2, [pc, #620]	; (800178c <HAL_GPIO_Init+0x2d0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d863      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001522:	4a9b      	ldr	r2, [pc, #620]	; (8001790 <HAL_GPIO_Init+0x2d4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d046      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001528:	4a99      	ldr	r2, [pc, #612]	; (8001790 <HAL_GPIO_Init+0x2d4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d85d      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 800152e:	2b12      	cmp	r3, #18
 8001530:	d82a      	bhi.n	8001588 <HAL_GPIO_Init+0xcc>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d859      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001536:	a201      	add	r2, pc, #4	; (adr r2, 800153c <HAL_GPIO_Init+0x80>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	080015b7 	.word	0x080015b7
 8001540:	08001591 	.word	0x08001591
 8001544:	080015a3 	.word	0x080015a3
 8001548:	080015e5 	.word	0x080015e5
 800154c:	080015eb 	.word	0x080015eb
 8001550:	080015eb 	.word	0x080015eb
 8001554:	080015eb 	.word	0x080015eb
 8001558:	080015eb 	.word	0x080015eb
 800155c:	080015eb 	.word	0x080015eb
 8001560:	080015eb 	.word	0x080015eb
 8001564:	080015eb 	.word	0x080015eb
 8001568:	080015eb 	.word	0x080015eb
 800156c:	080015eb 	.word	0x080015eb
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015eb 	.word	0x080015eb
 8001578:	080015eb 	.word	0x080015eb
 800157c:	080015eb 	.word	0x080015eb
 8001580:	08001599 	.word	0x08001599
 8001584:	080015ad 	.word	0x080015ad
 8001588:	4a82      	ldr	r2, [pc, #520]	; (8001794 <HAL_GPIO_Init+0x2d8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158e:	e02c      	b.n	80015ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e029      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	3304      	adds	r3, #4
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e024      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	3308      	adds	r3, #8
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e01f      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	330c      	adds	r3, #12
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e01a      	b.n	80015ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015be:	2304      	movs	r3, #4
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e013      	b.n	80015ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015cc:	2308      	movs	r3, #8
 80015ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	611a      	str	r2, [r3, #16]
          break;
 80015d6:	e009      	b.n	80015ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d8:	2308      	movs	r3, #8
 80015da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	615a      	str	r2, [r3, #20]
          break;
 80015e2:	e003      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e000      	b.n	80015ec <HAL_GPIO_Init+0x130>
          break;
 80015ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2bff      	cmp	r3, #255	; 0xff
 80015f0:	d801      	bhi.n	80015f6 <HAL_GPIO_Init+0x13a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	e001      	b.n	80015fa <HAL_GPIO_Init+0x13e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3304      	adds	r3, #4
 80015fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2bff      	cmp	r3, #255	; 0xff
 8001600:	d802      	bhi.n	8001608 <HAL_GPIO_Init+0x14c>
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	e002      	b.n	800160e <HAL_GPIO_Init+0x152>
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	3b08      	subs	r3, #8
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	210f      	movs	r1, #15
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	401a      	ands	r2, r3
 8001620:	6a39      	ldr	r1, [r7, #32]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8090 	beq.w	800175c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800163c:	4b56      	ldr	r3, [pc, #344]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a55      	ldr	r2, [pc, #340]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001654:	4a51      	ldr	r2, [pc, #324]	; (800179c <HAL_GPIO_Init+0x2e0>)
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001660:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <HAL_GPIO_Init+0x2e4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d00d      	beq.n	800169c <HAL_GPIO_Init+0x1e0>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a48      	ldr	r2, [pc, #288]	; (80017a4 <HAL_GPIO_Init+0x2e8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d007      	beq.n	8001698 <HAL_GPIO_Init+0x1dc>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a47      	ldr	r2, [pc, #284]	; (80017a8 <HAL_GPIO_Init+0x2ec>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d101      	bne.n	8001694 <HAL_GPIO_Init+0x1d8>
 8001690:	2302      	movs	r3, #2
 8001692:	e004      	b.n	800169e <HAL_GPIO_Init+0x1e2>
 8001694:	2303      	movs	r3, #3
 8001696:	e002      	b.n	800169e <HAL_GPIO_Init+0x1e2>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <HAL_GPIO_Init+0x1e2>
 800169c:	2300      	movs	r3, #0
 800169e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a0:	f002 0203 	and.w	r2, r2, #3
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	4093      	lsls	r3, r2
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ae:	493b      	ldr	r1, [pc, #236]	; (800179c <HAL_GPIO_Init+0x2e0>)
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c8:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	4937      	ldr	r1, [pc, #220]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016d6:	4b35      	ldr	r3, [pc, #212]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	43db      	mvns	r3, r3
 80016de:	4933      	ldr	r1, [pc, #204]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	492d      	ldr	r1, [pc, #180]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60cb      	str	r3, [r1, #12]
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	43db      	mvns	r3, r3
 8001706:	4929      	ldr	r1, [pc, #164]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001708:	4013      	ands	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4923      	ldr	r1, [pc, #140]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	43db      	mvns	r3, r3
 800172e:	491f      	ldr	r1, [pc, #124]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001730:	4013      	ands	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4919      	ldr	r1, [pc, #100]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	43db      	mvns	r3, r3
 8001756:	4915      	ldr	r1, [pc, #84]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001758:	4013      	ands	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	3301      	adds	r3, #1
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	fa22 f303 	lsr.w	r3, r2, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	f47f aeaf 	bne.w	80014d0 <HAL_GPIO_Init+0x14>
  }
}
 8001772:	bf00      	nop
 8001774:	bf00      	nop
 8001776:	372c      	adds	r7, #44	; 0x2c
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	10320000 	.word	0x10320000
 8001784:	10310000 	.word	0x10310000
 8001788:	10220000 	.word	0x10220000
 800178c:	10210000 	.word	0x10210000
 8001790:	10120000 	.word	0x10120000
 8001794:	10110000 	.word	0x10110000
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000
 80017a0:	40010800 	.word	0x40010800
 80017a4:	40010c00 	.word	0x40010c00
 80017a8:	40011000 	.word	0x40011000
 80017ac:	40010400 	.word	0x40010400

080017b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e001      	b.n	80017d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	807b      	strh	r3, [r7, #2]
 80017ea:	4613      	mov	r3, r2
 80017ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ee:	787b      	ldrb	r3, [r7, #1]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f4:	887a      	ldrh	r2, [r7, #2]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017fa:	e003      	b.n	8001804 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	041a      	lsls	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	611a      	str	r2, [r3, #16]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001820:	887a      	ldrh	r2, [r7, #2]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	041a      	lsls	r2, r3, #16
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43d9      	mvns	r1, r3
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	400b      	ands	r3, r1
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	611a      	str	r2, [r3, #16]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e26c      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8087 	beq.w	800196e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001860:	4b92      	ldr	r3, [pc, #584]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b04      	cmp	r3, #4
 800186a:	d00c      	beq.n	8001886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800186c:	4b8f      	ldr	r3, [pc, #572]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b08      	cmp	r3, #8
 8001876:	d112      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
 8001878:	4b8c      	ldr	r3, [pc, #560]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001884:	d10b      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001886:	4b89      	ldr	r3, [pc, #548]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d06c      	beq.n	800196c <HAL_RCC_OscConfig+0x12c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d168      	bne.n	800196c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e246      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x76>
 80018a8:	4b80      	ldr	r3, [pc, #512]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a7f      	ldr	r2, [pc, #508]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e02e      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x98>
 80018be:	4b7b      	ldr	r3, [pc, #492]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a7a      	ldr	r2, [pc, #488]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b78      	ldr	r3, [pc, #480]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a77      	ldr	r2, [pc, #476]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e01d      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0xbc>
 80018e2:	4b72      	ldr	r3, [pc, #456]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a71      	ldr	r2, [pc, #452]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b6f      	ldr	r3, [pc, #444]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6e      	ldr	r2, [pc, #440]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018fc:	4b6b      	ldr	r3, [pc, #428]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6a      	ldr	r2, [pc, #424]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a67      	ldr	r2, [pc, #412]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001912:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fcb6 	bl	800128c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fcb2 	bl	800128c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1fa      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0xe4>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fca2 	bl	800128c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fc9e 	bl	800128c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1e6      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x10c>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d063      	beq.n	8001a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800197a:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001986:	4b49      	ldr	r3, [pc, #292]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	d11c      	bne.n	80019cc <HAL_RCC_OscConfig+0x18c>
 8001992:	4b46      	ldr	r3, [pc, #280]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d116      	bne.n	80019cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	4b43      	ldr	r3, [pc, #268]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x176>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e1ba      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4939      	ldr	r1, [pc, #228]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	e03a      	b.n	8001a42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fc57 	bl	800128c <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff fc53 	bl	800128c <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e19b      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4927      	ldr	r1, [pc, #156]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fc36 	bl	800128c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff fc32 	bl	800128c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e17a      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d03a      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d019      	beq.n	8001a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fc16 	bl	800128c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff fc12 	bl	800128c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e15a      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f000 fa9a 	bl	8001fbc <RCC_Delay>
 8001a88:	e01c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7ff fbfc 	bl	800128c <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a96:	e00f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fbf8 	bl	800128c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d908      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e140      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	42420000 	.word	0x42420000
 8001ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	4b9e      	ldr	r3, [pc, #632]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e9      	bne.n	8001a98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a6 	beq.w	8001c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad6:	4b97      	ldr	r3, [pc, #604]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10d      	bne.n	8001afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b94      	ldr	r3, [pc, #592]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a93      	ldr	r2, [pc, #588]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b91      	ldr	r3, [pc, #580]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b8e      	ldr	r3, [pc, #568]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0a:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a8a      	ldr	r2, [pc, #552]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fbb9 	bl	800128c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7ff fbb5 	bl	800128c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b64      	cmp	r3, #100	; 0x64
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0fd      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b81      	ldr	r3, [pc, #516]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x312>
 8001b44:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	e02d      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x334>
 8001b5a:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a75      	ldr	r2, [pc, #468]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	4b73      	ldr	r3, [pc, #460]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a72      	ldr	r2, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6213      	str	r3, [r2, #32]
 8001b72:	e01c      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d10c      	bne.n	8001b96 <HAL_RCC_OscConfig+0x356>
 8001b7c:	4b6d      	ldr	r3, [pc, #436]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a6c      	ldr	r2, [pc, #432]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a69      	ldr	r2, [pc, #420]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e00b      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a66      	ldr	r2, [pc, #408]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	4b64      	ldr	r3, [pc, #400]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a63      	ldr	r2, [pc, #396]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d015      	beq.n	8001be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fb69 	bl	800128c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7ff fb65 	bl	800128c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0ab      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ee      	beq.n	8001bbe <HAL_RCC_OscConfig+0x37e>
 8001be0:	e014      	b.n	8001c0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be2:	f7ff fb53 	bl	800128c <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff fb4f 	bl	800128c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e095      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c12:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a47      	ldr	r2, [pc, #284]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8081 	beq.w	8001d2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c28:	4b42      	ldr	r3, [pc, #264]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d061      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d146      	bne.n	8001cca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_OscConfig+0x4fc>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7ff fb23 	bl	800128c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff fb1f 	bl	800128c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e067      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d108      	bne.n	8001c84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c72:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	492d      	ldr	r1, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a19      	ldr	r1, [r3, #32]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	430b      	orrs	r3, r1
 8001c96:	4927      	ldr	r1, [pc, #156]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_RCC_OscConfig+0x4fc>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff faf3 	bl	800128c <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7ff faef 	bl	800128c <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e037      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x46a>
 8001cc8:	e02f      	b.n	8001d2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_RCC_OscConfig+0x4fc>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fadc 	bl	800128c <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff fad8 	bl	800128c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e020      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x498>
 8001cf6:	e018      	b.n	8001d2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e013      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42420060 	.word	0x42420060

08001d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0d0      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d910      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 0207 	bic.w	r2, r3, #7
 8001d6a:	4965      	ldr	r1, [pc, #404]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0b8      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d020      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d9c:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc0:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	494d      	ldr	r1, [pc, #308]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d040      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d115      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e07f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e073      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06b      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4936      	ldr	r1, [pc, #216]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e30:	f7ff fa2c 	bl	800128c <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff fa28 	bl	800128c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e053      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d210      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 0207 	bic.w	r2, r3, #7
 8001e76:	4922      	ldr	r1, [pc, #136]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e032      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4916      	ldr	r1, [pc, #88]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	490e      	ldr	r1, [pc, #56]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ece:	f000 f821 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	490a      	ldr	r1, [pc, #40]	; (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee0:	5ccb      	ldrb	r3, [r1, r3]
 8001ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x1d0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f98a 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40022000 	.word	0x40022000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08003018 	.word	0x08003018
 8001f0c:	20000018 	.word	0x20000018
 8001f10:	2000004c 	.word	0x2000004c

08001f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x30>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d003      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x36>
 8001f42:	e027      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_RCC_GetSysClockFreq+0x98>)
 8001f46:	613b      	str	r3, [r7, #16]
      break;
 8001f48:	e027      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	0c9b      	lsrs	r3, r3, #18
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
 8001f56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d010      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	0c5b      	lsrs	r3, r3, #17
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <HAL_RCC_GetSysClockFreq+0x98>)
 8001f76:	fb02 f203 	mul.w	r2, r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e004      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f88:	fb02 f303 	mul.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	613b      	str	r3, [r7, #16]
      break;
 8001f92:	e002      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetSysClockFreq+0x98>)
 8001f96:	613b      	str	r3, [r7, #16]
      break;
 8001f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9a:	693b      	ldr	r3, [r7, #16]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	007a1200 	.word	0x007a1200
 8001fb0:	08003028 	.word	0x08003028
 8001fb4:	08003038 	.word	0x08003038
 8001fb8:	003d0900 	.word	0x003d0900

08001fbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <RCC_Delay+0x34>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <RCC_Delay+0x38>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0a5b      	lsrs	r3, r3, #9
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fd8:	bf00      	nop
  }
  while (Delay --);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1e5a      	subs	r2, r3, #1
 8001fde:	60fa      	str	r2, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f9      	bne.n	8001fd8 <RCC_Delay+0x1c>
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	20000018 	.word	0x20000018
 8001ff4:	10624dd3 	.word	0x10624dd3

08001ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e041      	b.n	800208e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe ff74 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3304      	adds	r3, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f000 fa56 	bl	80024e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d001      	beq.n	80020b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e035      	b.n	800211c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a16      	ldr	r2, [pc, #88]	; (8002128 <HAL_TIM_Base_Start_IT+0x90>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d009      	beq.n	80020e6 <HAL_TIM_Base_Start_IT+0x4e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020da:	d004      	beq.n	80020e6 <HAL_TIM_Base_Start_IT+0x4e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a12      	ldr	r2, [pc, #72]	; (800212c <HAL_TIM_Base_Start_IT+0x94>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d111      	bne.n	800210a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b06      	cmp	r3, #6
 80020f6:	d010      	beq.n	800211a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002108:	e007      	b.n	800211a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0201 	orr.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40012c00 	.word	0x40012c00
 800212c:	40000400 	.word	0x40000400

08002130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d020      	beq.n	8002194 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01b      	beq.n	8002194 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0202 	mvn.w	r2, #2
 8002164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f998 	bl	80024b0 <HAL_TIM_IC_CaptureCallback>
 8002180:	e005      	b.n	800218e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f98b 	bl	800249e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f99a 	bl	80024c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d020      	beq.n	80021e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0204 	mvn.w	r2, #4
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f972 	bl	80024b0 <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f965 	bl	800249e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f974 	bl	80024c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d020      	beq.n	800222c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01b      	beq.n	800222c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0208 	mvn.w	r2, #8
 80021fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2204      	movs	r2, #4
 8002202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f94c 	bl	80024b0 <HAL_TIM_IC_CaptureCallback>
 8002218:	e005      	b.n	8002226 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f93f 	bl	800249e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f94e 	bl	80024c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	d020      	beq.n	8002278 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01b      	beq.n	8002278 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0210 	mvn.w	r2, #16
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2208      	movs	r2, #8
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f926 	bl	80024b0 <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f919 	bl	800249e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f928 	bl	80024c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00c      	beq.n	800229c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0201 	mvn.w	r2, #1
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fc44 	bl	8000b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00c      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fa6f 	bl	800279e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00c      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f8f8 	bl	80024d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00c      	beq.n	8002308 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0220 	mvn.w	r2, #32
 8002300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fa42 	bl	800278c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_TIM_ConfigClockSource+0x1c>
 8002328:	2302      	movs	r3, #2
 800232a:	e0b4      	b.n	8002496 <HAL_TIM_ConfigClockSource+0x186>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800234a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002364:	d03e      	beq.n	80023e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236a:	f200 8087 	bhi.w	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002372:	f000 8086 	beq.w	8002482 <HAL_TIM_ConfigClockSource+0x172>
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	d87f      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800237c:	2b70      	cmp	r3, #112	; 0x70
 800237e:	d01a      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002380:	2b70      	cmp	r3, #112	; 0x70
 8002382:	d87b      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 8002384:	2b60      	cmp	r3, #96	; 0x60
 8002386:	d050      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x11a>
 8002388:	2b60      	cmp	r3, #96	; 0x60
 800238a:	d877      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800238c:	2b50      	cmp	r3, #80	; 0x50
 800238e:	d03c      	beq.n	800240a <HAL_TIM_ConfigClockSource+0xfa>
 8002390:	2b50      	cmp	r3, #80	; 0x50
 8002392:	d873      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d058      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x13a>
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d86f      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 800239c:	2b30      	cmp	r3, #48	; 0x30
 800239e:	d064      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023a0:	2b30      	cmp	r3, #48	; 0x30
 80023a2:	d86b      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d060      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d867      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d05c      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d05a      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x15a>
 80023b4:	e062      	b.n	800247c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f000 f96a 	bl	800269e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	609a      	str	r2, [r3, #8]
      break;
 80023e2:	e04f      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f000 f953 	bl	800269e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002406:	609a      	str	r2, [r3, #8]
      break;
 8002408:	e03c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	461a      	mov	r2, r3
 8002418:	f000 f8ca 	bl	80025b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2150      	movs	r1, #80	; 0x50
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f921 	bl	800266a <TIM_ITRx_SetConfig>
      break;
 8002428:	e02c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	461a      	mov	r2, r3
 8002438:	f000 f8e8 	bl	800260c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2160      	movs	r1, #96	; 0x60
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f911 	bl	800266a <TIM_ITRx_SetConfig>
      break;
 8002448:	e01c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	461a      	mov	r2, r3
 8002458:	f000 f8aa 	bl	80025b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2140      	movs	r1, #64	; 0x40
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f901 	bl	800266a <TIM_ITRx_SetConfig>
      break;
 8002468:	e00c      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f000 f8f8 	bl	800266a <TIM_ITRx_SetConfig>
      break;
 800247a:	e003      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
      break;
 8002480:	e000      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002482:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
	...

080024e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a2b      	ldr	r2, [pc, #172]	; (80025a8 <TIM_Base_SetConfig+0xc0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d007      	beq.n	8002510 <TIM_Base_SetConfig+0x28>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002506:	d003      	beq.n	8002510 <TIM_Base_SetConfig+0x28>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a28      	ldr	r2, [pc, #160]	; (80025ac <TIM_Base_SetConfig+0xc4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d108      	bne.n	8002522 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <TIM_Base_SetConfig+0xc0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d007      	beq.n	800253a <TIM_Base_SetConfig+0x52>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002530:	d003      	beq.n	800253a <TIM_Base_SetConfig+0x52>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <TIM_Base_SetConfig+0xc4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d108      	bne.n	800254c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a0d      	ldr	r2, [pc, #52]	; (80025a8 <TIM_Base_SetConfig+0xc0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d103      	bne.n	8002580 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f023 0201 	bic.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	611a      	str	r2, [r3, #16]
  }
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40000400 	.word	0x40000400

080025b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	f023 0201 	bic.w	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f023 030a 	bic.w	r3, r3, #10
 80025ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	621a      	str	r2, [r3, #32]
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f023 0210 	bic.w	r2, r3, #16
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	031b      	lsls	r3, r3, #12
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002648:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	621a      	str	r2, [r3, #32]
}
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800266a:	b480      	push	{r7}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	f043 0307 	orr.w	r3, r3, #7
 800268c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	609a      	str	r2, [r3, #8]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800269e:	b480      	push	{r7}
 80026a0:	b087      	sub	sp, #28
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	021a      	lsls	r2, r3, #8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	609a      	str	r2, [r3, #8]
}
 80026d2:	bf00      	nop
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e041      	b.n	8002778 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a14      	ldr	r2, [pc, #80]	; (8002784 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002740:	d004      	beq.n	800274c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a10      	ldr	r2, [pc, #64]	; (8002788 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d10c      	bne.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002752:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	4313      	orrs	r3, r2
 800275c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40012c00 	.word	0x40012c00
 8002788:	40000400 	.word	0x40000400

0800278c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <__errno>:
 80027b0:	4b01      	ldr	r3, [pc, #4]	; (80027b8 <__errno+0x8>)
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000054 	.word	0x20000054

080027bc <__libc_init_array>:
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	2600      	movs	r6, #0
 80027c0:	4d0c      	ldr	r5, [pc, #48]	; (80027f4 <__libc_init_array+0x38>)
 80027c2:	4c0d      	ldr	r4, [pc, #52]	; (80027f8 <__libc_init_array+0x3c>)
 80027c4:	1b64      	subs	r4, r4, r5
 80027c6:	10a4      	asrs	r4, r4, #2
 80027c8:	42a6      	cmp	r6, r4
 80027ca:	d109      	bne.n	80027e0 <__libc_init_array+0x24>
 80027cc:	f000 fc18 	bl	8003000 <_init>
 80027d0:	2600      	movs	r6, #0
 80027d2:	4d0a      	ldr	r5, [pc, #40]	; (80027fc <__libc_init_array+0x40>)
 80027d4:	4c0a      	ldr	r4, [pc, #40]	; (8002800 <__libc_init_array+0x44>)
 80027d6:	1b64      	subs	r4, r4, r5
 80027d8:	10a4      	asrs	r4, r4, #2
 80027da:	42a6      	cmp	r6, r4
 80027dc:	d105      	bne.n	80027ea <__libc_init_array+0x2e>
 80027de:	bd70      	pop	{r4, r5, r6, pc}
 80027e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e4:	4798      	blx	r3
 80027e6:	3601      	adds	r6, #1
 80027e8:	e7ee      	b.n	80027c8 <__libc_init_array+0xc>
 80027ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ee:	4798      	blx	r3
 80027f0:	3601      	adds	r6, #1
 80027f2:	e7f2      	b.n	80027da <__libc_init_array+0x1e>
 80027f4:	08003040 	.word	0x08003040
 80027f8:	08003040 	.word	0x08003040
 80027fc:	08003040 	.word	0x08003040
 8002800:	08003048 	.word	0x08003048

08002804 <malloc>:
 8002804:	4b02      	ldr	r3, [pc, #8]	; (8002810 <malloc+0xc>)
 8002806:	4601      	mov	r1, r0
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	f000 b80b 	b.w	8002824 <_malloc_r>
 800280e:	bf00      	nop
 8002810:	20000054 	.word	0x20000054

08002814 <free>:
 8002814:	4b02      	ldr	r3, [pc, #8]	; (8002820 <free+0xc>)
 8002816:	4601      	mov	r1, r0
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	f000 baef 	b.w	8002dfc <_free_r>
 800281e:	bf00      	nop
 8002820:	20000054 	.word	0x20000054

08002824 <_malloc_r>:
 8002824:	f101 030b 	add.w	r3, r1, #11
 8002828:	2b16      	cmp	r3, #22
 800282a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800282e:	4605      	mov	r5, r0
 8002830:	d906      	bls.n	8002840 <_malloc_r+0x1c>
 8002832:	f033 0707 	bics.w	r7, r3, #7
 8002836:	d504      	bpl.n	8002842 <_malloc_r+0x1e>
 8002838:	230c      	movs	r3, #12
 800283a:	602b      	str	r3, [r5, #0]
 800283c:	2400      	movs	r4, #0
 800283e:	e1ae      	b.n	8002b9e <_malloc_r+0x37a>
 8002840:	2710      	movs	r7, #16
 8002842:	42b9      	cmp	r1, r7
 8002844:	d8f8      	bhi.n	8002838 <_malloc_r+0x14>
 8002846:	4628      	mov	r0, r5
 8002848:	f000 fa36 	bl	8002cb8 <__malloc_lock>
 800284c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8002850:	4ec3      	ldr	r6, [pc, #780]	; (8002b60 <_malloc_r+0x33c>)
 8002852:	d238      	bcs.n	80028c6 <_malloc_r+0xa2>
 8002854:	f107 0208 	add.w	r2, r7, #8
 8002858:	4432      	add	r2, r6
 800285a:	6854      	ldr	r4, [r2, #4]
 800285c:	f1a2 0108 	sub.w	r1, r2, #8
 8002860:	428c      	cmp	r4, r1
 8002862:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8002866:	d102      	bne.n	800286e <_malloc_r+0x4a>
 8002868:	68d4      	ldr	r4, [r2, #12]
 800286a:	42a2      	cmp	r2, r4
 800286c:	d010      	beq.n	8002890 <_malloc_r+0x6c>
 800286e:	6863      	ldr	r3, [r4, #4]
 8002870:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8002874:	f023 0303 	bic.w	r3, r3, #3
 8002878:	60ca      	str	r2, [r1, #12]
 800287a:	4423      	add	r3, r4
 800287c:	6091      	str	r1, [r2, #8]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	4628      	mov	r0, r5
 8002888:	f000 fa1c 	bl	8002cc4 <__malloc_unlock>
 800288c:	3408      	adds	r4, #8
 800288e:	e186      	b.n	8002b9e <_malloc_r+0x37a>
 8002890:	3302      	adds	r3, #2
 8002892:	4ab4      	ldr	r2, [pc, #720]	; (8002b64 <_malloc_r+0x340>)
 8002894:	6934      	ldr	r4, [r6, #16]
 8002896:	4611      	mov	r1, r2
 8002898:	4294      	cmp	r4, r2
 800289a:	d077      	beq.n	800298c <_malloc_r+0x168>
 800289c:	6860      	ldr	r0, [r4, #4]
 800289e:	f020 0c03 	bic.w	ip, r0, #3
 80028a2:	ebac 0007 	sub.w	r0, ip, r7
 80028a6:	280f      	cmp	r0, #15
 80028a8:	dd48      	ble.n	800293c <_malloc_r+0x118>
 80028aa:	19e1      	adds	r1, r4, r7
 80028ac:	f040 0301 	orr.w	r3, r0, #1
 80028b0:	f047 0701 	orr.w	r7, r7, #1
 80028b4:	6067      	str	r7, [r4, #4]
 80028b6:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80028ba:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80028be:	604b      	str	r3, [r1, #4]
 80028c0:	f844 000c 	str.w	r0, [r4, ip]
 80028c4:	e7df      	b.n	8002886 <_malloc_r+0x62>
 80028c6:	0a7b      	lsrs	r3, r7, #9
 80028c8:	d02a      	beq.n	8002920 <_malloc_r+0xfc>
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d812      	bhi.n	80028f4 <_malloc_r+0xd0>
 80028ce:	09bb      	lsrs	r3, r7, #6
 80028d0:	3338      	adds	r3, #56	; 0x38
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80028d8:	6854      	ldr	r4, [r2, #4]
 80028da:	f1a2 0c08 	sub.w	ip, r2, #8
 80028de:	4564      	cmp	r4, ip
 80028e0:	d006      	beq.n	80028f0 <_malloc_r+0xcc>
 80028e2:	6862      	ldr	r2, [r4, #4]
 80028e4:	f022 0203 	bic.w	r2, r2, #3
 80028e8:	1bd0      	subs	r0, r2, r7
 80028ea:	280f      	cmp	r0, #15
 80028ec:	dd1c      	ble.n	8002928 <_malloc_r+0x104>
 80028ee:	3b01      	subs	r3, #1
 80028f0:	3301      	adds	r3, #1
 80028f2:	e7ce      	b.n	8002892 <_malloc_r+0x6e>
 80028f4:	2b14      	cmp	r3, #20
 80028f6:	d801      	bhi.n	80028fc <_malloc_r+0xd8>
 80028f8:	335b      	adds	r3, #91	; 0x5b
 80028fa:	e7ea      	b.n	80028d2 <_malloc_r+0xae>
 80028fc:	2b54      	cmp	r3, #84	; 0x54
 80028fe:	d802      	bhi.n	8002906 <_malloc_r+0xe2>
 8002900:	0b3b      	lsrs	r3, r7, #12
 8002902:	336e      	adds	r3, #110	; 0x6e
 8002904:	e7e5      	b.n	80028d2 <_malloc_r+0xae>
 8002906:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800290a:	d802      	bhi.n	8002912 <_malloc_r+0xee>
 800290c:	0bfb      	lsrs	r3, r7, #15
 800290e:	3377      	adds	r3, #119	; 0x77
 8002910:	e7df      	b.n	80028d2 <_malloc_r+0xae>
 8002912:	f240 5254 	movw	r2, #1364	; 0x554
 8002916:	4293      	cmp	r3, r2
 8002918:	d804      	bhi.n	8002924 <_malloc_r+0x100>
 800291a:	0cbb      	lsrs	r3, r7, #18
 800291c:	337c      	adds	r3, #124	; 0x7c
 800291e:	e7d8      	b.n	80028d2 <_malloc_r+0xae>
 8002920:	233f      	movs	r3, #63	; 0x3f
 8002922:	e7d6      	b.n	80028d2 <_malloc_r+0xae>
 8002924:	237e      	movs	r3, #126	; 0x7e
 8002926:	e7d4      	b.n	80028d2 <_malloc_r+0xae>
 8002928:	2800      	cmp	r0, #0
 800292a:	68e1      	ldr	r1, [r4, #12]
 800292c:	db04      	blt.n	8002938 <_malloc_r+0x114>
 800292e:	68a3      	ldr	r3, [r4, #8]
 8002930:	60d9      	str	r1, [r3, #12]
 8002932:	608b      	str	r3, [r1, #8]
 8002934:	18a3      	adds	r3, r4, r2
 8002936:	e7a2      	b.n	800287e <_malloc_r+0x5a>
 8002938:	460c      	mov	r4, r1
 800293a:	e7d0      	b.n	80028de <_malloc_r+0xba>
 800293c:	2800      	cmp	r0, #0
 800293e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8002942:	db07      	blt.n	8002954 <_malloc_r+0x130>
 8002944:	44a4      	add	ip, r4
 8002946:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	f8cc 3004 	str.w	r3, [ip, #4]
 8002952:	e798      	b.n	8002886 <_malloc_r+0x62>
 8002954:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8002958:	6870      	ldr	r0, [r6, #4]
 800295a:	f080 809e 	bcs.w	8002a9a <_malloc_r+0x276>
 800295e:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8002962:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8002966:	f04f 0c01 	mov.w	ip, #1
 800296a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800296e:	ea4c 0000 	orr.w	r0, ip, r0
 8002972:	3201      	adds	r2, #1
 8002974:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8002978:	6070      	str	r0, [r6, #4]
 800297a:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800297e:	3808      	subs	r0, #8
 8002980:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8002984:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8002988:	f8cc 400c 	str.w	r4, [ip, #12]
 800298c:	2001      	movs	r0, #1
 800298e:	109a      	asrs	r2, r3, #2
 8002990:	fa00 f202 	lsl.w	r2, r0, r2
 8002994:	6870      	ldr	r0, [r6, #4]
 8002996:	4290      	cmp	r0, r2
 8002998:	d326      	bcc.n	80029e8 <_malloc_r+0x1c4>
 800299a:	4210      	tst	r0, r2
 800299c:	d106      	bne.n	80029ac <_malloc_r+0x188>
 800299e:	f023 0303 	bic.w	r3, r3, #3
 80029a2:	0052      	lsls	r2, r2, #1
 80029a4:	4210      	tst	r0, r2
 80029a6:	f103 0304 	add.w	r3, r3, #4
 80029aa:	d0fa      	beq.n	80029a2 <_malloc_r+0x17e>
 80029ac:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80029b0:	46c1      	mov	r9, r8
 80029b2:	469e      	mov	lr, r3
 80029b4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80029b8:	454c      	cmp	r4, r9
 80029ba:	f040 80b3 	bne.w	8002b24 <_malloc_r+0x300>
 80029be:	f10e 0e01 	add.w	lr, lr, #1
 80029c2:	f01e 0f03 	tst.w	lr, #3
 80029c6:	f109 0908 	add.w	r9, r9, #8
 80029ca:	d1f3      	bne.n	80029b4 <_malloc_r+0x190>
 80029cc:	0798      	lsls	r0, r3, #30
 80029ce:	f040 80ec 	bne.w	8002baa <_malloc_r+0x386>
 80029d2:	6873      	ldr	r3, [r6, #4]
 80029d4:	ea23 0302 	bic.w	r3, r3, r2
 80029d8:	6073      	str	r3, [r6, #4]
 80029da:	6870      	ldr	r0, [r6, #4]
 80029dc:	0052      	lsls	r2, r2, #1
 80029de:	4290      	cmp	r0, r2
 80029e0:	d302      	bcc.n	80029e8 <_malloc_r+0x1c4>
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	f040 80ed 	bne.w	8002bc2 <_malloc_r+0x39e>
 80029e8:	f8d6 b008 	ldr.w	fp, [r6, #8]
 80029ec:	f8db 1004 	ldr.w	r1, [fp, #4]
 80029f0:	f021 0903 	bic.w	r9, r1, #3
 80029f4:	45b9      	cmp	r9, r7
 80029f6:	d304      	bcc.n	8002a02 <_malloc_r+0x1de>
 80029f8:	eba9 0207 	sub.w	r2, r9, r7
 80029fc:	2a0f      	cmp	r2, #15
 80029fe:	f300 8148 	bgt.w	8002c92 <_malloc_r+0x46e>
 8002a02:	4a59      	ldr	r2, [pc, #356]	; (8002b68 <_malloc_r+0x344>)
 8002a04:	eb0b 0309 	add.w	r3, fp, r9
 8002a08:	6811      	ldr	r1, [r2, #0]
 8002a0a:	2008      	movs	r0, #8
 8002a0c:	3110      	adds	r1, #16
 8002a0e:	4439      	add	r1, r7
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	9100      	str	r1, [sp, #0]
 8002a14:	f000 f96c 	bl	8002cf0 <sysconf>
 8002a18:	e9dd 1300 	ldrd	r1, r3, [sp]
 8002a1c:	4680      	mov	r8, r0
 8002a1e:	4a53      	ldr	r2, [pc, #332]	; (8002b6c <_malloc_r+0x348>)
 8002a20:	6810      	ldr	r0, [r2, #0]
 8002a22:	3001      	adds	r0, #1
 8002a24:	bf1f      	itttt	ne
 8002a26:	f101 31ff 	addne.w	r1, r1, #4294967295
 8002a2a:	4441      	addne	r1, r8
 8002a2c:	f1c8 0000 	rsbne	r0, r8, #0
 8002a30:	4001      	andne	r1, r0
 8002a32:	4628      	mov	r0, r5
 8002a34:	e9cd 1300 	strd	r1, r3, [sp]
 8002a38:	f000 f94a 	bl	8002cd0 <_sbrk_r>
 8002a3c:	1c42      	adds	r2, r0, #1
 8002a3e:	4604      	mov	r4, r0
 8002a40:	f000 80fb 	beq.w	8002c3a <_malloc_r+0x416>
 8002a44:	9b01      	ldr	r3, [sp, #4]
 8002a46:	9900      	ldr	r1, [sp, #0]
 8002a48:	4283      	cmp	r3, r0
 8002a4a:	4a48      	ldr	r2, [pc, #288]	; (8002b6c <_malloc_r+0x348>)
 8002a4c:	d902      	bls.n	8002a54 <_malloc_r+0x230>
 8002a4e:	45b3      	cmp	fp, r6
 8002a50:	f040 80f3 	bne.w	8002c3a <_malloc_r+0x416>
 8002a54:	f8df a120 	ldr.w	sl, [pc, #288]	; 8002b78 <_malloc_r+0x354>
 8002a58:	42a3      	cmp	r3, r4
 8002a5a:	f8da 0000 	ldr.w	r0, [sl]
 8002a5e:	f108 3cff 	add.w	ip, r8, #4294967295
 8002a62:	eb00 0e01 	add.w	lr, r0, r1
 8002a66:	f8ca e000 	str.w	lr, [sl]
 8002a6a:	f040 80ac 	bne.w	8002bc6 <_malloc_r+0x3a2>
 8002a6e:	ea13 0f0c 	tst.w	r3, ip
 8002a72:	f040 80a8 	bne.w	8002bc6 <_malloc_r+0x3a2>
 8002a76:	68b3      	ldr	r3, [r6, #8]
 8002a78:	4449      	add	r1, r9
 8002a7a:	f041 0101 	orr.w	r1, r1, #1
 8002a7e:	6059      	str	r1, [r3, #4]
 8002a80:	4a3b      	ldr	r2, [pc, #236]	; (8002b70 <_malloc_r+0x34c>)
 8002a82:	f8da 3000 	ldr.w	r3, [sl]
 8002a86:	6811      	ldr	r1, [r2, #0]
 8002a88:	428b      	cmp	r3, r1
 8002a8a:	bf88      	it	hi
 8002a8c:	6013      	strhi	r3, [r2, #0]
 8002a8e:	4a39      	ldr	r2, [pc, #228]	; (8002b74 <_malloc_r+0x350>)
 8002a90:	6811      	ldr	r1, [r2, #0]
 8002a92:	428b      	cmp	r3, r1
 8002a94:	bf88      	it	hi
 8002a96:	6013      	strhi	r3, [r2, #0]
 8002a98:	e0cf      	b.n	8002c3a <_malloc_r+0x416>
 8002a9a:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8002a9e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8002aa2:	d218      	bcs.n	8002ad6 <_malloc_r+0x2b2>
 8002aa4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8002aa8:	3238      	adds	r2, #56	; 0x38
 8002aaa:	f102 0e01 	add.w	lr, r2, #1
 8002aae:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8002ab2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8002ab6:	45f0      	cmp	r8, lr
 8002ab8:	d12b      	bne.n	8002b12 <_malloc_r+0x2ee>
 8002aba:	f04f 0c01 	mov.w	ip, #1
 8002abe:	1092      	asrs	r2, r2, #2
 8002ac0:	fa0c f202 	lsl.w	r2, ip, r2
 8002ac4:	4310      	orrs	r0, r2
 8002ac6:	6070      	str	r0, [r6, #4]
 8002ac8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8002acc:	f8c8 4008 	str.w	r4, [r8, #8]
 8002ad0:	f8ce 400c 	str.w	r4, [lr, #12]
 8002ad4:	e75a      	b.n	800298c <_malloc_r+0x168>
 8002ad6:	2a14      	cmp	r2, #20
 8002ad8:	d801      	bhi.n	8002ade <_malloc_r+0x2ba>
 8002ada:	325b      	adds	r2, #91	; 0x5b
 8002adc:	e7e5      	b.n	8002aaa <_malloc_r+0x286>
 8002ade:	2a54      	cmp	r2, #84	; 0x54
 8002ae0:	d803      	bhi.n	8002aea <_malloc_r+0x2c6>
 8002ae2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8002ae6:	326e      	adds	r2, #110	; 0x6e
 8002ae8:	e7df      	b.n	8002aaa <_malloc_r+0x286>
 8002aea:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8002aee:	d803      	bhi.n	8002af8 <_malloc_r+0x2d4>
 8002af0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8002af4:	3277      	adds	r2, #119	; 0x77
 8002af6:	e7d8      	b.n	8002aaa <_malloc_r+0x286>
 8002af8:	f240 5e54 	movw	lr, #1364	; 0x554
 8002afc:	4572      	cmp	r2, lr
 8002afe:	bf96      	itet	ls
 8002b00:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8002b04:	227e      	movhi	r2, #126	; 0x7e
 8002b06:	327c      	addls	r2, #124	; 0x7c
 8002b08:	e7cf      	b.n	8002aaa <_malloc_r+0x286>
 8002b0a:	f8de e008 	ldr.w	lr, [lr, #8]
 8002b0e:	45f0      	cmp	r8, lr
 8002b10:	d005      	beq.n	8002b1e <_malloc_r+0x2fa>
 8002b12:	f8de 2004 	ldr.w	r2, [lr, #4]
 8002b16:	f022 0203 	bic.w	r2, r2, #3
 8002b1a:	4562      	cmp	r2, ip
 8002b1c:	d8f5      	bhi.n	8002b0a <_malloc_r+0x2e6>
 8002b1e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8002b22:	e7d1      	b.n	8002ac8 <_malloc_r+0x2a4>
 8002b24:	6860      	ldr	r0, [r4, #4]
 8002b26:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8002b2a:	f020 0003 	bic.w	r0, r0, #3
 8002b2e:	eba0 0a07 	sub.w	sl, r0, r7
 8002b32:	f1ba 0f0f 	cmp.w	sl, #15
 8002b36:	dd21      	ble.n	8002b7c <_malloc_r+0x358>
 8002b38:	68a3      	ldr	r3, [r4, #8]
 8002b3a:	19e2      	adds	r2, r4, r7
 8002b3c:	f047 0701 	orr.w	r7, r7, #1
 8002b40:	6067      	str	r7, [r4, #4]
 8002b42:	f8c3 c00c 	str.w	ip, [r3, #12]
 8002b46:	f8cc 3008 	str.w	r3, [ip, #8]
 8002b4a:	f04a 0301 	orr.w	r3, sl, #1
 8002b4e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8002b52:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8002b56:	6053      	str	r3, [r2, #4]
 8002b58:	f844 a000 	str.w	sl, [r4, r0]
 8002b5c:	e693      	b.n	8002886 <_malloc_r+0x62>
 8002b5e:	bf00      	nop
 8002b60:	20000480 	.word	0x20000480
 8002b64:	20000488 	.word	0x20000488
 8002b68:	20000900 	.word	0x20000900
 8002b6c:	20000888 	.word	0x20000888
 8002b70:	200008f8 	.word	0x200008f8
 8002b74:	200008fc 	.word	0x200008fc
 8002b78:	200008d0 	.word	0x200008d0
 8002b7c:	f1ba 0f00 	cmp.w	sl, #0
 8002b80:	db11      	blt.n	8002ba6 <_malloc_r+0x382>
 8002b82:	4420      	add	r0, r4
 8002b84:	6843      	ldr	r3, [r0, #4]
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6043      	str	r3, [r0, #4]
 8002b8c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8002b90:	4628      	mov	r0, r5
 8002b92:	f8c3 c00c 	str.w	ip, [r3, #12]
 8002b96:	f8cc 3008 	str.w	r3, [ip, #8]
 8002b9a:	f000 f893 	bl	8002cc4 <__malloc_unlock>
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	b003      	add	sp, #12
 8002ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ba6:	4664      	mov	r4, ip
 8002ba8:	e706      	b.n	80029b8 <_malloc_r+0x194>
 8002baa:	f858 0908 	ldr.w	r0, [r8], #-8
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	4540      	cmp	r0, r8
 8002bb2:	f43f af0b 	beq.w	80029cc <_malloc_r+0x1a8>
 8002bb6:	e710      	b.n	80029da <_malloc_r+0x1b6>
 8002bb8:	3304      	adds	r3, #4
 8002bba:	0052      	lsls	r2, r2, #1
 8002bbc:	4210      	tst	r0, r2
 8002bbe:	d0fb      	beq.n	8002bb8 <_malloc_r+0x394>
 8002bc0:	e6f4      	b.n	80029ac <_malloc_r+0x188>
 8002bc2:	4673      	mov	r3, lr
 8002bc4:	e7fa      	b.n	8002bbc <_malloc_r+0x398>
 8002bc6:	6810      	ldr	r0, [r2, #0]
 8002bc8:	3001      	adds	r0, #1
 8002bca:	bf1b      	ittet	ne
 8002bcc:	1ae3      	subne	r3, r4, r3
 8002bce:	4473      	addne	r3, lr
 8002bd0:	6014      	streq	r4, [r2, #0]
 8002bd2:	f8ca 3000 	strne.w	r3, [sl]
 8002bd6:	f014 0307 	ands.w	r3, r4, #7
 8002bda:	bf0e      	itee	eq
 8002bdc:	4618      	moveq	r0, r3
 8002bde:	f1c3 0008 	rsbne	r0, r3, #8
 8002be2:	1824      	addne	r4, r4, r0
 8002be4:	1862      	adds	r2, r4, r1
 8002be6:	ea02 010c 	and.w	r1, r2, ip
 8002bea:	4480      	add	r8, r0
 8002bec:	eba8 0801 	sub.w	r8, r8, r1
 8002bf0:	ea08 080c 	and.w	r8, r8, ip
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	9200      	str	r2, [sp, #0]
 8002bfc:	f000 f868 	bl	8002cd0 <_sbrk_r>
 8002c00:	1c43      	adds	r3, r0, #1
 8002c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c06:	d105      	bne.n	8002c14 <_malloc_r+0x3f0>
 8002c08:	b32b      	cbz	r3, 8002c56 <_malloc_r+0x432>
 8002c0a:	f04f 0800 	mov.w	r8, #0
 8002c0e:	f1a3 0008 	sub.w	r0, r3, #8
 8002c12:	4410      	add	r0, r2
 8002c14:	f8da 2000 	ldr.w	r2, [sl]
 8002c18:	1b00      	subs	r0, r0, r4
 8002c1a:	4440      	add	r0, r8
 8002c1c:	4442      	add	r2, r8
 8002c1e:	f040 0001 	orr.w	r0, r0, #1
 8002c22:	45b3      	cmp	fp, r6
 8002c24:	60b4      	str	r4, [r6, #8]
 8002c26:	f8ca 2000 	str.w	r2, [sl]
 8002c2a:	6060      	str	r0, [r4, #4]
 8002c2c:	f43f af28 	beq.w	8002a80 <_malloc_r+0x25c>
 8002c30:	f1b9 0f0f 	cmp.w	r9, #15
 8002c34:	d812      	bhi.n	8002c5c <_malloc_r+0x438>
 8002c36:	2301      	movs	r3, #1
 8002c38:	6063      	str	r3, [r4, #4]
 8002c3a:	68b3      	ldr	r3, [r6, #8]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	42bb      	cmp	r3, r7
 8002c44:	eba3 0207 	sub.w	r2, r3, r7
 8002c48:	d301      	bcc.n	8002c4e <_malloc_r+0x42a>
 8002c4a:	2a0f      	cmp	r2, #15
 8002c4c:	dc21      	bgt.n	8002c92 <_malloc_r+0x46e>
 8002c4e:	4628      	mov	r0, r5
 8002c50:	f000 f838 	bl	8002cc4 <__malloc_unlock>
 8002c54:	e5f2      	b.n	800283c <_malloc_r+0x18>
 8002c56:	4610      	mov	r0, r2
 8002c58:	4698      	mov	r8, r3
 8002c5a:	e7db      	b.n	8002c14 <_malloc_r+0x3f0>
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002c62:	f1a9 090c 	sub.w	r9, r9, #12
 8002c66:	f029 0907 	bic.w	r9, r9, #7
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	ea43 0309 	orr.w	r3, r3, r9
 8002c72:	f8cb 3004 	str.w	r3, [fp, #4]
 8002c76:	f1b9 0f0f 	cmp.w	r9, #15
 8002c7a:	eb0b 0309 	add.w	r3, fp, r9
 8002c7e:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8002c82:	f67f aefd 	bls.w	8002a80 <_malloc_r+0x25c>
 8002c86:	4628      	mov	r0, r5
 8002c88:	f10b 0108 	add.w	r1, fp, #8
 8002c8c:	f000 f8b6 	bl	8002dfc <_free_r>
 8002c90:	e6f6      	b.n	8002a80 <_malloc_r+0x25c>
 8002c92:	68b4      	ldr	r4, [r6, #8]
 8002c94:	f047 0301 	orr.w	r3, r7, #1
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	4427      	add	r7, r4
 8002c9e:	6063      	str	r3, [r4, #4]
 8002ca0:	60b7      	str	r7, [r6, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	e5ef      	b.n	8002886 <_malloc_r+0x62>
 8002ca6:	bf00      	nop

08002ca8 <memset>:
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4402      	add	r2, r0
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d100      	bne.n	8002cb2 <memset+0xa>
 8002cb0:	4770      	bx	lr
 8002cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cb6:	e7f9      	b.n	8002cac <memset+0x4>

08002cb8 <__malloc_lock>:
 8002cb8:	4801      	ldr	r0, [pc, #4]	; (8002cc0 <__malloc_lock+0x8>)
 8002cba:	f000 b95f 	b.w	8002f7c <__retarget_lock_acquire_recursive>
 8002cbe:	bf00      	nop
 8002cc0:	2000096c 	.word	0x2000096c

08002cc4 <__malloc_unlock>:
 8002cc4:	4801      	ldr	r0, [pc, #4]	; (8002ccc <__malloc_unlock+0x8>)
 8002cc6:	f000 b95a 	b.w	8002f7e <__retarget_lock_release_recursive>
 8002cca:	bf00      	nop
 8002ccc:	2000096c 	.word	0x2000096c

08002cd0 <_sbrk_r>:
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	4d05      	ldr	r5, [pc, #20]	; (8002cec <_sbrk_r+0x1c>)
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	4608      	mov	r0, r1
 8002cda:	602b      	str	r3, [r5, #0]
 8002cdc:	f7fe f96c 	bl	8000fb8 <_sbrk>
 8002ce0:	1c43      	adds	r3, r0, #1
 8002ce2:	d102      	bne.n	8002cea <_sbrk_r+0x1a>
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	b103      	cbz	r3, 8002cea <_sbrk_r+0x1a>
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	bd38      	pop	{r3, r4, r5, pc}
 8002cec:	20000974 	.word	0x20000974

08002cf0 <sysconf>:
 8002cf0:	2808      	cmp	r0, #8
 8002cf2:	b508      	push	{r3, lr}
 8002cf4:	d006      	beq.n	8002d04 <sysconf+0x14>
 8002cf6:	f7ff fd5b 	bl	80027b0 <__errno>
 8002cfa:	2316      	movs	r3, #22
 8002cfc:	6003      	str	r3, [r0, #0]
 8002cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002d02:	bd08      	pop	{r3, pc}
 8002d04:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d08:	e7fb      	b.n	8002d02 <sysconf+0x12>
	...

08002d0c <register_fini>:
 8002d0c:	4b02      	ldr	r3, [pc, #8]	; (8002d18 <register_fini+0xc>)
 8002d0e:	b113      	cbz	r3, 8002d16 <register_fini+0xa>
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <register_fini+0x10>)
 8002d12:	f000 b805 	b.w	8002d20 <atexit>
 8002d16:	4770      	bx	lr
 8002d18:	00000000 	.word	0x00000000
 8002d1c:	08002d2d 	.word	0x08002d2d

08002d20 <atexit>:
 8002d20:	2300      	movs	r3, #0
 8002d22:	4601      	mov	r1, r0
 8002d24:	461a      	mov	r2, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 b92a 	b.w	8002f80 <__register_exitproc>

08002d2c <__libc_fini_array>:
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	4d07      	ldr	r5, [pc, #28]	; (8002d4c <__libc_fini_array+0x20>)
 8002d30:	4c07      	ldr	r4, [pc, #28]	; (8002d50 <__libc_fini_array+0x24>)
 8002d32:	1b64      	subs	r4, r4, r5
 8002d34:	10a4      	asrs	r4, r4, #2
 8002d36:	b91c      	cbnz	r4, 8002d40 <__libc_fini_array+0x14>
 8002d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d3c:	f000 b966 	b.w	800300c <_fini>
 8002d40:	3c01      	subs	r4, #1
 8002d42:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002d46:	4798      	blx	r3
 8002d48:	e7f5      	b.n	8002d36 <__libc_fini_array+0xa>
 8002d4a:	bf00      	nop
 8002d4c:	08003048 	.word	0x08003048
 8002d50:	0800304c 	.word	0x0800304c

08002d54 <_malloc_trim_r>:
 8002d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d58:	4606      	mov	r6, r0
 8002d5a:	2008      	movs	r0, #8
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	f7ff ffc7 	bl	8002cf0 <sysconf>
 8002d62:	4680      	mov	r8, r0
 8002d64:	4f22      	ldr	r7, [pc, #136]	; (8002df0 <_malloc_trim_r+0x9c>)
 8002d66:	4630      	mov	r0, r6
 8002d68:	f7ff ffa6 	bl	8002cb8 <__malloc_lock>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	685d      	ldr	r5, [r3, #4]
 8002d70:	f025 0503 	bic.w	r5, r5, #3
 8002d74:	1b2c      	subs	r4, r5, r4
 8002d76:	3c11      	subs	r4, #17
 8002d78:	4444      	add	r4, r8
 8002d7a:	fbb4 f4f8 	udiv	r4, r4, r8
 8002d7e:	3c01      	subs	r4, #1
 8002d80:	fb08 f404 	mul.w	r4, r8, r4
 8002d84:	45a0      	cmp	r8, r4
 8002d86:	dd05      	ble.n	8002d94 <_malloc_trim_r+0x40>
 8002d88:	4630      	mov	r0, r6
 8002d8a:	f7ff ff9b 	bl	8002cc4 <__malloc_unlock>
 8002d8e:	2000      	movs	r0, #0
 8002d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d94:	2100      	movs	r1, #0
 8002d96:	4630      	mov	r0, r6
 8002d98:	f7ff ff9a 	bl	8002cd0 <_sbrk_r>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	442b      	add	r3, r5
 8002da0:	4298      	cmp	r0, r3
 8002da2:	d1f1      	bne.n	8002d88 <_malloc_trim_r+0x34>
 8002da4:	4630      	mov	r0, r6
 8002da6:	4261      	negs	r1, r4
 8002da8:	f7ff ff92 	bl	8002cd0 <_sbrk_r>
 8002dac:	3001      	adds	r0, #1
 8002dae:	d110      	bne.n	8002dd2 <_malloc_trim_r+0x7e>
 8002db0:	2100      	movs	r1, #0
 8002db2:	4630      	mov	r0, r6
 8002db4:	f7ff ff8c 	bl	8002cd0 <_sbrk_r>
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	1a83      	subs	r3, r0, r2
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	dde3      	ble.n	8002d88 <_malloc_trim_r+0x34>
 8002dc0:	490c      	ldr	r1, [pc, #48]	; (8002df4 <_malloc_trim_r+0xa0>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6809      	ldr	r1, [r1, #0]
 8002dc8:	6053      	str	r3, [r2, #4]
 8002dca:	1a40      	subs	r0, r0, r1
 8002dcc:	490a      	ldr	r1, [pc, #40]	; (8002df8 <_malloc_trim_r+0xa4>)
 8002dce:	6008      	str	r0, [r1, #0]
 8002dd0:	e7da      	b.n	8002d88 <_malloc_trim_r+0x34>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <_malloc_trim_r+0xa4>)
 8002dd6:	1b2d      	subs	r5, r5, r4
 8002dd8:	f045 0501 	orr.w	r5, r5, #1
 8002ddc:	605d      	str	r5, [r3, #4]
 8002dde:	6813      	ldr	r3, [r2, #0]
 8002de0:	4630      	mov	r0, r6
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	6014      	str	r4, [r2, #0]
 8002de6:	f7ff ff6d 	bl	8002cc4 <__malloc_unlock>
 8002dea:	2001      	movs	r0, #1
 8002dec:	e7d0      	b.n	8002d90 <_malloc_trim_r+0x3c>
 8002dee:	bf00      	nop
 8002df0:	20000480 	.word	0x20000480
 8002df4:	20000888 	.word	0x20000888
 8002df8:	200008d0 	.word	0x200008d0

08002dfc <_free_r>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	4605      	mov	r5, r0
 8002e00:	460f      	mov	r7, r1
 8002e02:	2900      	cmp	r1, #0
 8002e04:	f000 80b1 	beq.w	8002f6a <_free_r+0x16e>
 8002e08:	f7ff ff56 	bl	8002cb8 <__malloc_lock>
 8002e0c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8002e10:	4856      	ldr	r0, [pc, #344]	; (8002f6c <_free_r+0x170>)
 8002e12:	f022 0401 	bic.w	r4, r2, #1
 8002e16:	f1a7 0308 	sub.w	r3, r7, #8
 8002e1a:	eb03 0c04 	add.w	ip, r3, r4
 8002e1e:	6881      	ldr	r1, [r0, #8]
 8002e20:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8002e24:	4561      	cmp	r1, ip
 8002e26:	f026 0603 	bic.w	r6, r6, #3
 8002e2a:	f002 0201 	and.w	r2, r2, #1
 8002e2e:	d11b      	bne.n	8002e68 <_free_r+0x6c>
 8002e30:	4434      	add	r4, r6
 8002e32:	b93a      	cbnz	r2, 8002e44 <_free_r+0x48>
 8002e34:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	4414      	add	r4, r2
 8002e3c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8002e40:	60ca      	str	r2, [r1, #12]
 8002e42:	6091      	str	r1, [r2, #8]
 8002e44:	f044 0201 	orr.w	r2, r4, #1
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	6083      	str	r3, [r0, #8]
 8002e4c:	4b48      	ldr	r3, [pc, #288]	; (8002f70 <_free_r+0x174>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	42a3      	cmp	r3, r4
 8002e52:	d804      	bhi.n	8002e5e <_free_r+0x62>
 8002e54:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <_free_r+0x178>)
 8002e56:	4628      	mov	r0, r5
 8002e58:	6819      	ldr	r1, [r3, #0]
 8002e5a:	f7ff ff7b 	bl	8002d54 <_malloc_trim_r>
 8002e5e:	4628      	mov	r0, r5
 8002e60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e64:	f7ff bf2e 	b.w	8002cc4 <__malloc_unlock>
 8002e68:	f8cc 6004 	str.w	r6, [ip, #4]
 8002e6c:	2a00      	cmp	r2, #0
 8002e6e:	d138      	bne.n	8002ee2 <_free_r+0xe6>
 8002e70:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8002e74:	f100 0708 	add.w	r7, r0, #8
 8002e78:	1a5b      	subs	r3, r3, r1
 8002e7a:	440c      	add	r4, r1
 8002e7c:	6899      	ldr	r1, [r3, #8]
 8002e7e:	42b9      	cmp	r1, r7
 8002e80:	d031      	beq.n	8002ee6 <_free_r+0xea>
 8002e82:	68df      	ldr	r7, [r3, #12]
 8002e84:	60cf      	str	r7, [r1, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	eb0c 0106 	add.w	r1, ip, r6
 8002e8c:	6849      	ldr	r1, [r1, #4]
 8002e8e:	07c9      	lsls	r1, r1, #31
 8002e90:	d40b      	bmi.n	8002eaa <_free_r+0xae>
 8002e92:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8002e96:	4434      	add	r4, r6
 8002e98:	bb3a      	cbnz	r2, 8002eea <_free_r+0xee>
 8002e9a:	4e37      	ldr	r6, [pc, #220]	; (8002f78 <_free_r+0x17c>)
 8002e9c:	42b1      	cmp	r1, r6
 8002e9e:	d124      	bne.n	8002eea <_free_r+0xee>
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ea6:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8002eaa:	f044 0101 	orr.w	r1, r4, #1
 8002eae:	6059      	str	r1, [r3, #4]
 8002eb0:	511c      	str	r4, [r3, r4]
 8002eb2:	2a00      	cmp	r2, #0
 8002eb4:	d1d3      	bne.n	8002e5e <_free_r+0x62>
 8002eb6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8002eba:	d21b      	bcs.n	8002ef4 <_free_r+0xf8>
 8002ebc:	0961      	lsrs	r1, r4, #5
 8002ebe:	08e2      	lsrs	r2, r4, #3
 8002ec0:	2401      	movs	r4, #1
 8002ec2:	408c      	lsls	r4, r1
 8002ec4:	6841      	ldr	r1, [r0, #4]
 8002ec6:	3201      	adds	r2, #1
 8002ec8:	430c      	orrs	r4, r1
 8002eca:	6044      	str	r4, [r0, #4]
 8002ecc:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8002ed0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8002ed4:	3908      	subs	r1, #8
 8002ed6:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8002eda:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8002ede:	60e3      	str	r3, [r4, #12]
 8002ee0:	e7bd      	b.n	8002e5e <_free_r+0x62>
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	e7d0      	b.n	8002e88 <_free_r+0x8c>
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	e7ce      	b.n	8002e88 <_free_r+0x8c>
 8002eea:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8002eee:	60ce      	str	r6, [r1, #12]
 8002ef0:	60b1      	str	r1, [r6, #8]
 8002ef2:	e7da      	b.n	8002eaa <_free_r+0xae>
 8002ef4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8002ef8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8002efc:	d214      	bcs.n	8002f28 <_free_r+0x12c>
 8002efe:	09a2      	lsrs	r2, r4, #6
 8002f00:	3238      	adds	r2, #56	; 0x38
 8002f02:	1c51      	adds	r1, r2, #1
 8002f04:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8002f08:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8002f0c:	428e      	cmp	r6, r1
 8002f0e:	d125      	bne.n	8002f5c <_free_r+0x160>
 8002f10:	2401      	movs	r4, #1
 8002f12:	1092      	asrs	r2, r2, #2
 8002f14:	fa04 f202 	lsl.w	r2, r4, r2
 8002f18:	6844      	ldr	r4, [r0, #4]
 8002f1a:	4322      	orrs	r2, r4
 8002f1c:	6042      	str	r2, [r0, #4]
 8002f1e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8002f22:	60b3      	str	r3, [r6, #8]
 8002f24:	60cb      	str	r3, [r1, #12]
 8002f26:	e79a      	b.n	8002e5e <_free_r+0x62>
 8002f28:	2a14      	cmp	r2, #20
 8002f2a:	d801      	bhi.n	8002f30 <_free_r+0x134>
 8002f2c:	325b      	adds	r2, #91	; 0x5b
 8002f2e:	e7e8      	b.n	8002f02 <_free_r+0x106>
 8002f30:	2a54      	cmp	r2, #84	; 0x54
 8002f32:	d802      	bhi.n	8002f3a <_free_r+0x13e>
 8002f34:	0b22      	lsrs	r2, r4, #12
 8002f36:	326e      	adds	r2, #110	; 0x6e
 8002f38:	e7e3      	b.n	8002f02 <_free_r+0x106>
 8002f3a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8002f3e:	d802      	bhi.n	8002f46 <_free_r+0x14a>
 8002f40:	0be2      	lsrs	r2, r4, #15
 8002f42:	3277      	adds	r2, #119	; 0x77
 8002f44:	e7dd      	b.n	8002f02 <_free_r+0x106>
 8002f46:	f240 5154 	movw	r1, #1364	; 0x554
 8002f4a:	428a      	cmp	r2, r1
 8002f4c:	bf96      	itet	ls
 8002f4e:	0ca2      	lsrls	r2, r4, #18
 8002f50:	227e      	movhi	r2, #126	; 0x7e
 8002f52:	327c      	addls	r2, #124	; 0x7c
 8002f54:	e7d5      	b.n	8002f02 <_free_r+0x106>
 8002f56:	6889      	ldr	r1, [r1, #8]
 8002f58:	428e      	cmp	r6, r1
 8002f5a:	d004      	beq.n	8002f66 <_free_r+0x16a>
 8002f5c:	684a      	ldr	r2, [r1, #4]
 8002f5e:	f022 0203 	bic.w	r2, r2, #3
 8002f62:	42a2      	cmp	r2, r4
 8002f64:	d8f7      	bhi.n	8002f56 <_free_r+0x15a>
 8002f66:	68ce      	ldr	r6, [r1, #12]
 8002f68:	e7d9      	b.n	8002f1e <_free_r+0x122>
 8002f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f6c:	20000480 	.word	0x20000480
 8002f70:	2000088c 	.word	0x2000088c
 8002f74:	20000900 	.word	0x20000900
 8002f78:	20000488 	.word	0x20000488

08002f7c <__retarget_lock_acquire_recursive>:
 8002f7c:	4770      	bx	lr

08002f7e <__retarget_lock_release_recursive>:
 8002f7e:	4770      	bx	lr

08002f80 <__register_exitproc>:
 8002f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f84:	4d1c      	ldr	r5, [pc, #112]	; (8002ff8 <__register_exitproc+0x78>)
 8002f86:	4606      	mov	r6, r0
 8002f88:	6828      	ldr	r0, [r5, #0]
 8002f8a:	4698      	mov	r8, r3
 8002f8c:	460f      	mov	r7, r1
 8002f8e:	4691      	mov	r9, r2
 8002f90:	f7ff fff4 	bl	8002f7c <__retarget_lock_acquire_recursive>
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <__register_exitproc+0x7c>)
 8002f96:	4628      	mov	r0, r5
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8002f9e:	b91c      	cbnz	r4, 8002fa8 <__register_exitproc+0x28>
 8002fa0:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8002fa4:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8002fa8:	6865      	ldr	r5, [r4, #4]
 8002faa:	6800      	ldr	r0, [r0, #0]
 8002fac:	2d1f      	cmp	r5, #31
 8002fae:	dd05      	ble.n	8002fbc <__register_exitproc+0x3c>
 8002fb0:	f7ff ffe5 	bl	8002f7e <__retarget_lock_release_recursive>
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fbc:	b19e      	cbz	r6, 8002fe6 <__register_exitproc+0x66>
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8002fc4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8002fc8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8002fcc:	40aa      	lsls	r2, r5
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	2e02      	cmp	r6, #2
 8002fd2:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8002fd6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8002fda:	bf02      	ittt	eq
 8002fdc:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8002fe0:	431a      	orreq	r2, r3
 8002fe2:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8002fe6:	1c6b      	adds	r3, r5, #1
 8002fe8:	3502      	adds	r5, #2
 8002fea:	6063      	str	r3, [r4, #4]
 8002fec:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8002ff0:	f7ff ffc5 	bl	8002f7e <__retarget_lock_release_recursive>
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	e7df      	b.n	8002fb8 <__register_exitproc+0x38>
 8002ff8:	20000890 	.word	0x20000890
 8002ffc:	0800303c 	.word	0x0800303c

08003000 <_init>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	bf00      	nop
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr

0800300c <_fini>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr
