
LAB5_UART_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080070b0  080070b0  000170b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c4  080074c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080074c4  080074c4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074c4  080074c4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074c8  080074c8  000174c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080074cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001dc  080076a8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080076a8  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5ba  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256c  00000000  00000000  0002f7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00031d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00032b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193e7  00000000  00000000  000338b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0d6  00000000  00000000  0004cc9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea82  00000000  00000000  0005bd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea7f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cbc  00000000  00000000  000ea84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007094 	.word	0x08007094

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007094 	.word	0x08007094

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <isCmdEqualToRST>:

uint8_t cmd_flag = INIT;
uint8_t cmd_data[MAX_CMD_SIZE];
uint8_t cmd_data_index = 0;

int isCmdEqualToRST(uint8_t str[]) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if (str[0] == 'R' && str[1] == 'S' && str[2] == 'T')
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b52      	cmp	r3, #82	; 0x52
 8000f52:	d10b      	bne.n	8000f6c <isCmdEqualToRST+0x28>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3301      	adds	r3, #1
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b53      	cmp	r3, #83	; 0x53
 8000f5c:	d106      	bne.n	8000f6c <isCmdEqualToRST+0x28>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3302      	adds	r3, #2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b54      	cmp	r3, #84	; 0x54
 8000f66:	d101      	bne.n	8000f6c <isCmdEqualToRST+0x28>
		return 1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <isCmdEqualToRST+0x2a>
	else
		return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <isCmdEqualToOK>:

int isCmdEqualToOK(uint8_t str[]) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	if (str[0] == 'O' && str[1] == 'K')
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b4f      	cmp	r3, #79	; 0x4f
 8000f86:	d106      	bne.n	8000f96 <isCmdEqualToOK+0x1e>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b4b      	cmp	r3, #75	; 0x4b
 8000f90:	d101      	bne.n	8000f96 <isCmdEqualToOK+0x1e>
		return 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <isCmdEqualToOK+0x20>
	else
		return 0;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
	...

08000fa4 <cmd_parser_fsm>:

void cmd_parser_fsm() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	switch (status1) {
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <cmd_parser_fsm+0xac>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d02e      	beq.n	800100e <cmd_parser_fsm+0x6a>
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	dc46      	bgt.n	8001042 <cmd_parser_fsm+0x9e>
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <cmd_parser_fsm+0x1a>
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d008      	beq.n	8000fce <cmd_parser_fsm+0x2a>
			cmd_flag = OK;
		}
		status1 = INIT;
		break;
	default:
		break;
 8000fbc:	e041      	b.n	8001042 <cmd_parser_fsm+0x9e>
		if (buffer_byte == '!')
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <cmd_parser_fsm+0xb0>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b21      	cmp	r3, #33	; 0x21
 8000fc4:	d13f      	bne.n	8001046 <cmd_parser_fsm+0xa2>
			status1 = READING;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <cmd_parser_fsm+0xac>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
		break;
 8000fcc:	e03b      	b.n	8001046 <cmd_parser_fsm+0xa2>
		if (buffer_byte != '!' && buffer_byte != '#') {
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <cmd_parser_fsm+0xb0>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b21      	cmp	r3, #33	; 0x21
 8000fd4:	d010      	beq.n	8000ff8 <cmd_parser_fsm+0x54>
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <cmd_parser_fsm+0xb0>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b23      	cmp	r3, #35	; 0x23
 8000fdc:	d00c      	beq.n	8000ff8 <cmd_parser_fsm+0x54>
			cmd_data[cmd_data_index] = buffer_byte;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <cmd_parser_fsm+0xb4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <cmd_parser_fsm+0xb0>)
 8000fe6:	7819      	ldrb	r1, [r3, #0]
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <cmd_parser_fsm+0xb8>)
 8000fea:	5499      	strb	r1, [r3, r2]
			cmd_data_index++;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <cmd_parser_fsm+0xb4>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <cmd_parser_fsm+0xb4>)
 8000ff6:	701a      	strb	r2, [r3, #0]
		if (buffer_byte == '#') {
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <cmd_parser_fsm+0xb0>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b23      	cmp	r3, #35	; 0x23
 8000ffe:	d124      	bne.n	800104a <cmd_parser_fsm+0xa6>
			status1 = STOP;
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <cmd_parser_fsm+0xac>)
 8001002:	2202      	movs	r2, #2
 8001004:	601a      	str	r2, [r3, #0]
			cmd_data_index = 0;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <cmd_parser_fsm+0xb4>)
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
		break;
 800100c:	e01d      	b.n	800104a <cmd_parser_fsm+0xa6>
		if (isCmdEqualToRST(cmd_data) == 1) {
 800100e:	4813      	ldr	r0, [pc, #76]	; (800105c <cmd_parser_fsm+0xb8>)
 8001010:	f7ff ff98 	bl	8000f44 <isCmdEqualToRST>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d106      	bne.n	8001028 <cmd_parser_fsm+0x84>
			cmd_flag = RST;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <cmd_parser_fsm+0xbc>)
 800101c:	2208      	movs	r2, #8
 800101e:	701a      	strb	r2, [r3, #0]
			setTimer1(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f000 fa3d 	bl	80014a0 <setTimer1>
 8001026:	e008      	b.n	800103a <cmd_parser_fsm+0x96>
		} else if (isCmdEqualToOK(cmd_data) == 1) {
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <cmd_parser_fsm+0xb8>)
 800102a:	f7ff ffa5 	bl	8000f78 <isCmdEqualToOK>
 800102e:	4603      	mov	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	d102      	bne.n	800103a <cmd_parser_fsm+0x96>
			cmd_flag = OK;
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <cmd_parser_fsm+0xbc>)
 8001036:	2209      	movs	r2, #9
 8001038:	701a      	strb	r2, [r3, #0]
		status1 = INIT;
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <cmd_parser_fsm+0xac>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
		break;
 8001040:	e004      	b.n	800104c <cmd_parser_fsm+0xa8>
		break;
 8001042:	bf00      	nop
 8001044:	e002      	b.n	800104c <cmd_parser_fsm+0xa8>
		break;
 8001046:	bf00      	nop
 8001048:	e000      	b.n	800104c <cmd_parser_fsm+0xa8>
		break;
 800104a:	bf00      	nop
	}
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001f8 	.word	0x200001f8
 8001054:	20000220 	.word	0x20000220
 8001058:	20000203 	.word	0x20000203
 800105c:	20000224 	.word	0x20000224
 8001060:	20000202 	.word	0x20000202

08001064 <uart_comms_fsm>:

void uart_comms_fsm() {
 8001064:	b580      	push	{r7, lr}
 8001066:	b090      	sub	sp, #64	; 0x40
 8001068:	af00      	add	r7, sp, #0
	char str[50];
	switch (cmd_flag) {
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <uart_comms_fsm+0x94>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b08      	cmp	r3, #8
 8001070:	d002      	beq.n	8001078 <uart_comms_fsm+0x14>
 8001072:	2b09      	cmp	r3, #9
 8001074:	d032      	beq.n	80010dc <uart_comms_fsm+0x78>
	case OK:
		ADC_value = -1;
		cmd_flag = INIT;
		break;
	default:
		break;
 8001076:	e03a      	b.n	80010ee <uart_comms_fsm+0x8a>
		if (timer1_flag == 1) {
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <uart_comms_fsm+0x98>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d135      	bne.n	80010ec <uart_comms_fsm+0x88>
			 ADC_value = HAL_ADC_GetValue(&hadc1);  // Đọc giá trị ADC
 8001080:	481f      	ldr	r0, [pc, #124]	; (8001100 <uart_comms_fsm+0x9c>)
 8001082:	f000 fe47 	bl	8001d14 <HAL_ADC_GetValue>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <uart_comms_fsm+0xa0>)
 800108c:	601a      	str	r2, [r3, #0]
			 float adc_float_value = (float)ADC_value * 5 / 4095;  // Chuyển đổi giá trị ADC sang điện áp
 800108e:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <uart_comms_fsm+0xa0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fdb2 	bl	8000bfc <__aeabi_i2f>
 8001098:	4603      	mov	r3, r0
 800109a:	491b      	ldr	r1, [pc, #108]	; (8001108 <uart_comms_fsm+0xa4>)
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fe01 	bl	8000ca4 <__aeabi_fmul>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4919      	ldr	r1, [pc, #100]	; (800110c <uart_comms_fsm+0xa8>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff feb0 	bl	8000e0c <__aeabi_fdiv>
 80010ac:	4603      	mov	r3, r0
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
			 int len = sprintf(str, "!ADC=%.2f\r\n", adc_float_value);  // In giá trị float với 2 chữ số thập phân
 80010b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80010b2:	f7ff f9b9 	bl	8000428 <__aeabi_f2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	1d38      	adds	r0, r7, #4
 80010bc:	4914      	ldr	r1, [pc, #80]	; (8001110 <uart_comms_fsm+0xac>)
 80010be:	f003 fdb1 	bl	8004c24 <siprintf>
 80010c2:	63b8      	str	r0, [r7, #56]	; 0x38
			 HAL_UART_Transmit(&huart2, (uint8_t*)str, len, 500);  // Truyền chuỗi qua UART
 80010c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	1d39      	adds	r1, r7, #4
 80010ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <uart_comms_fsm+0xb0>)
 80010d0:	f002 fc2b 	bl	800392a <HAL_UART_Transmit>
			 setTimer1(100);
 80010d4:	2064      	movs	r0, #100	; 0x64
 80010d6:	f000 f9e3 	bl	80014a0 <setTimer1>
		break;
 80010da:	e007      	b.n	80010ec <uart_comms_fsm+0x88>
		ADC_value = -1;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <uart_comms_fsm+0xa0>)
 80010de:	f04f 32ff 	mov.w	r2, #4294967295
 80010e2:	601a      	str	r2, [r3, #0]
		cmd_flag = INIT;
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <uart_comms_fsm+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
		break;
 80010ea:	e000      	b.n	80010ee <uart_comms_fsm+0x8a>
		break;
 80010ec:	bf00      	nop
	}
}
 80010ee:	bf00      	nop
 80010f0:	3740      	adds	r7, #64	; 0x40
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000202 	.word	0x20000202
 80010fc:	20000208 	.word	0x20000208
 8001100:	20000248 	.word	0x20000248
 8001104:	200001fc 	.word	0x200001fc
 8001108:	40a00000 	.word	0x40a00000
 800110c:	457ff000 	.word	0x457ff000
 8001110:	080070b0 	.word	0x080070b0
 8001114:	200002c0 	.word	0x200002c0

08001118 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <HAL_UART_RxCpltCallback+0x60>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d122      	bne.n	8001170 <HAL_UART_RxCpltCallback+0x58>
		HAL_UART_Transmit(&huart2, &buffer_byte, 1, 500);
 800112a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800112e:	2201      	movs	r2, #1
 8001130:	4912      	ldr	r1, [pc, #72]	; (800117c <HAL_UART_RxCpltCallback+0x64>)
 8001132:	4813      	ldr	r0, [pc, #76]	; (8001180 <HAL_UART_RxCpltCallback+0x68>)
 8001134:	f002 fbf9 	bl	800392a <HAL_UART_Transmit>
		buffer[index_buffer] = buffer_byte;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_UART_RxCpltCallback+0x6c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_UART_RxCpltCallback+0x64>)
 8001140:	7819      	ldrb	r1, [r3, #0]
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_UART_RxCpltCallback+0x70>)
 8001144:	5499      	strb	r1, [r3, r2]
		index_buffer++;
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_UART_RxCpltCallback+0x6c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_UART_RxCpltCallback+0x6c>)
 8001150:	701a      	strb	r2, [r3, #0]
		if (index_buffer == MAX_BUFFER_SIZE)
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_UART_RxCpltCallback+0x6c>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b1e      	cmp	r3, #30
 8001158:	d102      	bne.n	8001160 <HAL_UART_RxCpltCallback+0x48>
			index_buffer = 0;
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_UART_RxCpltCallback+0x6c>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_UART_RxCpltCallback+0x74>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 8001166:	2201      	movs	r2, #1
 8001168:	4904      	ldr	r1, [pc, #16]	; (800117c <HAL_UART_RxCpltCallback+0x64>)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <HAL_UART_RxCpltCallback+0x68>)
 800116c:	f002 fc6f 	bl	8003a4e <HAL_UART_Receive_IT>
		// dòng quan trọng nhất ngắt sau khi ngắt 1 byte (enable) nhận xong enable l
	}
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40004400 	.word	0x40004400
 800117c:	20000220 	.word	0x20000220
 8001180:	200002c0 	.word	0x200002c0
 8001184:	20000200 	.word	0x20000200
 8001188:	20000228 	.word	0x20000228
 800118c:	20000201 	.word	0x20000201

08001190 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001194:	f000 fbd6 	bl	8001944 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001198:	f000 f83c 	bl	8001214 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800119c:	f000 f93e 	bl	800141c <MX_GPIO_Init>
	MX_ADC1_Init();
 80011a0:	f000 f888 	bl	80012b4 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 80011a4:	f000 f910 	bl	80013c8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80011a8:	f000 f8c2 	bl	8001330 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80011ac:	4812      	ldr	r0, [pc, #72]	; (80011f8 <main+0x68>)
 80011ae:	f001 ffdb 	bl	8003168 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	4911      	ldr	r1, [pc, #68]	; (80011fc <main+0x6c>)
 80011b6:	4812      	ldr	r0, [pc, #72]	; (8001200 <main+0x70>)
 80011b8:	f002 fc49 	bl	8003a4e <HAL_UART_Receive_IT>
	HAL_ADC_Start(&hadc1);
 80011bc:	4811      	ldr	r0, [pc, #68]	; (8001204 <main+0x74>)
 80011be:	f000 fcfb 	bl	8001bb8 <HAL_ADC_Start>
	setTimer2(50);
 80011c2:	2032      	movs	r0, #50	; 0x32
 80011c4:	f000 f980 	bl	80014c8 <setTimer2>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (timer2_flag == 1) {
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <main+0x78>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d106      	bne.n	80011de <main+0x4e>
			HAL_GPIO_TogglePin(RED_GPIO_Port, RED_Pin);
 80011d0:	2120      	movs	r1, #32
 80011d2:	480e      	ldr	r0, [pc, #56]	; (800120c <main+0x7c>)
 80011d4:	f001 fa8e 	bl	80026f4 <HAL_GPIO_TogglePin>
			setTimer2(50);
 80011d8:	2032      	movs	r0, #50	; 0x32
 80011da:	f000 f975 	bl	80014c8 <setTimer2>
		}
		if (buffer_flag == 1) {
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <main+0x80>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d104      	bne.n	80011f0 <main+0x60>
			cmd_parser_fsm();
 80011e6:	f7ff fedd 	bl	8000fa4 <cmd_parser_fsm>
			buffer_flag = 0;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <main+0x80>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
		}
		uart_comms_fsm();
 80011f0:	f7ff ff38 	bl	8001064 <uart_comms_fsm>
		if (timer2_flag == 1) {
 80011f4:	e7e8      	b.n	80011c8 <main+0x38>
 80011f6:	bf00      	nop
 80011f8:	20000278 	.word	0x20000278
 80011fc:	20000220 	.word	0x20000220
 8001200:	200002c0 	.word	0x200002c0
 8001204:	20000248 	.word	0x20000248
 8001208:	20000210 	.word	0x20000210
 800120c:	40010800 	.word	0x40010800
 8001210:	20000201 	.word	0x20000201

08001214 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b094      	sub	sp, #80	; 0x50
 8001218:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	2228      	movs	r2, #40	; 0x28
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f003 f896 	bl	8004354 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001244:	2302      	movs	r3, #2
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001248:	2301      	movs	r3, #1
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800124c:	2310      	movs	r3, #16
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001250:	2300      	movs	r3, #0
 8001252:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001258:	4618      	mov	r0, r3
 800125a:	f001 fa65 	bl	8002728 <HAL_RCC_OscConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0x54>
		Error_Handler();
 8001264:	f000 f916 	bl	8001494 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001268:	230f      	movs	r3, #15
 800126a:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fcd0 	bl	8002c28 <HAL_RCC_ClockConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0x7e>
		Error_Handler();
 800128e:	f000 f901 	bl	8001494 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001292:	2302      	movs	r3, #2
 8001294:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4618      	mov	r0, r3
 800129e:	f001 fe5d 	bl	8002f5c <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x98>
		Error_Handler();
 80012a8:	f000 f8f4 	bl	8001494 <Error_Handler>
	}
}
 80012ac:	bf00      	nop
 80012ae:	3750      	adds	r7, #80	; 0x50
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_ADC1_Init+0x74>)
 80012c6:	4a19      	ldr	r2, [pc, #100]	; (800132c <MX_ADC1_Init+0x78>)
 80012c8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_ADC1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_ADC1_Init+0x74>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_ADC1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_ADC1_Init+0x74>)
 80012de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012e2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_ADC1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_ADC1_Init+0x74>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_ADC1_Init+0x74>)
 80012f2:	f000 fb89 	bl	8001a08 <HAL_ADC_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80012fc:	f000 f8ca 	bl	8001494 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001304:	2301      	movs	r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_ADC1_Init+0x74>)
 8001312:	f000 fd0b 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0x6c>
		Error_Handler();
 800131c:	f000 f8ba 	bl	8001494 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000248 	.word	0x20000248
 800132c:	40012400 	.word	0x40012400

08001330 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_TIM2_Init+0x94>)
 800134e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001352:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001356:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800135a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <MX_TIM2_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001364:	2209      	movs	r2, #9
 8001366:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_TIM2_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001374:	4813      	ldr	r0, [pc, #76]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001376:	f001 fea7 	bl	80030c8 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001380:	f000 f888 	bl	8001494 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001392:	f002 f83d 	bl	8003410 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM2_Init+0x70>
		Error_Handler();
 800139c:	f000 f87a 	bl	8001494 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_TIM2_Init+0x94>)
 80013ae:	f002 fa05 	bl	80037bc <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80013b8:	f000 f86c 	bl	8001494 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000278 	.word	0x20000278

080013c8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <MX_USART2_UART_Init+0x50>)
 80013d0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013d8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_USART2_UART_Init+0x4c>)
 8001400:	f002 fa46 	bl	8003890 <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800140a:	f000 f843 	bl	8001494 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200002c0 	.word	0x200002c0
 8001418:	40004400 	.word	0x40004400

0800141c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_GPIO_Init+0x5c>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a10      	ldr	r2, [pc, #64]	; (8001478 <MX_GPIO_Init+0x5c>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_GPIO_Init+0x5c>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2120      	movs	r1, #32
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <MX_GPIO_Init+0x60>)
 800144e:	f001 f939 	bl	80026c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : RED_Pin */
	GPIO_InitStruct.Pin = RED_Pin;
 8001452:	2320      	movs	r3, #32
 8001454:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2302      	movs	r3, #2
 8001460:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4619      	mov	r1, r3
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_GPIO_Init+0x60>)
 800146a:	f000 ffb1 	bl	80023d0 <HAL_GPIO_Init>

}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	40010800 	.word	0x40010800

08001480 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	timerRun();
 8001488:	f000 f832 	bl	80014f0 <timerRun>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800149c:	e7fe      	b.n	800149c <Error_Handler+0x8>
	...

080014a0 <setTimer1>:
int timer1_flag = 0;

int timer2_counter = 0;
int timer2_flag = 0;

void setTimer1(int duration) {
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <setTimer1+0x20>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <setTimer1+0x24>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000204 	.word	0x20000204
 80014c4:	20000208 	.word	0x20000208

080014c8 <setTimer2>:

void setTimer2(int duration) {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <setTimer2+0x20>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <setTimer2+0x24>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000020c 	.word	0x2000020c
 80014ec:	20000210 	.word	0x20000210

080014f0 <timerRun>:

void timerRun() {
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <timerRun+0x4c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	dd0b      	ble.n	8001514 <timerRun+0x24>
		timer1_counter--;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <timerRun+0x4c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3b01      	subs	r3, #1
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <timerRun+0x4c>)
 8001504:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) {
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <timerRun+0x4c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <timerRun+0x24>
			timer1_flag = 1;
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <timerRun+0x50>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <timerRun+0x54>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	dd0b      	ble.n	8001534 <timerRun+0x44>
		timer2_counter--;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <timerRun+0x54>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <timerRun+0x54>)
 8001524:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) {
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <timerRun+0x54>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <timerRun+0x44>
			timer2_flag = 1;
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <timerRun+0x58>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20000204 	.word	0x20000204
 8001540:	20000208 	.word	0x20000208
 8001544:	2000020c 	.word	0x2000020c
 8001548:	20000210 	.word	0x20000210

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_MspInit+0x40>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a0d      	ldr	r2, [pc, #52]	; (800158c <HAL_MspInit+0x40>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_MspInit+0x40>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_MspInit+0x40>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_MspInit+0x40>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_MspInit+0x40>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000

08001590 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_ADC_MspInit+0x6c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d121      	bne.n	80015f4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_ADC_MspInit+0x70>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_ADC_MspInit+0x70>)
 80015b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_ADC_MspInit+0x70>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_ADC_MspInit+0x70>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <HAL_ADC_MspInit+0x70>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_ADC_MspInit+0x70>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015e0:	2301      	movs	r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e4:	2303      	movs	r3, #3
 80015e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_ADC_MspInit+0x74>)
 80015f0:	f000 feee 	bl	80023d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40012400 	.word	0x40012400
 8001600:	40021000 	.word	0x40021000
 8001604:	40010800 	.word	0x40010800

08001608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001618:	d113      	bne.n	8001642 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_TIM_Base_MspInit+0x44>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <HAL_TIM_Base_MspInit+0x44>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_TIM_Base_MspInit+0x44>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	201c      	movs	r0, #28
 8001638:	f000 fde3 	bl	8002202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800163c:	201c      	movs	r0, #28
 800163e:	f000 fdfc 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000

08001650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <HAL_UART_MspInit+0x98>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d137      	bne.n	80016e0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <HAL_UART_MspInit+0x9c>)
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <HAL_UART_MspInit+0x9c>)
 8001676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167a:	61d3      	str	r3, [r2, #28]
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_UART_MspInit+0x9c>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_UART_MspInit+0x9c>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a17      	ldr	r2, [pc, #92]	; (80016ec <HAL_UART_MspInit+0x9c>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_UART_MspInit+0x9c>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016a0:	2304      	movs	r3, #4
 80016a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	480f      	ldr	r0, [pc, #60]	; (80016f0 <HAL_UART_MspInit+0xa0>)
 80016b4:	f000 fe8c 	bl	80023d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016b8:	2308      	movs	r3, #8
 80016ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	4809      	ldr	r0, [pc, #36]	; (80016f0 <HAL_UART_MspInit+0xa0>)
 80016cc:	f000 fe80 	bl	80023d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2026      	movs	r0, #38	; 0x26
 80016d6:	f000 fd94 	bl	8002202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016da:	2026      	movs	r0, #38	; 0x26
 80016dc:	f000 fdad 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e0:	bf00      	nop
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40004400 	.word	0x40004400
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010800 	.word	0x40010800

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <MemManage_Handler+0x4>

08001706 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler+0x4>

08001712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173a:	f000 f949 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <TIM2_IRQHandler+0x10>)
 800174a:	f001 fd59 	bl	8003200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000278 	.word	0x20000278

08001758 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <USART2_IRQHandler+0x10>)
 800175e:	f002 f9a7 	bl	8003ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002c0 	.word	0x200002c0

0800176c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
	return 1;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <_kill>:

int _kill(int pid, int sig)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001784:	f002 fdbc 	bl	8004300 <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	2216      	movs	r2, #22
 800178c:	601a      	str	r2, [r3, #0]
	return -1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <_exit>:

void _exit (int status)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017a2:	f04f 31ff 	mov.w	r1, #4294967295
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffe7 	bl	800177a <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ac:	e7fe      	b.n	80017ac <_exit+0x12>

080017ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	e00a      	b.n	80017d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017c0:	f3af 8000 	nop.w
 80017c4:	4601      	mov	r1, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	60ba      	str	r2, [r7, #8]
 80017cc:	b2ca      	uxtb	r2, r1
 80017ce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	429a      	cmp	r2, r3
 80017dc:	dbf0      	blt.n	80017c0 <_read+0x12>
	}

return len;
 80017de:	687b      	ldr	r3, [r7, #4]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e009      	b.n	800180e <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	60ba      	str	r2, [r7, #8]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	429a      	cmp	r2, r3
 8001814:	dbf1      	blt.n	80017fa <_write+0x12>
	}
	return len;
 8001816:	687b      	ldr	r3, [r7, #4]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_close>:

int _close(int file)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	return -1;
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001846:	605a      	str	r2, [r3, #4]
	return 0;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <_isatty>:

int _isatty(int file)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	return 1;
 800185c:	2301      	movs	r3, #1
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
	return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <_sbrk+0x5c>)
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <_sbrk+0x60>)
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <_sbrk+0x64>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <_sbrk+0x68>)
 80018a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d207      	bcs.n	80018c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b0:	f002 fd26 	bl	8004300 <__errno>
 80018b4:	4603      	mov	r3, r0
 80018b6:	220c      	movs	r2, #12
 80018b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	e009      	b.n	80018d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <_sbrk+0x64>)
 80018d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20002800 	.word	0x20002800
 80018e0:	00000400 	.word	0x00000400
 80018e4:	20000214 	.word	0x20000214
 80018e8:	20000318 	.word	0x20000318

080018ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fa:	490d      	ldr	r1, [pc, #52]	; (8001930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001910:	4c0a      	ldr	r4, [pc, #40]	; (800193c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800191e:	f7ff ffe5 	bl	80018ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001922:	f002 fcf3 	bl	800430c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001926:	f7ff fc33 	bl	8001190 <main>
  bx lr
 800192a:	4770      	bx	lr
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001934:	080074cc 	.word	0x080074cc
  ldr r2, =_sbss
 8001938:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800193c:	20000318 	.word	0x20000318

08001940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC1_2_IRQHandler>
	...

08001944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_Init+0x28>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_Init+0x28>)
 800194e:	f043 0310 	orr.w	r3, r3, #16
 8001952:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 fc49 	bl	80021ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	200f      	movs	r0, #15
 800195c:	f000 f808 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001960:	f7ff fdf4 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40022000 	.word	0x40022000

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x54>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fc61 	bl	8002256 <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 fc29 	bl	8002202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_IncTick+0x1c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_IncTick+0x20>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <HAL_IncTick+0x20>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000304 	.word	0x20000304

080019f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b02      	ldr	r3, [pc, #8]	; (8001a04 <HAL_GetTick+0x10>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000304 	.word	0x20000304

08001a08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0be      	b.n	8001ba8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fda2 	bl	8001590 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 fabf 	bl	8001fd0 <ADC_ConversionStop_Disable>
 8001a52:	4603      	mov	r3, r0
 8001a54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 8099 	bne.w	8001b96 <HAL_ADC_Init+0x18e>
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 8095 	bne.w	8001b96 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a74:	f023 0302 	bic.w	r3, r3, #2
 8001a78:	f043 0202 	orr.w	r2, r3, #2
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7b1b      	ldrb	r3, [r3, #12]
 8001a8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aa0:	d003      	beq.n	8001aaa <HAL_ADC_Init+0xa2>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d102      	bne.n	8001ab0 <HAL_ADC_Init+0xa8>
 8001aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aae:	e000      	b.n	8001ab2 <HAL_ADC_Init+0xaa>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7d1b      	ldrb	r3, [r3, #20]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d119      	bne.n	8001af4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7b1b      	ldrb	r3, [r3, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	035a      	lsls	r2, r3, #13
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	e00b      	b.n	8001af4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	f043 0220 	orr.w	r2, r3, #32
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_ADC_Init+0x1a8>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b24:	d003      	beq.n	8001b2e <HAL_ADC_Init+0x126>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d104      	bne.n	8001b38 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	051b      	lsls	r3, r3, #20
 8001b36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_ADC_Init+0x1ac>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d10b      	bne.n	8001b74 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	f023 0303 	bic.w	r3, r3, #3
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b72:	e018      	b.n	8001ba6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f023 0312 	bic.w	r3, r3, #18
 8001b7c:	f043 0210 	orr.w	r2, r3, #16
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b94:	e007      	b.n	8001ba6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	f043 0210 	orr.w	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	ffe1f7fd 	.word	0xffe1f7fd
 8001bb4:	ff1f0efe 	.word	0xff1f0efe

08001bb8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Start+0x1a>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e098      	b.n	8001d04 <HAL_ADC_Start+0x14c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f99e 	bl	8001f1c <ADC_Enable>
 8001be0:	4603      	mov	r3, r0
 8001be2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 8087 	bne.w	8001cfa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a41      	ldr	r2, [pc, #260]	; (8001d0c <HAL_ADC_Start+0x154>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d105      	bne.n	8001c16 <HAL_ADC_Start+0x5e>
 8001c0a:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_ADC_Start+0x158>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d115      	bne.n	8001c42 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d026      	beq.n	8001c7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c40:	e01d      	b.n	8001c7e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a2f      	ldr	r2, [pc, #188]	; (8001d10 <HAL_ADC_Start+0x158>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d004      	beq.n	8001c62 <HAL_ADC_Start+0xaa>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a2b      	ldr	r2, [pc, #172]	; (8001d0c <HAL_ADC_Start+0x154>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10d      	bne.n	8001c7e <HAL_ADC_Start+0xc6>
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_ADC_Start+0x158>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	f023 0206 	bic.w	r2, r3, #6
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c96:	e002      	b.n	8001c9e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f06f 0202 	mvn.w	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cbe:	d113      	bne.n	8001ce8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cc4:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <HAL_ADC_Start+0x154>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d105      	bne.n	8001cd6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_ADC_Start+0x158>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d108      	bne.n	8001ce8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	e00c      	b.n	8001d02 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	e003      	b.n	8001d02 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40012800 	.word	0x40012800
 8001d10:	40012400 	.word	0x40012400

08001d14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x20>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e0dc      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x1da>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b06      	cmp	r3, #6
 8001d5a:	d81c      	bhi.n	8001d96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b05      	subs	r3, #5
 8001d6e:	221f      	movs	r2, #31
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	4019      	ands	r1, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	3b05      	subs	r3, #5
 8001d88:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34
 8001d94:	e03c      	b.n	8001e10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d81c      	bhi.n	8001dd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	3b23      	subs	r3, #35	; 0x23
 8001db0:	221f      	movs	r2, #31
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	4019      	ands	r1, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b23      	subs	r3, #35	; 0x23
 8001dca:	fa00 f203 	lsl.w	r2, r0, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd6:	e01b      	b.n	8001e10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	3b41      	subs	r3, #65	; 0x41
 8001dea:	221f      	movs	r2, #31
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	4019      	ands	r1, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	3b41      	subs	r3, #65	; 0x41
 8001e04:	fa00 f203 	lsl.w	r2, r0, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b09      	cmp	r3, #9
 8001e16:	d91c      	bls.n	8001e52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68d9      	ldr	r1, [r3, #12]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	3b1e      	subs	r3, #30
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	4019      	ands	r1, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6898      	ldr	r0, [r3, #8]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	3b1e      	subs	r3, #30
 8001e44:	fa00 f203 	lsl.w	r2, r0, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	e019      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6919      	ldr	r1, [r3, #16]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	2207      	movs	r2, #7
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4019      	ands	r1, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6898      	ldr	r0, [r3, #8]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d003      	beq.n	8001e96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e92:	2b11      	cmp	r3, #17
 8001e94:	d132      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d125      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d126      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ebc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d11a      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	0c9a      	lsrs	r2, r3, #18
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001edc:	e002      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f9      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x1b2>
 8001eea:	e007      	b.n	8001efc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	40012400 	.word	0x40012400
 8001f14:	20000000 	.word	0x20000000
 8001f18:	431bde83 	.word	0x431bde83

08001f1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d040      	beq.n	8001fbc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4a:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <ADC_Enable+0xac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	; (8001fcc <ADC_Enable+0xb0>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	0c9b      	lsrs	r3, r3, #18
 8001f56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f58:	e002      	b.n	8001f60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f9      	bne.n	8001f5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f66:	f7ff fd45 	bl	80019f4 <HAL_GetTick>
 8001f6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f6c:	e01f      	b.n	8001fae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f6e:	f7ff fd41 	bl	80019f4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d918      	bls.n	8001fae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d011      	beq.n	8001fae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	f043 0210 	orr.w	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e007      	b.n	8001fbe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d1d8      	bne.n	8001f6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	431bde83 	.word	0x431bde83

08001fd0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d12e      	bne.n	8002048 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ffa:	f7ff fcfb 	bl	80019f4 <HAL_GetTick>
 8001ffe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002000:	e01b      	b.n	800203a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002002:	f7ff fcf7 	bl	80019f4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d914      	bls.n	800203a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d10d      	bne.n	800203a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e007      	b.n	800204a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d0dc      	beq.n	8002002 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800207c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002086:	4a04      	ldr	r2, [pc, #16]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	60d3      	str	r3, [r2, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <__NVIC_GetPriorityGrouping+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0307 	and.w	r3, r3, #7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	db0b      	blt.n	80020e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	4906      	ldr	r1, [pc, #24]	; (80020ec <__NVIC_EnableIRQ+0x34>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2001      	movs	r0, #1
 80020da:	fa00 f202 	lsl.w	r2, r0, r2
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db0a      	blt.n	800211a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	490c      	ldr	r1, [pc, #48]	; (800213c <__NVIC_SetPriority+0x4c>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	0112      	lsls	r2, r2, #4
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	440b      	add	r3, r1
 8002114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002118:	e00a      	b.n	8002130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	; (8002140 <__NVIC_SetPriority+0x50>)
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3b04      	subs	r3, #4
 8002128:	0112      	lsls	r2, r2, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	440b      	add	r3, r1
 800212e:	761a      	strb	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000e100 	.word	0xe000e100
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	2b04      	cmp	r3, #4
 8002160:	bf28      	it	cs
 8002162:	2304      	movcs	r3, #4
 8002164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3304      	adds	r3, #4
 800216a:	2b06      	cmp	r3, #6
 800216c:	d902      	bls.n	8002174 <NVIC_EncodePriority+0x30>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b03      	subs	r3, #3
 8002172:	e000      	b.n	8002176 <NVIC_EncodePriority+0x32>
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	4313      	orrs	r3, r2
         );
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b8:	d301      	bcc.n	80021be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00f      	b.n	80021de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <SysTick_Config+0x40>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c6:	210f      	movs	r1, #15
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f7ff ff90 	bl	80020f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <SysTick_Config+0x40>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <SysTick_Config+0x40>)
 80021d8:	2207      	movs	r2, #7
 80021da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	e000e010 	.word	0xe000e010

080021ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ff2d 	bl	8002054 <__NVIC_SetPriorityGrouping>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002214:	f7ff ff42 	bl	800209c <__NVIC_GetPriorityGrouping>
 8002218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f7ff ff90 	bl	8002144 <NVIC_EncodePriority>
 8002224:	4602      	mov	r2, r0
 8002226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff5f 	bl	80020f0 <__NVIC_SetPriority>
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff35 	bl	80020b8 <__NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ffa2 	bl	80021a8 <SysTick_Config>
 8002264:	4603      	mov	r3, r0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002280:	2b02      	cmp	r3, #2
 8002282:	d008      	beq.n	8002296 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2204      	movs	r2, #4
 8002288:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e020      	b.n	80022d8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 020e 	bic.w	r2, r2, #14
 80022a4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	2101      	movs	r1, #1
 80022c0:	fa01 f202 	lsl.w	r2, r1, r2
 80022c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d005      	beq.n	8002306 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2204      	movs	r2, #4
 80022fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e051      	b.n	80023aa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 020e 	bic.w	r2, r2, #14
 8002314:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a22      	ldr	r2, [pc, #136]	; (80023b4 <HAL_DMA_Abort_IT+0xd0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d029      	beq.n	8002384 <HAL_DMA_Abort_IT+0xa0>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <HAL_DMA_Abort_IT+0xd4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d022      	beq.n	8002380 <HAL_DMA_Abort_IT+0x9c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <HAL_DMA_Abort_IT+0xd8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d01a      	beq.n	800237a <HAL_DMA_Abort_IT+0x96>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <HAL_DMA_Abort_IT+0xdc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d012      	beq.n	8002374 <HAL_DMA_Abort_IT+0x90>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <HAL_DMA_Abort_IT+0xe0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d00a      	beq.n	800236e <HAL_DMA_Abort_IT+0x8a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_DMA_Abort_IT+0xe4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d102      	bne.n	8002368 <HAL_DMA_Abort_IT+0x84>
 8002362:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002366:	e00e      	b.n	8002386 <HAL_DMA_Abort_IT+0xa2>
 8002368:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800236c:	e00b      	b.n	8002386 <HAL_DMA_Abort_IT+0xa2>
 800236e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002372:	e008      	b.n	8002386 <HAL_DMA_Abort_IT+0xa2>
 8002374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002378:	e005      	b.n	8002386 <HAL_DMA_Abort_IT+0xa2>
 800237a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237e:	e002      	b.n	8002386 <HAL_DMA_Abort_IT+0xa2>
 8002380:	2310      	movs	r3, #16
 8002382:	e000      	b.n	8002386 <HAL_DMA_Abort_IT+0xa2>
 8002384:	2301      	movs	r3, #1
 8002386:	4a11      	ldr	r2, [pc, #68]	; (80023cc <HAL_DMA_Abort_IT+0xe8>)
 8002388:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	4798      	blx	r3
    } 
  }
  return status;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40020008 	.word	0x40020008
 80023b8:	4002001c 	.word	0x4002001c
 80023bc:	40020030 	.word	0x40020030
 80023c0:	40020044 	.word	0x40020044
 80023c4:	40020058 	.word	0x40020058
 80023c8:	4002006c 	.word	0x4002006c
 80023cc:	40020000 	.word	0x40020000

080023d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b08b      	sub	sp, #44	; 0x2c
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023da:	2300      	movs	r3, #0
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e2:	e148      	b.n	8002676 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023e4:	2201      	movs	r2, #1
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	f040 8137 	bne.w	8002670 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4aa3      	ldr	r2, [pc, #652]	; (8002694 <HAL_GPIO_Init+0x2c4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d05e      	beq.n	80024ca <HAL_GPIO_Init+0xfa>
 800240c:	4aa1      	ldr	r2, [pc, #644]	; (8002694 <HAL_GPIO_Init+0x2c4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d875      	bhi.n	80024fe <HAL_GPIO_Init+0x12e>
 8002412:	4aa1      	ldr	r2, [pc, #644]	; (8002698 <HAL_GPIO_Init+0x2c8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d058      	beq.n	80024ca <HAL_GPIO_Init+0xfa>
 8002418:	4a9f      	ldr	r2, [pc, #636]	; (8002698 <HAL_GPIO_Init+0x2c8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d86f      	bhi.n	80024fe <HAL_GPIO_Init+0x12e>
 800241e:	4a9f      	ldr	r2, [pc, #636]	; (800269c <HAL_GPIO_Init+0x2cc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d052      	beq.n	80024ca <HAL_GPIO_Init+0xfa>
 8002424:	4a9d      	ldr	r2, [pc, #628]	; (800269c <HAL_GPIO_Init+0x2cc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d869      	bhi.n	80024fe <HAL_GPIO_Init+0x12e>
 800242a:	4a9d      	ldr	r2, [pc, #628]	; (80026a0 <HAL_GPIO_Init+0x2d0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d04c      	beq.n	80024ca <HAL_GPIO_Init+0xfa>
 8002430:	4a9b      	ldr	r2, [pc, #620]	; (80026a0 <HAL_GPIO_Init+0x2d0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d863      	bhi.n	80024fe <HAL_GPIO_Init+0x12e>
 8002436:	4a9b      	ldr	r2, [pc, #620]	; (80026a4 <HAL_GPIO_Init+0x2d4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d046      	beq.n	80024ca <HAL_GPIO_Init+0xfa>
 800243c:	4a99      	ldr	r2, [pc, #612]	; (80026a4 <HAL_GPIO_Init+0x2d4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d85d      	bhi.n	80024fe <HAL_GPIO_Init+0x12e>
 8002442:	2b12      	cmp	r3, #18
 8002444:	d82a      	bhi.n	800249c <HAL_GPIO_Init+0xcc>
 8002446:	2b12      	cmp	r3, #18
 8002448:	d859      	bhi.n	80024fe <HAL_GPIO_Init+0x12e>
 800244a:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <HAL_GPIO_Init+0x80>)
 800244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002450:	080024cb 	.word	0x080024cb
 8002454:	080024a5 	.word	0x080024a5
 8002458:	080024b7 	.word	0x080024b7
 800245c:	080024f9 	.word	0x080024f9
 8002460:	080024ff 	.word	0x080024ff
 8002464:	080024ff 	.word	0x080024ff
 8002468:	080024ff 	.word	0x080024ff
 800246c:	080024ff 	.word	0x080024ff
 8002470:	080024ff 	.word	0x080024ff
 8002474:	080024ff 	.word	0x080024ff
 8002478:	080024ff 	.word	0x080024ff
 800247c:	080024ff 	.word	0x080024ff
 8002480:	080024ff 	.word	0x080024ff
 8002484:	080024ff 	.word	0x080024ff
 8002488:	080024ff 	.word	0x080024ff
 800248c:	080024ff 	.word	0x080024ff
 8002490:	080024ff 	.word	0x080024ff
 8002494:	080024ad 	.word	0x080024ad
 8002498:	080024c1 	.word	0x080024c1
 800249c:	4a82      	ldr	r2, [pc, #520]	; (80026a8 <HAL_GPIO_Init+0x2d8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024a2:	e02c      	b.n	80024fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	623b      	str	r3, [r7, #32]
          break;
 80024aa:	e029      	b.n	8002500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	3304      	adds	r3, #4
 80024b2:	623b      	str	r3, [r7, #32]
          break;
 80024b4:	e024      	b.n	8002500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	3308      	adds	r3, #8
 80024bc:	623b      	str	r3, [r7, #32]
          break;
 80024be:	e01f      	b.n	8002500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	330c      	adds	r3, #12
 80024c6:	623b      	str	r3, [r7, #32]
          break;
 80024c8:	e01a      	b.n	8002500 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024d2:	2304      	movs	r3, #4
 80024d4:	623b      	str	r3, [r7, #32]
          break;
 80024d6:	e013      	b.n	8002500 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024e0:	2308      	movs	r3, #8
 80024e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	611a      	str	r2, [r3, #16]
          break;
 80024ea:	e009      	b.n	8002500 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024ec:	2308      	movs	r3, #8
 80024ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	615a      	str	r2, [r3, #20]
          break;
 80024f6:	e003      	b.n	8002500 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
          break;
 80024fc:	e000      	b.n	8002500 <HAL_GPIO_Init+0x130>
          break;
 80024fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2bff      	cmp	r3, #255	; 0xff
 8002504:	d801      	bhi.n	800250a <HAL_GPIO_Init+0x13a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	e001      	b.n	800250e <HAL_GPIO_Init+0x13e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2bff      	cmp	r3, #255	; 0xff
 8002514:	d802      	bhi.n	800251c <HAL_GPIO_Init+0x14c>
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	e002      	b.n	8002522 <HAL_GPIO_Init+0x152>
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	3b08      	subs	r3, #8
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	210f      	movs	r1, #15
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	401a      	ands	r2, r3
 8002534:	6a39      	ldr	r1, [r7, #32]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	431a      	orrs	r2, r3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8090 	beq.w	8002670 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002550:	4b56      	ldr	r3, [pc, #344]	; (80026ac <HAL_GPIO_Init+0x2dc>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4a55      	ldr	r2, [pc, #340]	; (80026ac <HAL_GPIO_Init+0x2dc>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_GPIO_Init+0x2dc>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002568:	4a51      	ldr	r2, [pc, #324]	; (80026b0 <HAL_GPIO_Init+0x2e0>)
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	3302      	adds	r3, #2
 8002570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002574:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	220f      	movs	r2, #15
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a49      	ldr	r2, [pc, #292]	; (80026b4 <HAL_GPIO_Init+0x2e4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00d      	beq.n	80025b0 <HAL_GPIO_Init+0x1e0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a48      	ldr	r2, [pc, #288]	; (80026b8 <HAL_GPIO_Init+0x2e8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d007      	beq.n	80025ac <HAL_GPIO_Init+0x1dc>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a47      	ldr	r2, [pc, #284]	; (80026bc <HAL_GPIO_Init+0x2ec>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_GPIO_Init+0x1d8>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e004      	b.n	80025b2 <HAL_GPIO_Init+0x1e2>
 80025a8:	2303      	movs	r3, #3
 80025aa:	e002      	b.n	80025b2 <HAL_GPIO_Init+0x1e2>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_GPIO_Init+0x1e2>
 80025b0:	2300      	movs	r3, #0
 80025b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b4:	f002 0203 	and.w	r2, r2, #3
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	4093      	lsls	r3, r2
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025c2:	493b      	ldr	r1, [pc, #236]	; (80026b0 <HAL_GPIO_Init+0x2e0>)
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025dc:	4b38      	ldr	r3, [pc, #224]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4937      	ldr	r1, [pc, #220]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]
 80025e8:	e006      	b.n	80025f8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025ea:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	4933      	ldr	r1, [pc, #204]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d006      	beq.n	8002612 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002604:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	492d      	ldr	r1, [pc, #180]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002612:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	43db      	mvns	r3, r3
 800261a:	4929      	ldr	r1, [pc, #164]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 800261c:	4013      	ands	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	4923      	ldr	r1, [pc, #140]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]
 8002638:	e006      	b.n	8002648 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800263a:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	43db      	mvns	r3, r3
 8002642:	491f      	ldr	r1, [pc, #124]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 8002644:	4013      	ands	r3, r2
 8002646:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	4919      	ldr	r1, [pc, #100]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002662:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	43db      	mvns	r3, r3
 800266a:	4915      	ldr	r1, [pc, #84]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 800266c:	4013      	ands	r3, r2
 800266e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	3301      	adds	r3, #1
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	f47f aeaf 	bne.w	80023e4 <HAL_GPIO_Init+0x14>
  }
}
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	372c      	adds	r7, #44	; 0x2c
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	10320000 	.word	0x10320000
 8002698:	10310000 	.word	0x10310000
 800269c:	10220000 	.word	0x10220000
 80026a0:	10210000 	.word	0x10210000
 80026a4:	10120000 	.word	0x10120000
 80026a8:	10110000 	.word	0x10110000
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010000 	.word	0x40010000
 80026b4:	40010800 	.word	0x40010800
 80026b8:	40010c00 	.word	0x40010c00
 80026bc:	40011000 	.word	0x40011000
 80026c0:	40010400 	.word	0x40010400

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026e0:	e003      	b.n	80026ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	041a      	lsls	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	611a      	str	r2, [r3, #16]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4013      	ands	r3, r2
 800270c:	041a      	lsls	r2, r3, #16
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43d9      	mvns	r1, r3
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	400b      	ands	r3, r1
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	611a      	str	r2, [r3, #16]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
	...

08002728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e26c      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8087 	beq.w	8002856 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002748:	4b92      	ldr	r3, [pc, #584]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b04      	cmp	r3, #4
 8002752:	d00c      	beq.n	800276e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002754:	4b8f      	ldr	r3, [pc, #572]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b08      	cmp	r3, #8
 800275e:	d112      	bne.n	8002786 <HAL_RCC_OscConfig+0x5e>
 8002760:	4b8c      	ldr	r3, [pc, #560]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276c:	d10b      	bne.n	8002786 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276e:	4b89      	ldr	r3, [pc, #548]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d06c      	beq.n	8002854 <HAL_RCC_OscConfig+0x12c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d168      	bne.n	8002854 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e246      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x76>
 8002790:	4b80      	ldr	r3, [pc, #512]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a7f      	ldr	r2, [pc, #508]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 8002796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	e02e      	b.n	80027fc <HAL_RCC_OscConfig+0xd4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x98>
 80027a6:	4b7b      	ldr	r3, [pc, #492]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a7a      	ldr	r2, [pc, #488]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b78      	ldr	r3, [pc, #480]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a77      	ldr	r2, [pc, #476]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e01d      	b.n	80027fc <HAL_RCC_OscConfig+0xd4>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0xbc>
 80027ca:	4b72      	ldr	r3, [pc, #456]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a71      	ldr	r2, [pc, #452]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b6f      	ldr	r3, [pc, #444]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6e      	ldr	r2, [pc, #440]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0xd4>
 80027e4:	4b6b      	ldr	r3, [pc, #428]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a6a      	ldr	r2, [pc, #424]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b68      	ldr	r3, [pc, #416]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a67      	ldr	r2, [pc, #412]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7ff f8f6 	bl	80019f4 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800280c:	f7ff f8f2 	bl	80019f4 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e1fa      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	4b5d      	ldr	r3, [pc, #372]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0xe4>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff f8e2 	bl	80019f4 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002834:	f7ff f8de 	bl	80019f4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e1e6      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	4b53      	ldr	r3, [pc, #332]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x10c>
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d063      	beq.n	800292a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002862:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800286e:	4b49      	ldr	r3, [pc, #292]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b08      	cmp	r3, #8
 8002878:	d11c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x18c>
 800287a:	4b46      	ldr	r3, [pc, #280]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d116      	bne.n	80028b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	4b43      	ldr	r3, [pc, #268]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_RCC_OscConfig+0x176>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d001      	beq.n	800289e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e1ba      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4939      	ldr	r1, [pc, #228]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b2:	e03a      	b.n	800292a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d020      	beq.n	80028fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028bc:	4b36      	ldr	r3, [pc, #216]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c2:	f7ff f897 	bl	80019f4 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ca:	f7ff f893 	bl	80019f4 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e19b      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028dc:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4927      	ldr	r1, [pc, #156]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
 80028fc:	e015      	b.n	800292a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <HAL_RCC_OscConfig+0x270>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff f876 	bl	80019f4 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290c:	f7ff f872 	bl	80019f4 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e17a      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d03a      	beq.n	80029ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d019      	beq.n	8002972 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002944:	f7ff f856 	bl	80019f4 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294c:	f7ff f852 	bl	80019f4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e15a      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <HAL_RCC_OscConfig+0x26c>)
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800296a:	2001      	movs	r0, #1
 800296c:	f000 fad8 	bl	8002f20 <RCC_Delay>
 8002970:	e01c      	b.n	80029ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_RCC_OscConfig+0x274>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002978:	f7ff f83c 	bl	80019f4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297e:	e00f      	b.n	80029a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002980:	f7ff f838 	bl	80019f4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d908      	bls.n	80029a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e140      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	42420000 	.word	0x42420000
 800299c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a0:	4b9e      	ldr	r3, [pc, #632]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e9      	bne.n	8002980 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80a6 	beq.w	8002b06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029be:	4b97      	ldr	r3, [pc, #604]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10d      	bne.n	80029e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ca:	4b94      	ldr	r3, [pc, #592]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	4a93      	ldr	r2, [pc, #588]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d4:	61d3      	str	r3, [r2, #28]
 80029d6:	4b91      	ldr	r3, [pc, #580]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e6:	4b8e      	ldr	r3, [pc, #568]	; (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d118      	bne.n	8002a24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029f2:	4b8b      	ldr	r3, [pc, #556]	; (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a8a      	ldr	r2, [pc, #552]	; (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fe:	f7fe fff9 	bl	80019f4 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a06:	f7fe fff5 	bl	80019f4 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b64      	cmp	r3, #100	; 0x64
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e0fd      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	4b81      	ldr	r3, [pc, #516]	; (8002c20 <HAL_RCC_OscConfig+0x4f8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x312>
 8002a2c:	4b7b      	ldr	r3, [pc, #492]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	4a7a      	ldr	r2, [pc, #488]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6213      	str	r3, [r2, #32]
 8002a38:	e02d      	b.n	8002a96 <HAL_RCC_OscConfig+0x36e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x334>
 8002a42:	4b76      	ldr	r3, [pc, #472]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a75      	ldr	r2, [pc, #468]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6213      	str	r3, [r2, #32]
 8002a4e:	4b73      	ldr	r3, [pc, #460]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4a72      	ldr	r2, [pc, #456]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a54:	f023 0304 	bic.w	r3, r3, #4
 8002a58:	6213      	str	r3, [r2, #32]
 8002a5a:	e01c      	b.n	8002a96 <HAL_RCC_OscConfig+0x36e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d10c      	bne.n	8002a7e <HAL_RCC_OscConfig+0x356>
 8002a64:	4b6d      	ldr	r3, [pc, #436]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4a6c      	ldr	r2, [pc, #432]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6213      	str	r3, [r2, #32]
 8002a70:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4a69      	ldr	r2, [pc, #420]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6213      	str	r3, [r2, #32]
 8002a7c:	e00b      	b.n	8002a96 <HAL_RCC_OscConfig+0x36e>
 8002a7e:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4a66      	ldr	r2, [pc, #408]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6213      	str	r3, [r2, #32]
 8002a8a:	4b64      	ldr	r3, [pc, #400]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4a63      	ldr	r2, [pc, #396]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	f023 0304 	bic.w	r3, r3, #4
 8002a94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d015      	beq.n	8002aca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe ffa9 	bl	80019f4 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe ffa5 	bl	80019f4 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e0ab      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abc:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ee      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x37e>
 8002ac8:	e014      	b.n	8002af4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aca:	f7fe ff93 	bl	80019f4 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad0:	e00a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad2:	f7fe ff8f 	bl	80019f4 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e095      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae8:	4b4c      	ldr	r3, [pc, #304]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1ee      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d105      	bne.n	8002b06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afa:	4b48      	ldr	r3, [pc, #288]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	4a47      	ldr	r2, [pc, #284]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8081 	beq.w	8002c12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b10:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d061      	beq.n	8002be0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d146      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b24:	4b3f      	ldr	r3, [pc, #252]	; (8002c24 <HAL_RCC_OscConfig+0x4fc>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7fe ff63 	bl	80019f4 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe ff5f 	bl	80019f4 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e067      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b44:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b58:	d108      	bne.n	8002b6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b5a:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	492d      	ldr	r1, [pc, #180]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a19      	ldr	r1, [r3, #32]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	4927      	ldr	r1, [pc, #156]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b84:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <HAL_RCC_OscConfig+0x4fc>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7fe ff33 	bl	80019f4 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fe ff2f 	bl	80019f4 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e037      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x46a>
 8002bb0:	e02f      	b.n	8002c12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <HAL_RCC_OscConfig+0x4fc>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe ff1c 	bl	80019f4 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe ff18 	bl	80019f4 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e020      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x498>
 8002bde:	e018      	b.n	8002c12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e013      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40007000 	.word	0x40007000
 8002c24:	42420060 	.word	0x42420060

08002c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0d0      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b6a      	ldr	r3, [pc, #424]	; (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d910      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b67      	ldr	r3, [pc, #412]	; (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	4965      	ldr	r1, [pc, #404]	; (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0b8      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d020      	beq.n	8002cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c84:	4b59      	ldr	r3, [pc, #356]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a58      	ldr	r2, [pc, #352]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c9c:	4b53      	ldr	r3, [pc, #332]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca8:	4b50      	ldr	r3, [pc, #320]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	494d      	ldr	r1, [pc, #308]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d040      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b47      	ldr	r3, [pc, #284]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d115      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e07f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d107      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce6:	4b41      	ldr	r3, [pc, #260]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e073      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf6:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e06b      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d06:	4b39      	ldr	r3, [pc, #228]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f023 0203 	bic.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4936      	ldr	r1, [pc, #216]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d18:	f7fe fe6c 	bl	80019f4 <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d20:	f7fe fe68 	bl	80019f4 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e053      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 020c 	and.w	r2, r3, #12
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d1eb      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d48:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d210      	bcs.n	8002d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 0207 	bic.w	r2, r3, #7
 8002d5e:	4922      	ldr	r1, [pc, #136]	; (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e032      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4916      	ldr	r1, [pc, #88]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	490e      	ldr	r1, [pc, #56]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002db6:	f000 f821 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	490a      	ldr	r1, [pc, #40]	; (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	5ccb      	ldrb	r3, [r1, r3]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <HAL_RCC_ClockConfig+0x1cc>)
 8002dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_ClockConfig+0x1d0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fdca 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40021000 	.word	0x40021000
 8002df0:	080070cc 	.word	0x080070cc
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	b490      	push	{r4, r7}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e02:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e04:	1d3c      	adds	r4, r7, #4
 8002e06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e0c:	f240 2301 	movw	r3, #513	; 0x201
 8002e10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d002      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x40>
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x46>
 8002e3a:	e02d      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e3e:	623b      	str	r3, [r7, #32]
      break;
 8002e40:	e02d      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	0c9b      	lsrs	r3, r3, #18
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e4e:	4413      	add	r3, r2
 8002e50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	0c5b      	lsrs	r3, r3, #17
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e6e:	4413      	add	r3, r2
 8002e70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e7a:	fb02 f203 	mul.w	r2, r2, r3
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	e004      	b.n	8002e92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e8c:	fb02 f303 	mul.w	r3, r2, r3
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	623b      	str	r3, [r7, #32]
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e9a:	623b      	str	r3, [r7, #32]
      break;
 8002e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3728      	adds	r7, #40	; 0x28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc90      	pop	{r4, r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	080070bc 	.word	0x080070bc
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	007a1200 	.word	0x007a1200
 8002eb8:	003d0900 	.word	0x003d0900

08002ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec0:	4b02      	ldr	r3, [pc, #8]	; (8002ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	20000000 	.word	0x20000000

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ed4:	f7ff fff2 	bl	8002ebc <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4903      	ldr	r1, [pc, #12]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	080070dc 	.word	0x080070dc

08002ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002efc:	f7ff ffde 	bl	8002ebc <HAL_RCC_GetHCLKFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	0adb      	lsrs	r3, r3, #11
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4903      	ldr	r1, [pc, #12]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	080070dc 	.word	0x080070dc

08002f20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <RCC_Delay+0x34>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <RCC_Delay+0x38>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	0a5b      	lsrs	r3, r3, #9
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f3c:	bf00      	nop
  }
  while (Delay --);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1e5a      	subs	r2, r3, #1
 8002f42:	60fa      	str	r2, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f9      	bne.n	8002f3c <RCC_Delay+0x1c>
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	20000000 	.word	0x20000000
 8002f58:	10624dd3 	.word	0x10624dd3

08002f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d07d      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7c:	4b4f      	ldr	r3, [pc, #316]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10d      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f88:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	4a4b      	ldr	r2, [pc, #300]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f92:	61d3      	str	r3, [r2, #28]
 8002f94:	4b49      	ldr	r3, [pc, #292]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	4b46      	ldr	r3, [pc, #280]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d118      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb0:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a42      	ldr	r2, [pc, #264]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fbc:	f7fe fd1a 	bl	80019f4 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc4:	f7fe fd16 	bl	80019f4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e06d      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fe2:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d02e      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d027      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003000:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003008:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800300a:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003010:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003016:	4a29      	ldr	r2, [pc, #164]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d014      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7fe fce5 	bl	80019f4 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fe fce1 	bl	80019f4 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e036      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ee      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003050:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4917      	ldr	r1, [pc, #92]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305e:	4313      	orrs	r3, r2
 8003060:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003068:	4b14      	ldr	r3, [pc, #80]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	4a13      	ldr	r2, [pc, #76]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003072:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003080:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	490b      	ldr	r1, [pc, #44]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	4904      	ldr	r1, [pc, #16]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40007000 	.word	0x40007000
 80030c4:	42420440 	.word	0x42420440

080030c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e041      	b.n	800315e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe fa8a 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3304      	adds	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f000 fa6a 	bl	80035e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d001      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e035      	b.n	80031ec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a16      	ldr	r2, [pc, #88]	; (80031f8 <HAL_TIM_Base_Start_IT+0x90>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d009      	beq.n	80031b6 <HAL_TIM_Base_Start_IT+0x4e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031aa:	d004      	beq.n	80031b6 <HAL_TIM_Base_Start_IT+0x4e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a12      	ldr	r2, [pc, #72]	; (80031fc <HAL_TIM_Base_Start_IT+0x94>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d111      	bne.n	80031da <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b06      	cmp	r3, #6
 80031c6:	d010      	beq.n	80031ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d8:	e007      	b.n	80031ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40000400 	.word	0x40000400

08003200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b02      	cmp	r3, #2
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0202 	mvn.w	r2, #2
 800322c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f9b1 	bl	80035aa <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f9a4 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f9b3 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b04      	cmp	r3, #4
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0204 	mvn.w	r2, #4
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f987 	bl	80035aa <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f97a 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f989 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d122      	bne.n	8003304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d11b      	bne.n	8003304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0208 	mvn.w	r2, #8
 80032d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2204      	movs	r2, #4
 80032da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f95d 	bl	80035aa <HAL_TIM_IC_CaptureCallback>
 80032f0:	e005      	b.n	80032fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f950 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f95f 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b10      	cmp	r3, #16
 8003310:	d122      	bne.n	8003358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b10      	cmp	r3, #16
 800331e:	d11b      	bne.n	8003358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0210 	mvn.w	r2, #16
 8003328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2208      	movs	r2, #8
 800332e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f933 	bl	80035aa <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f926 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f935 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d10e      	bne.n	8003384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d107      	bne.n	8003384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0201 	mvn.w	r2, #1
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe f87e 	bl	8001480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b80      	cmp	r3, #128	; 0x80
 8003390:	d10e      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b80      	cmp	r3, #128	; 0x80
 800339e:	d107      	bne.n	80033b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa67 	bl	800387e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d10e      	bne.n	80033dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d107      	bne.n	80033dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f8f9 	bl	80035ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d10e      	bne.n	8003408 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0220 	mvn.w	r2, #32
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa32 	bl	800386c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_TIM_ConfigClockSource+0x18>
 8003424:	2302      	movs	r3, #2
 8003426:	e0b3      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x180>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003446:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800344e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003460:	d03e      	beq.n	80034e0 <HAL_TIM_ConfigClockSource+0xd0>
 8003462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003466:	f200 8087 	bhi.w	8003578 <HAL_TIM_ConfigClockSource+0x168>
 800346a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346e:	f000 8085 	beq.w	800357c <HAL_TIM_ConfigClockSource+0x16c>
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003476:	d87f      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 8003478:	2b70      	cmp	r3, #112	; 0x70
 800347a:	d01a      	beq.n	80034b2 <HAL_TIM_ConfigClockSource+0xa2>
 800347c:	2b70      	cmp	r3, #112	; 0x70
 800347e:	d87b      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 8003480:	2b60      	cmp	r3, #96	; 0x60
 8003482:	d050      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0x116>
 8003484:	2b60      	cmp	r3, #96	; 0x60
 8003486:	d877      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 8003488:	2b50      	cmp	r3, #80	; 0x50
 800348a:	d03c      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0xf6>
 800348c:	2b50      	cmp	r3, #80	; 0x50
 800348e:	d873      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d058      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0x136>
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d86f      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 8003498:	2b30      	cmp	r3, #48	; 0x30
 800349a:	d064      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x156>
 800349c:	2b30      	cmp	r3, #48	; 0x30
 800349e:	d86b      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d060      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x156>
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d867      	bhi.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d05c      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x156>
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d05a      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034b0:	e062      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f000 f95c 	bl	800377e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	609a      	str	r2, [r3, #8]
      break;
 80034de:	e04e      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6899      	ldr	r1, [r3, #8]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f000 f945 	bl	800377e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003502:	609a      	str	r2, [r3, #8]
      break;
 8003504:	e03b      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6859      	ldr	r1, [r3, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	461a      	mov	r2, r3
 8003514:	f000 f8bc 	bl	8003690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2150      	movs	r1, #80	; 0x50
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f913 	bl	800374a <TIM_ITRx_SetConfig>
      break;
 8003524:	e02b      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6859      	ldr	r1, [r3, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	461a      	mov	r2, r3
 8003534:	f000 f8da 	bl	80036ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2160      	movs	r1, #96	; 0x60
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f903 	bl	800374a <TIM_ITRx_SetConfig>
      break;
 8003544:	e01b      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6859      	ldr	r1, [r3, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	461a      	mov	r2, r3
 8003554:	f000 f89c 	bl	8003690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2140      	movs	r1, #64	; 0x40
 800355e:	4618      	mov	r0, r3
 8003560:	f000 f8f3 	bl	800374a <TIM_ITRx_SetConfig>
      break;
 8003564:	e00b      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4619      	mov	r1, r3
 8003570:	4610      	mov	r0, r2
 8003572:	f000 f8ea 	bl	800374a <TIM_ITRx_SetConfig>
        break;
 8003576:	e002      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003578:	bf00      	nop
 800357a:	e000      	b.n	800357e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800357c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr

080035ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a25      	ldr	r2, [pc, #148]	; (8003688 <TIM_Base_SetConfig+0xa8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <TIM_Base_SetConfig+0x28>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fe:	d003      	beq.n	8003608 <TIM_Base_SetConfig+0x28>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a22      	ldr	r2, [pc, #136]	; (800368c <TIM_Base_SetConfig+0xac>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d108      	bne.n	800361a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a1a      	ldr	r2, [pc, #104]	; (8003688 <TIM_Base_SetConfig+0xa8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <TIM_Base_SetConfig+0x52>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003628:	d003      	beq.n	8003632 <TIM_Base_SetConfig+0x52>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a17      	ldr	r2, [pc, #92]	; (800368c <TIM_Base_SetConfig+0xac>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a07      	ldr	r2, [pc, #28]	; (8003688 <TIM_Base_SetConfig+0xa8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d103      	bne.n	8003678 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	615a      	str	r2, [r3, #20]
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40000400 	.word	0x40000400

08003690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f023 0201 	bic.w	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f023 030a 	bic.w	r3, r3, #10
 80036cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	621a      	str	r2, [r3, #32]
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f023 0210 	bic.w	r2, r3, #16
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003716:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	031b      	lsls	r3, r3, #12
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003728:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	621a      	str	r2, [r3, #32]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	f043 0307 	orr.w	r3, r3, #7
 800376c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	609a      	str	r2, [r3, #8]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800377e:	b480      	push	{r7}
 8003780:	b087      	sub	sp, #28
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003798:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	021a      	lsls	r2, r3, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	609a      	str	r2, [r3, #8]
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e041      	b.n	8003858 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a14      	ldr	r2, [pc, #80]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003820:	d004      	beq.n	800382c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a10      	ldr	r2, [pc, #64]	; (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d10c      	bne.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	4313      	orrs	r3, r2
 800383c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40012c00 	.word	0x40012c00
 8003868:	40000400 	.word	0x40000400

0800386c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e03f      	b.n	8003922 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd feca 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	; 0x24
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fc85 	bl	80041e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b08a      	sub	sp, #40	; 0x28
 800392e:	af02      	add	r7, sp, #8
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	4613      	mov	r3, r2
 8003938:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b20      	cmp	r3, #32
 8003948:	d17c      	bne.n	8003a44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_UART_Transmit+0x2c>
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e075      	b.n	8003a46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_UART_Transmit+0x3e>
 8003964:	2302      	movs	r3, #2
 8003966:	e06e      	b.n	8003a46 <HAL_UART_Transmit+0x11c>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2221      	movs	r2, #33	; 0x21
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800397e:	f7fe f839 	bl	80019f4 <HAL_GetTick>
 8003982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	88fa      	ldrh	r2, [r7, #6]
 8003988:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	88fa      	ldrh	r2, [r7, #6]
 800398e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003998:	d108      	bne.n	80039ac <HAL_UART_Transmit+0x82>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d104      	bne.n	80039ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	e003      	b.n	80039b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039bc:	e02a      	b.n	8003a14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2180      	movs	r1, #128	; 0x80
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fa38 	bl	8003e3e <UART_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e036      	b.n	8003a46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10b      	bne.n	80039f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	3302      	adds	r3, #2
 80039f2:	61bb      	str	r3, [r7, #24]
 80039f4:	e007      	b.n	8003a06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	3301      	adds	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1cf      	bne.n	80039be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2200      	movs	r2, #0
 8003a26:	2140      	movs	r1, #64	; 0x40
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 fa08 	bl	8003e3e <UART_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e006      	b.n	8003a46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e000      	b.n	8003a46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
  }
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d11d      	bne.n	8003aa4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_UART_Receive_IT+0x26>
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e016      	b.n	8003aa6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_UART_Receive_IT+0x38>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e00f      	b.n	8003aa6 <HAL_UART_Receive_IT+0x58>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fa19 	bl	8003ed2 <UART_Start_Receive_IT>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	e000      	b.n	8003aa6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10d      	bne.n	8003b02 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_UART_IRQHandler+0x52>
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fac9 	bl	8004092 <UART_Receive_IT>
      return;
 8003b00:	e17b      	b.n	8003dfa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80b1 	beq.w	8003c6c <HAL_UART_IRQHandler+0x1bc>
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <HAL_UART_IRQHandler+0x70>
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80a6 	beq.w	8003c6c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_UART_IRQHandler+0x90>
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_UART_IRQHandler+0xb0>
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f043 0202 	orr.w	r2, r3, #2
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_UART_IRQHandler+0xd0>
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	f043 0204 	orr.w	r2, r3, #4
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00f      	beq.n	8003baa <HAL_UART_IRQHandler+0xfa>
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d104      	bne.n	8003b9e <HAL_UART_IRQHandler+0xee>
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f043 0208 	orr.w	r2, r3, #8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 811e 	beq.w	8003df0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <HAL_UART_IRQHandler+0x11e>
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fa62 	bl	8004092 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf14      	ite	ne
 8003bdc:	2301      	movne	r3, #1
 8003bde:	2300      	moveq	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x146>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d031      	beq.n	8003c5a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f9a4 	bl	8003f44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d023      	beq.n	8003c52 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c18:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d013      	beq.n	8003c4a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	4a76      	ldr	r2, [pc, #472]	; (8003e00 <HAL_UART_IRQHandler+0x350>)
 8003c28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fb58 	bl	80022e4 <HAL_DMA_Abort_IT>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d016      	beq.n	8003c68 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c44:	4610      	mov	r0, r2
 8003c46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	e00e      	b.n	8003c68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f8e3 	bl	8003e16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	e00a      	b.n	8003c68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8df 	bl	8003e16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	e006      	b.n	8003c68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8db 	bl	8003e16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c66:	e0c3      	b.n	8003df0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	bf00      	nop
    return;
 8003c6a:	e0c1      	b.n	8003df0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	f040 80a1 	bne.w	8003db8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 809b 	beq.w	8003db8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8095 	beq.w	8003db8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d04e      	beq.n	8003d50 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003cbc:	8a3b      	ldrh	r3, [r7, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8098 	beq.w	8003df4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cc8:	8a3a      	ldrh	r2, [r7, #16]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	f080 8092 	bcs.w	8003df4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8a3a      	ldrh	r2, [r7, #16]
 8003cd4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d02b      	beq.n	8003d38 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0210 	bic.w	r2, r2, #16
 8003d2c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe fa9b 	bl	800226e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f86d 	bl	8003e28 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d4e:	e051      	b.n	8003df4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d047      	beq.n	8003df8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003d68:	8a7b      	ldrh	r3, [r7, #18]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d044      	beq.n	8003df8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d7c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0210 	bic.w	r2, r2, #16
 8003daa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dac:	8a7b      	ldrh	r3, [r7, #18]
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f839 	bl	8003e28 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003db6:	e01f      	b.n	8003df8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x324>
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f8f9 	bl	8003fc4 <UART_Transmit_IT>
    return;
 8003dd2:	e012      	b.n	8003dfa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <HAL_UART_IRQHandler+0x34a>
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f93a 	bl	8004062 <UART_EndTransmit_IT>
    return;
 8003dee:	e004      	b.n	8003dfa <HAL_UART_IRQHandler+0x34a>
    return;
 8003df0:	bf00      	nop
 8003df2:	e002      	b.n	8003dfa <HAL_UART_IRQHandler+0x34a>
      return;
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <HAL_UART_IRQHandler+0x34a>
      return;
 8003df8:	bf00      	nop
  }
}
 8003dfa:	3728      	adds	r7, #40	; 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	08003f9d 	.word	0x08003f9d

08003e04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4e:	e02c      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	d028      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x30>
 8003e5e:	f7fd fdc9 	bl	80019f4 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d21d      	bcs.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0201 	bic.w	r2, r2, #1
 8003e8c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e00f      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d0c3      	beq.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	4613      	mov	r3, r2
 8003ede:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	88fa      	ldrh	r2, [r7, #6]
 8003eea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	88fa      	ldrh	r2, [r7, #6]
 8003ef0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2222      	movs	r2, #34	; 0x22
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f16:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0220 	orr.w	r2, r2, #32
 8003f36:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695a      	ldr	r2, [r3, #20]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d107      	bne.n	8003f84 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0210 	bic.w	r2, r2, #16
 8003f82:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7ff ff2d 	bl	8003e16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b21      	cmp	r3, #33	; 0x21
 8003fd6:	d13e      	bne.n	8004056 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe0:	d114      	bne.n	800400c <UART_Transmit_IT+0x48>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d110      	bne.n	800400c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ffe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	1c9a      	adds	r2, r3, #2
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]
 800400a:	e008      	b.n	800401e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	1c59      	adds	r1, r3, #1
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6211      	str	r1, [r2, #32]
 8004016:	781a      	ldrb	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29b      	uxth	r3, r3
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4619      	mov	r1, r3
 800402c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004040:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004050:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004078:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff febe 	bl	8003e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b086      	sub	sp, #24
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b22      	cmp	r3, #34	; 0x22
 80040a4:	f040 8099 	bne.w	80041da <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b0:	d117      	bne.n	80040e2 <UART_Receive_IT+0x50>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d113      	bne.n	80040e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	1c9a      	adds	r2, r3, #2
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
 80040e0:	e026      	b.n	8004130 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f4:	d007      	beq.n	8004106 <UART_Receive_IT+0x74>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <UART_Receive_IT+0x82>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e008      	b.n	8004126 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004120:	b2da      	uxtb	r2, r3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29b      	uxth	r3, r3
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4619      	mov	r1, r3
 800413e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004140:	2b00      	cmp	r3, #0
 8004142:	d148      	bne.n	80041d6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0220 	bic.w	r2, r2, #32
 8004152:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004162:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	2b01      	cmp	r3, #1
 8004182:	d123      	bne.n	80041cc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0210 	bic.w	r2, r2, #16
 8004198:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d10a      	bne.n	80041be <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041c2:	4619      	mov	r1, r3
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff fe2f 	bl	8003e28 <HAL_UARTEx_RxEventCallback>
 80041ca:	e002      	b.n	80041d2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7fc ffa3 	bl	8001118 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e002      	b.n	80041dc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800421e:	f023 030c 	bic.w	r3, r3, #12
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	430b      	orrs	r3, r1
 800422a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <UART_SetConfig+0x114>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d103      	bne.n	8004254 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7fe fe54 	bl	8002ef8 <HAL_RCC_GetPCLK2Freq>
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	e002      	b.n	800425a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004254:	f7fe fe3c 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8004258:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	009a      	lsls	r2, r3, #2
 8004264:	441a      	add	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	4a22      	ldr	r2, [pc, #136]	; (80042fc <UART_SetConfig+0x118>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	0119      	lsls	r1, r3, #4
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	009a      	lsls	r2, r3, #2
 8004284:	441a      	add	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004290:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <UART_SetConfig+0x118>)
 8004292:	fba3 0302 	umull	r0, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2064      	movs	r0, #100	; 0x64
 800429a:	fb00 f303 	mul.w	r3, r0, r3
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	3332      	adds	r3, #50	; 0x32
 80042a4:	4a15      	ldr	r2, [pc, #84]	; (80042fc <UART_SetConfig+0x118>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b0:	4419      	add	r1, r3
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	009a      	lsls	r2, r3, #2
 80042bc:	441a      	add	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <UART_SetConfig+0x118>)
 80042ca:	fba3 0302 	umull	r0, r3, r3, r2
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2064      	movs	r0, #100	; 0x64
 80042d2:	fb00 f303 	mul.w	r3, r0, r3
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	3332      	adds	r3, #50	; 0x32
 80042dc:	4a07      	ldr	r2, [pc, #28]	; (80042fc <UART_SetConfig+0x118>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	f003 020f 	and.w	r2, r3, #15
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	440a      	add	r2, r1
 80042ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40013800 	.word	0x40013800
 80042fc:	51eb851f 	.word	0x51eb851f

08004300 <__errno>:
 8004300:	4b01      	ldr	r3, [pc, #4]	; (8004308 <__errno+0x8>)
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	2000000c 	.word	0x2000000c

0800430c <__libc_init_array>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	2600      	movs	r6, #0
 8004310:	4d0c      	ldr	r5, [pc, #48]	; (8004344 <__libc_init_array+0x38>)
 8004312:	4c0d      	ldr	r4, [pc, #52]	; (8004348 <__libc_init_array+0x3c>)
 8004314:	1b64      	subs	r4, r4, r5
 8004316:	10a4      	asrs	r4, r4, #2
 8004318:	42a6      	cmp	r6, r4
 800431a:	d109      	bne.n	8004330 <__libc_init_array+0x24>
 800431c:	f002 feba 	bl	8007094 <_init>
 8004320:	2600      	movs	r6, #0
 8004322:	4d0a      	ldr	r5, [pc, #40]	; (800434c <__libc_init_array+0x40>)
 8004324:	4c0a      	ldr	r4, [pc, #40]	; (8004350 <__libc_init_array+0x44>)
 8004326:	1b64      	subs	r4, r4, r5
 8004328:	10a4      	asrs	r4, r4, #2
 800432a:	42a6      	cmp	r6, r4
 800432c:	d105      	bne.n	800433a <__libc_init_array+0x2e>
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	f855 3b04 	ldr.w	r3, [r5], #4
 8004334:	4798      	blx	r3
 8004336:	3601      	adds	r6, #1
 8004338:	e7ee      	b.n	8004318 <__libc_init_array+0xc>
 800433a:	f855 3b04 	ldr.w	r3, [r5], #4
 800433e:	4798      	blx	r3
 8004340:	3601      	adds	r6, #1
 8004342:	e7f2      	b.n	800432a <__libc_init_array+0x1e>
 8004344:	080074c4 	.word	0x080074c4
 8004348:	080074c4 	.word	0x080074c4
 800434c:	080074c4 	.word	0x080074c4
 8004350:	080074c8 	.word	0x080074c8

08004354 <memset>:
 8004354:	4603      	mov	r3, r0
 8004356:	4402      	add	r2, r0
 8004358:	4293      	cmp	r3, r2
 800435a:	d100      	bne.n	800435e <memset+0xa>
 800435c:	4770      	bx	lr
 800435e:	f803 1b01 	strb.w	r1, [r3], #1
 8004362:	e7f9      	b.n	8004358 <memset+0x4>

08004364 <__cvt>:
 8004364:	2b00      	cmp	r3, #0
 8004366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800436a:	461f      	mov	r7, r3
 800436c:	bfbb      	ittet	lt
 800436e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004372:	461f      	movlt	r7, r3
 8004374:	2300      	movge	r3, #0
 8004376:	232d      	movlt	r3, #45	; 0x2d
 8004378:	b088      	sub	sp, #32
 800437a:	4614      	mov	r4, r2
 800437c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800437e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004380:	7013      	strb	r3, [r2, #0]
 8004382:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004384:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004388:	f023 0820 	bic.w	r8, r3, #32
 800438c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004390:	d005      	beq.n	800439e <__cvt+0x3a>
 8004392:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004396:	d100      	bne.n	800439a <__cvt+0x36>
 8004398:	3501      	adds	r5, #1
 800439a:	2302      	movs	r3, #2
 800439c:	e000      	b.n	80043a0 <__cvt+0x3c>
 800439e:	2303      	movs	r3, #3
 80043a0:	aa07      	add	r2, sp, #28
 80043a2:	9204      	str	r2, [sp, #16]
 80043a4:	aa06      	add	r2, sp, #24
 80043a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80043aa:	e9cd 3500 	strd	r3, r5, [sp]
 80043ae:	4622      	mov	r2, r4
 80043b0:	463b      	mov	r3, r7
 80043b2:	f000 fce5 	bl	8004d80 <_dtoa_r>
 80043b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043ba:	4606      	mov	r6, r0
 80043bc:	d102      	bne.n	80043c4 <__cvt+0x60>
 80043be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043c0:	07db      	lsls	r3, r3, #31
 80043c2:	d522      	bpl.n	800440a <__cvt+0xa6>
 80043c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043c8:	eb06 0905 	add.w	r9, r6, r5
 80043cc:	d110      	bne.n	80043f0 <__cvt+0x8c>
 80043ce:	7833      	ldrb	r3, [r6, #0]
 80043d0:	2b30      	cmp	r3, #48	; 0x30
 80043d2:	d10a      	bne.n	80043ea <__cvt+0x86>
 80043d4:	2200      	movs	r2, #0
 80043d6:	2300      	movs	r3, #0
 80043d8:	4620      	mov	r0, r4
 80043da:	4639      	mov	r1, r7
 80043dc:	f7fc fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80043e0:	b918      	cbnz	r0, 80043ea <__cvt+0x86>
 80043e2:	f1c5 0501 	rsb	r5, r5, #1
 80043e6:	f8ca 5000 	str.w	r5, [sl]
 80043ea:	f8da 3000 	ldr.w	r3, [sl]
 80043ee:	4499      	add	r9, r3
 80043f0:	2200      	movs	r2, #0
 80043f2:	2300      	movs	r3, #0
 80043f4:	4620      	mov	r0, r4
 80043f6:	4639      	mov	r1, r7
 80043f8:	f7fc fad6 	bl	80009a8 <__aeabi_dcmpeq>
 80043fc:	b108      	cbz	r0, 8004402 <__cvt+0x9e>
 80043fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8004402:	2230      	movs	r2, #48	; 0x30
 8004404:	9b07      	ldr	r3, [sp, #28]
 8004406:	454b      	cmp	r3, r9
 8004408:	d307      	bcc.n	800441a <__cvt+0xb6>
 800440a:	4630      	mov	r0, r6
 800440c:	9b07      	ldr	r3, [sp, #28]
 800440e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004410:	1b9b      	subs	r3, r3, r6
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	b008      	add	sp, #32
 8004416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441a:	1c59      	adds	r1, r3, #1
 800441c:	9107      	str	r1, [sp, #28]
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e7f0      	b.n	8004404 <__cvt+0xa0>

08004422 <__exponent>:
 8004422:	4603      	mov	r3, r0
 8004424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004426:	2900      	cmp	r1, #0
 8004428:	f803 2b02 	strb.w	r2, [r3], #2
 800442c:	bfb6      	itet	lt
 800442e:	222d      	movlt	r2, #45	; 0x2d
 8004430:	222b      	movge	r2, #43	; 0x2b
 8004432:	4249      	neglt	r1, r1
 8004434:	2909      	cmp	r1, #9
 8004436:	7042      	strb	r2, [r0, #1]
 8004438:	dd2b      	ble.n	8004492 <__exponent+0x70>
 800443a:	f10d 0407 	add.w	r4, sp, #7
 800443e:	46a4      	mov	ip, r4
 8004440:	270a      	movs	r7, #10
 8004442:	fb91 f6f7 	sdiv	r6, r1, r7
 8004446:	460a      	mov	r2, r1
 8004448:	46a6      	mov	lr, r4
 800444a:	fb07 1516 	mls	r5, r7, r6, r1
 800444e:	2a63      	cmp	r2, #99	; 0x63
 8004450:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004454:	4631      	mov	r1, r6
 8004456:	f104 34ff 	add.w	r4, r4, #4294967295
 800445a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800445e:	dcf0      	bgt.n	8004442 <__exponent+0x20>
 8004460:	3130      	adds	r1, #48	; 0x30
 8004462:	f1ae 0502 	sub.w	r5, lr, #2
 8004466:	f804 1c01 	strb.w	r1, [r4, #-1]
 800446a:	4629      	mov	r1, r5
 800446c:	1c44      	adds	r4, r0, #1
 800446e:	4561      	cmp	r1, ip
 8004470:	d30a      	bcc.n	8004488 <__exponent+0x66>
 8004472:	f10d 0209 	add.w	r2, sp, #9
 8004476:	eba2 020e 	sub.w	r2, r2, lr
 800447a:	4565      	cmp	r5, ip
 800447c:	bf88      	it	hi
 800447e:	2200      	movhi	r2, #0
 8004480:	4413      	add	r3, r2
 8004482:	1a18      	subs	r0, r3, r0
 8004484:	b003      	add	sp, #12
 8004486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004488:	f811 2b01 	ldrb.w	r2, [r1], #1
 800448c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004490:	e7ed      	b.n	800446e <__exponent+0x4c>
 8004492:	2330      	movs	r3, #48	; 0x30
 8004494:	3130      	adds	r1, #48	; 0x30
 8004496:	7083      	strb	r3, [r0, #2]
 8004498:	70c1      	strb	r1, [r0, #3]
 800449a:	1d03      	adds	r3, r0, #4
 800449c:	e7f1      	b.n	8004482 <__exponent+0x60>
	...

080044a0 <_printf_float>:
 80044a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a4:	b091      	sub	sp, #68	; 0x44
 80044a6:	460c      	mov	r4, r1
 80044a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80044ac:	4616      	mov	r6, r2
 80044ae:	461f      	mov	r7, r3
 80044b0:	4605      	mov	r5, r0
 80044b2:	f001 fa53 	bl	800595c <_localeconv_r>
 80044b6:	6803      	ldr	r3, [r0, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	9309      	str	r3, [sp, #36]	; 0x24
 80044bc:	f7fb fe48 	bl	8000150 <strlen>
 80044c0:	2300      	movs	r3, #0
 80044c2:	930e      	str	r3, [sp, #56]	; 0x38
 80044c4:	f8d8 3000 	ldr.w	r3, [r8]
 80044c8:	900a      	str	r0, [sp, #40]	; 0x28
 80044ca:	3307      	adds	r3, #7
 80044cc:	f023 0307 	bic.w	r3, r3, #7
 80044d0:	f103 0208 	add.w	r2, r3, #8
 80044d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80044d8:	f8d4 b000 	ldr.w	fp, [r4]
 80044dc:	f8c8 2000 	str.w	r2, [r8]
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044e8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80044ec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80044f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80044f2:	f04f 32ff 	mov.w	r2, #4294967295
 80044f6:	4640      	mov	r0, r8
 80044f8:	4b9c      	ldr	r3, [pc, #624]	; (800476c <_printf_float+0x2cc>)
 80044fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044fc:	f7fc fa86 	bl	8000a0c <__aeabi_dcmpun>
 8004500:	bb70      	cbnz	r0, 8004560 <_printf_float+0xc0>
 8004502:	f04f 32ff 	mov.w	r2, #4294967295
 8004506:	4640      	mov	r0, r8
 8004508:	4b98      	ldr	r3, [pc, #608]	; (800476c <_printf_float+0x2cc>)
 800450a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800450c:	f7fc fa60 	bl	80009d0 <__aeabi_dcmple>
 8004510:	bb30      	cbnz	r0, 8004560 <_printf_float+0xc0>
 8004512:	2200      	movs	r2, #0
 8004514:	2300      	movs	r3, #0
 8004516:	4640      	mov	r0, r8
 8004518:	4651      	mov	r1, sl
 800451a:	f7fc fa4f 	bl	80009bc <__aeabi_dcmplt>
 800451e:	b110      	cbz	r0, 8004526 <_printf_float+0x86>
 8004520:	232d      	movs	r3, #45	; 0x2d
 8004522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004526:	4b92      	ldr	r3, [pc, #584]	; (8004770 <_printf_float+0x2d0>)
 8004528:	4892      	ldr	r0, [pc, #584]	; (8004774 <_printf_float+0x2d4>)
 800452a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800452e:	bf94      	ite	ls
 8004530:	4698      	movls	r8, r3
 8004532:	4680      	movhi	r8, r0
 8004534:	2303      	movs	r3, #3
 8004536:	f04f 0a00 	mov.w	sl, #0
 800453a:	6123      	str	r3, [r4, #16]
 800453c:	f02b 0304 	bic.w	r3, fp, #4
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	4633      	mov	r3, r6
 8004544:	4621      	mov	r1, r4
 8004546:	4628      	mov	r0, r5
 8004548:	9700      	str	r7, [sp, #0]
 800454a:	aa0f      	add	r2, sp, #60	; 0x3c
 800454c:	f000 f9d4 	bl	80048f8 <_printf_common>
 8004550:	3001      	adds	r0, #1
 8004552:	f040 8090 	bne.w	8004676 <_printf_float+0x1d6>
 8004556:	f04f 30ff 	mov.w	r0, #4294967295
 800455a:	b011      	add	sp, #68	; 0x44
 800455c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004560:	4642      	mov	r2, r8
 8004562:	4653      	mov	r3, sl
 8004564:	4640      	mov	r0, r8
 8004566:	4651      	mov	r1, sl
 8004568:	f7fc fa50 	bl	8000a0c <__aeabi_dcmpun>
 800456c:	b148      	cbz	r0, 8004582 <_printf_float+0xe2>
 800456e:	f1ba 0f00 	cmp.w	sl, #0
 8004572:	bfb8      	it	lt
 8004574:	232d      	movlt	r3, #45	; 0x2d
 8004576:	4880      	ldr	r0, [pc, #512]	; (8004778 <_printf_float+0x2d8>)
 8004578:	bfb8      	it	lt
 800457a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800457e:	4b7f      	ldr	r3, [pc, #508]	; (800477c <_printf_float+0x2dc>)
 8004580:	e7d3      	b.n	800452a <_printf_float+0x8a>
 8004582:	6863      	ldr	r3, [r4, #4]
 8004584:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	d142      	bne.n	8004612 <_printf_float+0x172>
 800458c:	2306      	movs	r3, #6
 800458e:	6063      	str	r3, [r4, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	9206      	str	r2, [sp, #24]
 8004594:	aa0e      	add	r2, sp, #56	; 0x38
 8004596:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800459a:	aa0d      	add	r2, sp, #52	; 0x34
 800459c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80045a0:	9203      	str	r2, [sp, #12]
 80045a2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80045a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80045aa:	6023      	str	r3, [r4, #0]
 80045ac:	6863      	ldr	r3, [r4, #4]
 80045ae:	4642      	mov	r2, r8
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	4628      	mov	r0, r5
 80045b4:	4653      	mov	r3, sl
 80045b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80045b8:	f7ff fed4 	bl	8004364 <__cvt>
 80045bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045be:	4680      	mov	r8, r0
 80045c0:	2947      	cmp	r1, #71	; 0x47
 80045c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045c4:	d108      	bne.n	80045d8 <_printf_float+0x138>
 80045c6:	1cc8      	adds	r0, r1, #3
 80045c8:	db02      	blt.n	80045d0 <_printf_float+0x130>
 80045ca:	6863      	ldr	r3, [r4, #4]
 80045cc:	4299      	cmp	r1, r3
 80045ce:	dd40      	ble.n	8004652 <_printf_float+0x1b2>
 80045d0:	f1a9 0902 	sub.w	r9, r9, #2
 80045d4:	fa5f f989 	uxtb.w	r9, r9
 80045d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045dc:	d81f      	bhi.n	800461e <_printf_float+0x17e>
 80045de:	464a      	mov	r2, r9
 80045e0:	3901      	subs	r1, #1
 80045e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045e6:	910d      	str	r1, [sp, #52]	; 0x34
 80045e8:	f7ff ff1b 	bl	8004422 <__exponent>
 80045ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045ee:	4682      	mov	sl, r0
 80045f0:	1813      	adds	r3, r2, r0
 80045f2:	2a01      	cmp	r2, #1
 80045f4:	6123      	str	r3, [r4, #16]
 80045f6:	dc02      	bgt.n	80045fe <_printf_float+0x15e>
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	07d2      	lsls	r2, r2, #31
 80045fc:	d501      	bpl.n	8004602 <_printf_float+0x162>
 80045fe:	3301      	adds	r3, #1
 8004600:	6123      	str	r3, [r4, #16]
 8004602:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004606:	2b00      	cmp	r3, #0
 8004608:	d09b      	beq.n	8004542 <_printf_float+0xa2>
 800460a:	232d      	movs	r3, #45	; 0x2d
 800460c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004610:	e797      	b.n	8004542 <_printf_float+0xa2>
 8004612:	2947      	cmp	r1, #71	; 0x47
 8004614:	d1bc      	bne.n	8004590 <_printf_float+0xf0>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1ba      	bne.n	8004590 <_printf_float+0xf0>
 800461a:	2301      	movs	r3, #1
 800461c:	e7b7      	b.n	800458e <_printf_float+0xee>
 800461e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004622:	d118      	bne.n	8004656 <_printf_float+0x1b6>
 8004624:	2900      	cmp	r1, #0
 8004626:	6863      	ldr	r3, [r4, #4]
 8004628:	dd0b      	ble.n	8004642 <_printf_float+0x1a2>
 800462a:	6121      	str	r1, [r4, #16]
 800462c:	b913      	cbnz	r3, 8004634 <_printf_float+0x194>
 800462e:	6822      	ldr	r2, [r4, #0]
 8004630:	07d0      	lsls	r0, r2, #31
 8004632:	d502      	bpl.n	800463a <_printf_float+0x19a>
 8004634:	3301      	adds	r3, #1
 8004636:	440b      	add	r3, r1
 8004638:	6123      	str	r3, [r4, #16]
 800463a:	f04f 0a00 	mov.w	sl, #0
 800463e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004640:	e7df      	b.n	8004602 <_printf_float+0x162>
 8004642:	b913      	cbnz	r3, 800464a <_printf_float+0x1aa>
 8004644:	6822      	ldr	r2, [r4, #0]
 8004646:	07d2      	lsls	r2, r2, #31
 8004648:	d501      	bpl.n	800464e <_printf_float+0x1ae>
 800464a:	3302      	adds	r3, #2
 800464c:	e7f4      	b.n	8004638 <_printf_float+0x198>
 800464e:	2301      	movs	r3, #1
 8004650:	e7f2      	b.n	8004638 <_printf_float+0x198>
 8004652:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004658:	4299      	cmp	r1, r3
 800465a:	db05      	blt.n	8004668 <_printf_float+0x1c8>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	6121      	str	r1, [r4, #16]
 8004660:	07d8      	lsls	r0, r3, #31
 8004662:	d5ea      	bpl.n	800463a <_printf_float+0x19a>
 8004664:	1c4b      	adds	r3, r1, #1
 8004666:	e7e7      	b.n	8004638 <_printf_float+0x198>
 8004668:	2900      	cmp	r1, #0
 800466a:	bfcc      	ite	gt
 800466c:	2201      	movgt	r2, #1
 800466e:	f1c1 0202 	rsble	r2, r1, #2
 8004672:	4413      	add	r3, r2
 8004674:	e7e0      	b.n	8004638 <_printf_float+0x198>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	055a      	lsls	r2, r3, #21
 800467a:	d407      	bmi.n	800468c <_printf_float+0x1ec>
 800467c:	6923      	ldr	r3, [r4, #16]
 800467e:	4642      	mov	r2, r8
 8004680:	4631      	mov	r1, r6
 8004682:	4628      	mov	r0, r5
 8004684:	47b8      	blx	r7
 8004686:	3001      	adds	r0, #1
 8004688:	d12b      	bne.n	80046e2 <_printf_float+0x242>
 800468a:	e764      	b.n	8004556 <_printf_float+0xb6>
 800468c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004690:	f240 80dd 	bls.w	800484e <_printf_float+0x3ae>
 8004694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004698:	2200      	movs	r2, #0
 800469a:	2300      	movs	r3, #0
 800469c:	f7fc f984 	bl	80009a8 <__aeabi_dcmpeq>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d033      	beq.n	800470c <_printf_float+0x26c>
 80046a4:	2301      	movs	r3, #1
 80046a6:	4631      	mov	r1, r6
 80046a8:	4628      	mov	r0, r5
 80046aa:	4a35      	ldr	r2, [pc, #212]	; (8004780 <_printf_float+0x2e0>)
 80046ac:	47b8      	blx	r7
 80046ae:	3001      	adds	r0, #1
 80046b0:	f43f af51 	beq.w	8004556 <_printf_float+0xb6>
 80046b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046b8:	429a      	cmp	r2, r3
 80046ba:	db02      	blt.n	80046c2 <_printf_float+0x222>
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	07d8      	lsls	r0, r3, #31
 80046c0:	d50f      	bpl.n	80046e2 <_printf_float+0x242>
 80046c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046c6:	4631      	mov	r1, r6
 80046c8:	4628      	mov	r0, r5
 80046ca:	47b8      	blx	r7
 80046cc:	3001      	adds	r0, #1
 80046ce:	f43f af42 	beq.w	8004556 <_printf_float+0xb6>
 80046d2:	f04f 0800 	mov.w	r8, #0
 80046d6:	f104 091a 	add.w	r9, r4, #26
 80046da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046dc:	3b01      	subs	r3, #1
 80046de:	4543      	cmp	r3, r8
 80046e0:	dc09      	bgt.n	80046f6 <_printf_float+0x256>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	079b      	lsls	r3, r3, #30
 80046e6:	f100 8102 	bmi.w	80048ee <_printf_float+0x44e>
 80046ea:	68e0      	ldr	r0, [r4, #12]
 80046ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046ee:	4298      	cmp	r0, r3
 80046f0:	bfb8      	it	lt
 80046f2:	4618      	movlt	r0, r3
 80046f4:	e731      	b.n	800455a <_printf_float+0xba>
 80046f6:	2301      	movs	r3, #1
 80046f8:	464a      	mov	r2, r9
 80046fa:	4631      	mov	r1, r6
 80046fc:	4628      	mov	r0, r5
 80046fe:	47b8      	blx	r7
 8004700:	3001      	adds	r0, #1
 8004702:	f43f af28 	beq.w	8004556 <_printf_float+0xb6>
 8004706:	f108 0801 	add.w	r8, r8, #1
 800470a:	e7e6      	b.n	80046da <_printf_float+0x23a>
 800470c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800470e:	2b00      	cmp	r3, #0
 8004710:	dc38      	bgt.n	8004784 <_printf_float+0x2e4>
 8004712:	2301      	movs	r3, #1
 8004714:	4631      	mov	r1, r6
 8004716:	4628      	mov	r0, r5
 8004718:	4a19      	ldr	r2, [pc, #100]	; (8004780 <_printf_float+0x2e0>)
 800471a:	47b8      	blx	r7
 800471c:	3001      	adds	r0, #1
 800471e:	f43f af1a 	beq.w	8004556 <_printf_float+0xb6>
 8004722:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004726:	4313      	orrs	r3, r2
 8004728:	d102      	bne.n	8004730 <_printf_float+0x290>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	07d9      	lsls	r1, r3, #31
 800472e:	d5d8      	bpl.n	80046e2 <_printf_float+0x242>
 8004730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004734:	4631      	mov	r1, r6
 8004736:	4628      	mov	r0, r5
 8004738:	47b8      	blx	r7
 800473a:	3001      	adds	r0, #1
 800473c:	f43f af0b 	beq.w	8004556 <_printf_float+0xb6>
 8004740:	f04f 0900 	mov.w	r9, #0
 8004744:	f104 0a1a 	add.w	sl, r4, #26
 8004748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800474a:	425b      	negs	r3, r3
 800474c:	454b      	cmp	r3, r9
 800474e:	dc01      	bgt.n	8004754 <_printf_float+0x2b4>
 8004750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004752:	e794      	b.n	800467e <_printf_float+0x1de>
 8004754:	2301      	movs	r3, #1
 8004756:	4652      	mov	r2, sl
 8004758:	4631      	mov	r1, r6
 800475a:	4628      	mov	r0, r5
 800475c:	47b8      	blx	r7
 800475e:	3001      	adds	r0, #1
 8004760:	f43f aef9 	beq.w	8004556 <_printf_float+0xb6>
 8004764:	f109 0901 	add.w	r9, r9, #1
 8004768:	e7ee      	b.n	8004748 <_printf_float+0x2a8>
 800476a:	bf00      	nop
 800476c:	7fefffff 	.word	0x7fefffff
 8004770:	080070e8 	.word	0x080070e8
 8004774:	080070ec 	.word	0x080070ec
 8004778:	080070f4 	.word	0x080070f4
 800477c:	080070f0 	.word	0x080070f0
 8004780:	080070f8 	.word	0x080070f8
 8004784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004786:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004788:	429a      	cmp	r2, r3
 800478a:	bfa8      	it	ge
 800478c:	461a      	movge	r2, r3
 800478e:	2a00      	cmp	r2, #0
 8004790:	4691      	mov	r9, r2
 8004792:	dc37      	bgt.n	8004804 <_printf_float+0x364>
 8004794:	f04f 0b00 	mov.w	fp, #0
 8004798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800479c:	f104 021a 	add.w	r2, r4, #26
 80047a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80047a4:	ebaa 0309 	sub.w	r3, sl, r9
 80047a8:	455b      	cmp	r3, fp
 80047aa:	dc33      	bgt.n	8004814 <_printf_float+0x374>
 80047ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047b0:	429a      	cmp	r2, r3
 80047b2:	db3b      	blt.n	800482c <_printf_float+0x38c>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	07da      	lsls	r2, r3, #31
 80047b8:	d438      	bmi.n	800482c <_printf_float+0x38c>
 80047ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047be:	eba2 030a 	sub.w	r3, r2, sl
 80047c2:	eba2 0901 	sub.w	r9, r2, r1
 80047c6:	4599      	cmp	r9, r3
 80047c8:	bfa8      	it	ge
 80047ca:	4699      	movge	r9, r3
 80047cc:	f1b9 0f00 	cmp.w	r9, #0
 80047d0:	dc34      	bgt.n	800483c <_printf_float+0x39c>
 80047d2:	f04f 0800 	mov.w	r8, #0
 80047d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047da:	f104 0a1a 	add.w	sl, r4, #26
 80047de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	eba3 0309 	sub.w	r3, r3, r9
 80047e8:	4543      	cmp	r3, r8
 80047ea:	f77f af7a 	ble.w	80046e2 <_printf_float+0x242>
 80047ee:	2301      	movs	r3, #1
 80047f0:	4652      	mov	r2, sl
 80047f2:	4631      	mov	r1, r6
 80047f4:	4628      	mov	r0, r5
 80047f6:	47b8      	blx	r7
 80047f8:	3001      	adds	r0, #1
 80047fa:	f43f aeac 	beq.w	8004556 <_printf_float+0xb6>
 80047fe:	f108 0801 	add.w	r8, r8, #1
 8004802:	e7ec      	b.n	80047de <_printf_float+0x33e>
 8004804:	4613      	mov	r3, r2
 8004806:	4631      	mov	r1, r6
 8004808:	4642      	mov	r2, r8
 800480a:	4628      	mov	r0, r5
 800480c:	47b8      	blx	r7
 800480e:	3001      	adds	r0, #1
 8004810:	d1c0      	bne.n	8004794 <_printf_float+0x2f4>
 8004812:	e6a0      	b.n	8004556 <_printf_float+0xb6>
 8004814:	2301      	movs	r3, #1
 8004816:	4631      	mov	r1, r6
 8004818:	4628      	mov	r0, r5
 800481a:	920b      	str	r2, [sp, #44]	; 0x2c
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	f43f ae99 	beq.w	8004556 <_printf_float+0xb6>
 8004824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004826:	f10b 0b01 	add.w	fp, fp, #1
 800482a:	e7b9      	b.n	80047a0 <_printf_float+0x300>
 800482c:	4631      	mov	r1, r6
 800482e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004832:	4628      	mov	r0, r5
 8004834:	47b8      	blx	r7
 8004836:	3001      	adds	r0, #1
 8004838:	d1bf      	bne.n	80047ba <_printf_float+0x31a>
 800483a:	e68c      	b.n	8004556 <_printf_float+0xb6>
 800483c:	464b      	mov	r3, r9
 800483e:	4631      	mov	r1, r6
 8004840:	4628      	mov	r0, r5
 8004842:	eb08 020a 	add.w	r2, r8, sl
 8004846:	47b8      	blx	r7
 8004848:	3001      	adds	r0, #1
 800484a:	d1c2      	bne.n	80047d2 <_printf_float+0x332>
 800484c:	e683      	b.n	8004556 <_printf_float+0xb6>
 800484e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004850:	2a01      	cmp	r2, #1
 8004852:	dc01      	bgt.n	8004858 <_printf_float+0x3b8>
 8004854:	07db      	lsls	r3, r3, #31
 8004856:	d537      	bpl.n	80048c8 <_printf_float+0x428>
 8004858:	2301      	movs	r3, #1
 800485a:	4642      	mov	r2, r8
 800485c:	4631      	mov	r1, r6
 800485e:	4628      	mov	r0, r5
 8004860:	47b8      	blx	r7
 8004862:	3001      	adds	r0, #1
 8004864:	f43f ae77 	beq.w	8004556 <_printf_float+0xb6>
 8004868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800486c:	4631      	mov	r1, r6
 800486e:	4628      	mov	r0, r5
 8004870:	47b8      	blx	r7
 8004872:	3001      	adds	r0, #1
 8004874:	f43f ae6f 	beq.w	8004556 <_printf_float+0xb6>
 8004878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800487c:	2200      	movs	r2, #0
 800487e:	2300      	movs	r3, #0
 8004880:	f7fc f892 	bl	80009a8 <__aeabi_dcmpeq>
 8004884:	b9d8      	cbnz	r0, 80048be <_printf_float+0x41e>
 8004886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004888:	f108 0201 	add.w	r2, r8, #1
 800488c:	3b01      	subs	r3, #1
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	47b8      	blx	r7
 8004894:	3001      	adds	r0, #1
 8004896:	d10e      	bne.n	80048b6 <_printf_float+0x416>
 8004898:	e65d      	b.n	8004556 <_printf_float+0xb6>
 800489a:	2301      	movs	r3, #1
 800489c:	464a      	mov	r2, r9
 800489e:	4631      	mov	r1, r6
 80048a0:	4628      	mov	r0, r5
 80048a2:	47b8      	blx	r7
 80048a4:	3001      	adds	r0, #1
 80048a6:	f43f ae56 	beq.w	8004556 <_printf_float+0xb6>
 80048aa:	f108 0801 	add.w	r8, r8, #1
 80048ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048b0:	3b01      	subs	r3, #1
 80048b2:	4543      	cmp	r3, r8
 80048b4:	dcf1      	bgt.n	800489a <_printf_float+0x3fa>
 80048b6:	4653      	mov	r3, sl
 80048b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048bc:	e6e0      	b.n	8004680 <_printf_float+0x1e0>
 80048be:	f04f 0800 	mov.w	r8, #0
 80048c2:	f104 091a 	add.w	r9, r4, #26
 80048c6:	e7f2      	b.n	80048ae <_printf_float+0x40e>
 80048c8:	2301      	movs	r3, #1
 80048ca:	4642      	mov	r2, r8
 80048cc:	e7df      	b.n	800488e <_printf_float+0x3ee>
 80048ce:	2301      	movs	r3, #1
 80048d0:	464a      	mov	r2, r9
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b8      	blx	r7
 80048d8:	3001      	adds	r0, #1
 80048da:	f43f ae3c 	beq.w	8004556 <_printf_float+0xb6>
 80048de:	f108 0801 	add.w	r8, r8, #1
 80048e2:	68e3      	ldr	r3, [r4, #12]
 80048e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048e6:	1a5b      	subs	r3, r3, r1
 80048e8:	4543      	cmp	r3, r8
 80048ea:	dcf0      	bgt.n	80048ce <_printf_float+0x42e>
 80048ec:	e6fd      	b.n	80046ea <_printf_float+0x24a>
 80048ee:	f04f 0800 	mov.w	r8, #0
 80048f2:	f104 0919 	add.w	r9, r4, #25
 80048f6:	e7f4      	b.n	80048e2 <_printf_float+0x442>

080048f8 <_printf_common>:
 80048f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048fc:	4616      	mov	r6, r2
 80048fe:	4699      	mov	r9, r3
 8004900:	688a      	ldr	r2, [r1, #8]
 8004902:	690b      	ldr	r3, [r1, #16]
 8004904:	4607      	mov	r7, r0
 8004906:	4293      	cmp	r3, r2
 8004908:	bfb8      	it	lt
 800490a:	4613      	movlt	r3, r2
 800490c:	6033      	str	r3, [r6, #0]
 800490e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004912:	460c      	mov	r4, r1
 8004914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004918:	b10a      	cbz	r2, 800491e <_printf_common+0x26>
 800491a:	3301      	adds	r3, #1
 800491c:	6033      	str	r3, [r6, #0]
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	0699      	lsls	r1, r3, #26
 8004922:	bf42      	ittt	mi
 8004924:	6833      	ldrmi	r3, [r6, #0]
 8004926:	3302      	addmi	r3, #2
 8004928:	6033      	strmi	r3, [r6, #0]
 800492a:	6825      	ldr	r5, [r4, #0]
 800492c:	f015 0506 	ands.w	r5, r5, #6
 8004930:	d106      	bne.n	8004940 <_printf_common+0x48>
 8004932:	f104 0a19 	add.w	sl, r4, #25
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	6832      	ldr	r2, [r6, #0]
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	42ab      	cmp	r3, r5
 800493e:	dc28      	bgt.n	8004992 <_printf_common+0x9a>
 8004940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004944:	1e13      	subs	r3, r2, #0
 8004946:	6822      	ldr	r2, [r4, #0]
 8004948:	bf18      	it	ne
 800494a:	2301      	movne	r3, #1
 800494c:	0692      	lsls	r2, r2, #26
 800494e:	d42d      	bmi.n	80049ac <_printf_common+0xb4>
 8004950:	4649      	mov	r1, r9
 8004952:	4638      	mov	r0, r7
 8004954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004958:	47c0      	blx	r8
 800495a:	3001      	adds	r0, #1
 800495c:	d020      	beq.n	80049a0 <_printf_common+0xa8>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	68e5      	ldr	r5, [r4, #12]
 8004962:	f003 0306 	and.w	r3, r3, #6
 8004966:	2b04      	cmp	r3, #4
 8004968:	bf18      	it	ne
 800496a:	2500      	movne	r5, #0
 800496c:	6832      	ldr	r2, [r6, #0]
 800496e:	f04f 0600 	mov.w	r6, #0
 8004972:	68a3      	ldr	r3, [r4, #8]
 8004974:	bf08      	it	eq
 8004976:	1aad      	subeq	r5, r5, r2
 8004978:	6922      	ldr	r2, [r4, #16]
 800497a:	bf08      	it	eq
 800497c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004980:	4293      	cmp	r3, r2
 8004982:	bfc4      	itt	gt
 8004984:	1a9b      	subgt	r3, r3, r2
 8004986:	18ed      	addgt	r5, r5, r3
 8004988:	341a      	adds	r4, #26
 800498a:	42b5      	cmp	r5, r6
 800498c:	d11a      	bne.n	80049c4 <_printf_common+0xcc>
 800498e:	2000      	movs	r0, #0
 8004990:	e008      	b.n	80049a4 <_printf_common+0xac>
 8004992:	2301      	movs	r3, #1
 8004994:	4652      	mov	r2, sl
 8004996:	4649      	mov	r1, r9
 8004998:	4638      	mov	r0, r7
 800499a:	47c0      	blx	r8
 800499c:	3001      	adds	r0, #1
 800499e:	d103      	bne.n	80049a8 <_printf_common+0xb0>
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a8:	3501      	adds	r5, #1
 80049aa:	e7c4      	b.n	8004936 <_printf_common+0x3e>
 80049ac:	2030      	movs	r0, #48	; 0x30
 80049ae:	18e1      	adds	r1, r4, r3
 80049b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049ba:	4422      	add	r2, r4
 80049bc:	3302      	adds	r3, #2
 80049be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049c2:	e7c5      	b.n	8004950 <_printf_common+0x58>
 80049c4:	2301      	movs	r3, #1
 80049c6:	4622      	mov	r2, r4
 80049c8:	4649      	mov	r1, r9
 80049ca:	4638      	mov	r0, r7
 80049cc:	47c0      	blx	r8
 80049ce:	3001      	adds	r0, #1
 80049d0:	d0e6      	beq.n	80049a0 <_printf_common+0xa8>
 80049d2:	3601      	adds	r6, #1
 80049d4:	e7d9      	b.n	800498a <_printf_common+0x92>
	...

080049d8 <_printf_i>:
 80049d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049dc:	460c      	mov	r4, r1
 80049de:	7e27      	ldrb	r7, [r4, #24]
 80049e0:	4691      	mov	r9, r2
 80049e2:	2f78      	cmp	r7, #120	; 0x78
 80049e4:	4680      	mov	r8, r0
 80049e6:	469a      	mov	sl, r3
 80049e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049ee:	d807      	bhi.n	8004a00 <_printf_i+0x28>
 80049f0:	2f62      	cmp	r7, #98	; 0x62
 80049f2:	d80a      	bhi.n	8004a0a <_printf_i+0x32>
 80049f4:	2f00      	cmp	r7, #0
 80049f6:	f000 80d9 	beq.w	8004bac <_printf_i+0x1d4>
 80049fa:	2f58      	cmp	r7, #88	; 0x58
 80049fc:	f000 80a4 	beq.w	8004b48 <_printf_i+0x170>
 8004a00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a08:	e03a      	b.n	8004a80 <_printf_i+0xa8>
 8004a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a0e:	2b15      	cmp	r3, #21
 8004a10:	d8f6      	bhi.n	8004a00 <_printf_i+0x28>
 8004a12:	a001      	add	r0, pc, #4	; (adr r0, 8004a18 <_printf_i+0x40>)
 8004a14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a18:	08004a71 	.word	0x08004a71
 8004a1c:	08004a85 	.word	0x08004a85
 8004a20:	08004a01 	.word	0x08004a01
 8004a24:	08004a01 	.word	0x08004a01
 8004a28:	08004a01 	.word	0x08004a01
 8004a2c:	08004a01 	.word	0x08004a01
 8004a30:	08004a85 	.word	0x08004a85
 8004a34:	08004a01 	.word	0x08004a01
 8004a38:	08004a01 	.word	0x08004a01
 8004a3c:	08004a01 	.word	0x08004a01
 8004a40:	08004a01 	.word	0x08004a01
 8004a44:	08004b93 	.word	0x08004b93
 8004a48:	08004ab5 	.word	0x08004ab5
 8004a4c:	08004b75 	.word	0x08004b75
 8004a50:	08004a01 	.word	0x08004a01
 8004a54:	08004a01 	.word	0x08004a01
 8004a58:	08004bb5 	.word	0x08004bb5
 8004a5c:	08004a01 	.word	0x08004a01
 8004a60:	08004ab5 	.word	0x08004ab5
 8004a64:	08004a01 	.word	0x08004a01
 8004a68:	08004a01 	.word	0x08004a01
 8004a6c:	08004b7d 	.word	0x08004b7d
 8004a70:	680b      	ldr	r3, [r1, #0]
 8004a72:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a76:	1d1a      	adds	r2, r3, #4
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	600a      	str	r2, [r1, #0]
 8004a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0a4      	b.n	8004bce <_printf_i+0x1f6>
 8004a84:	6825      	ldr	r5, [r4, #0]
 8004a86:	6808      	ldr	r0, [r1, #0]
 8004a88:	062e      	lsls	r6, r5, #24
 8004a8a:	f100 0304 	add.w	r3, r0, #4
 8004a8e:	d50a      	bpl.n	8004aa6 <_printf_i+0xce>
 8004a90:	6805      	ldr	r5, [r0, #0]
 8004a92:	600b      	str	r3, [r1, #0]
 8004a94:	2d00      	cmp	r5, #0
 8004a96:	da03      	bge.n	8004aa0 <_printf_i+0xc8>
 8004a98:	232d      	movs	r3, #45	; 0x2d
 8004a9a:	426d      	negs	r5, r5
 8004a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa0:	230a      	movs	r3, #10
 8004aa2:	485e      	ldr	r0, [pc, #376]	; (8004c1c <_printf_i+0x244>)
 8004aa4:	e019      	b.n	8004ada <_printf_i+0x102>
 8004aa6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004aaa:	6805      	ldr	r5, [r0, #0]
 8004aac:	600b      	str	r3, [r1, #0]
 8004aae:	bf18      	it	ne
 8004ab0:	b22d      	sxthne	r5, r5
 8004ab2:	e7ef      	b.n	8004a94 <_printf_i+0xbc>
 8004ab4:	680b      	ldr	r3, [r1, #0]
 8004ab6:	6825      	ldr	r5, [r4, #0]
 8004ab8:	1d18      	adds	r0, r3, #4
 8004aba:	6008      	str	r0, [r1, #0]
 8004abc:	0628      	lsls	r0, r5, #24
 8004abe:	d501      	bpl.n	8004ac4 <_printf_i+0xec>
 8004ac0:	681d      	ldr	r5, [r3, #0]
 8004ac2:	e002      	b.n	8004aca <_printf_i+0xf2>
 8004ac4:	0669      	lsls	r1, r5, #25
 8004ac6:	d5fb      	bpl.n	8004ac0 <_printf_i+0xe8>
 8004ac8:	881d      	ldrh	r5, [r3, #0]
 8004aca:	2f6f      	cmp	r7, #111	; 0x6f
 8004acc:	bf0c      	ite	eq
 8004ace:	2308      	moveq	r3, #8
 8004ad0:	230a      	movne	r3, #10
 8004ad2:	4852      	ldr	r0, [pc, #328]	; (8004c1c <_printf_i+0x244>)
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ada:	6866      	ldr	r6, [r4, #4]
 8004adc:	2e00      	cmp	r6, #0
 8004ade:	bfa8      	it	ge
 8004ae0:	6821      	ldrge	r1, [r4, #0]
 8004ae2:	60a6      	str	r6, [r4, #8]
 8004ae4:	bfa4      	itt	ge
 8004ae6:	f021 0104 	bicge.w	r1, r1, #4
 8004aea:	6021      	strge	r1, [r4, #0]
 8004aec:	b90d      	cbnz	r5, 8004af2 <_printf_i+0x11a>
 8004aee:	2e00      	cmp	r6, #0
 8004af0:	d04d      	beq.n	8004b8e <_printf_i+0x1b6>
 8004af2:	4616      	mov	r6, r2
 8004af4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004af8:	fb03 5711 	mls	r7, r3, r1, r5
 8004afc:	5dc7      	ldrb	r7, [r0, r7]
 8004afe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b02:	462f      	mov	r7, r5
 8004b04:	42bb      	cmp	r3, r7
 8004b06:	460d      	mov	r5, r1
 8004b08:	d9f4      	bls.n	8004af4 <_printf_i+0x11c>
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d10b      	bne.n	8004b26 <_printf_i+0x14e>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	07df      	lsls	r7, r3, #31
 8004b12:	d508      	bpl.n	8004b26 <_printf_i+0x14e>
 8004b14:	6923      	ldr	r3, [r4, #16]
 8004b16:	6861      	ldr	r1, [r4, #4]
 8004b18:	4299      	cmp	r1, r3
 8004b1a:	bfde      	ittt	le
 8004b1c:	2330      	movle	r3, #48	; 0x30
 8004b1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b26:	1b92      	subs	r2, r2, r6
 8004b28:	6122      	str	r2, [r4, #16]
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4640      	mov	r0, r8
 8004b30:	f8cd a000 	str.w	sl, [sp]
 8004b34:	aa03      	add	r2, sp, #12
 8004b36:	f7ff fedf 	bl	80048f8 <_printf_common>
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	d14c      	bne.n	8004bd8 <_printf_i+0x200>
 8004b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b42:	b004      	add	sp, #16
 8004b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b48:	4834      	ldr	r0, [pc, #208]	; (8004c1c <_printf_i+0x244>)
 8004b4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b4e:	680e      	ldr	r6, [r1, #0]
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b56:	061f      	lsls	r7, r3, #24
 8004b58:	600e      	str	r6, [r1, #0]
 8004b5a:	d514      	bpl.n	8004b86 <_printf_i+0x1ae>
 8004b5c:	07d9      	lsls	r1, r3, #31
 8004b5e:	bf44      	itt	mi
 8004b60:	f043 0320 	orrmi.w	r3, r3, #32
 8004b64:	6023      	strmi	r3, [r4, #0]
 8004b66:	b91d      	cbnz	r5, 8004b70 <_printf_i+0x198>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	f023 0320 	bic.w	r3, r3, #32
 8004b6e:	6023      	str	r3, [r4, #0]
 8004b70:	2310      	movs	r3, #16
 8004b72:	e7af      	b.n	8004ad4 <_printf_i+0xfc>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	f043 0320 	orr.w	r3, r3, #32
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	2378      	movs	r3, #120	; 0x78
 8004b7e:	4828      	ldr	r0, [pc, #160]	; (8004c20 <_printf_i+0x248>)
 8004b80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b84:	e7e3      	b.n	8004b4e <_printf_i+0x176>
 8004b86:	065e      	lsls	r6, r3, #25
 8004b88:	bf48      	it	mi
 8004b8a:	b2ad      	uxthmi	r5, r5
 8004b8c:	e7e6      	b.n	8004b5c <_printf_i+0x184>
 8004b8e:	4616      	mov	r6, r2
 8004b90:	e7bb      	b.n	8004b0a <_printf_i+0x132>
 8004b92:	680b      	ldr	r3, [r1, #0]
 8004b94:	6826      	ldr	r6, [r4, #0]
 8004b96:	1d1d      	adds	r5, r3, #4
 8004b98:	6960      	ldr	r0, [r4, #20]
 8004b9a:	600d      	str	r5, [r1, #0]
 8004b9c:	0635      	lsls	r5, r6, #24
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	d501      	bpl.n	8004ba6 <_printf_i+0x1ce>
 8004ba2:	6018      	str	r0, [r3, #0]
 8004ba4:	e002      	b.n	8004bac <_printf_i+0x1d4>
 8004ba6:	0671      	lsls	r1, r6, #25
 8004ba8:	d5fb      	bpl.n	8004ba2 <_printf_i+0x1ca>
 8004baa:	8018      	strh	r0, [r3, #0]
 8004bac:	2300      	movs	r3, #0
 8004bae:	4616      	mov	r6, r2
 8004bb0:	6123      	str	r3, [r4, #16]
 8004bb2:	e7ba      	b.n	8004b2a <_printf_i+0x152>
 8004bb4:	680b      	ldr	r3, [r1, #0]
 8004bb6:	1d1a      	adds	r2, r3, #4
 8004bb8:	600a      	str	r2, [r1, #0]
 8004bba:	681e      	ldr	r6, [r3, #0]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	6862      	ldr	r2, [r4, #4]
 8004bc2:	f000 fed7 	bl	8005974 <memchr>
 8004bc6:	b108      	cbz	r0, 8004bcc <_printf_i+0x1f4>
 8004bc8:	1b80      	subs	r0, r0, r6
 8004bca:	6060      	str	r0, [r4, #4]
 8004bcc:	6863      	ldr	r3, [r4, #4]
 8004bce:	6123      	str	r3, [r4, #16]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd6:	e7a8      	b.n	8004b2a <_printf_i+0x152>
 8004bd8:	4632      	mov	r2, r6
 8004bda:	4649      	mov	r1, r9
 8004bdc:	4640      	mov	r0, r8
 8004bde:	6923      	ldr	r3, [r4, #16]
 8004be0:	47d0      	blx	sl
 8004be2:	3001      	adds	r0, #1
 8004be4:	d0ab      	beq.n	8004b3e <_printf_i+0x166>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	079b      	lsls	r3, r3, #30
 8004bea:	d413      	bmi.n	8004c14 <_printf_i+0x23c>
 8004bec:	68e0      	ldr	r0, [r4, #12]
 8004bee:	9b03      	ldr	r3, [sp, #12]
 8004bf0:	4298      	cmp	r0, r3
 8004bf2:	bfb8      	it	lt
 8004bf4:	4618      	movlt	r0, r3
 8004bf6:	e7a4      	b.n	8004b42 <_printf_i+0x16a>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	4632      	mov	r2, r6
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	4640      	mov	r0, r8
 8004c00:	47d0      	blx	sl
 8004c02:	3001      	adds	r0, #1
 8004c04:	d09b      	beq.n	8004b3e <_printf_i+0x166>
 8004c06:	3501      	adds	r5, #1
 8004c08:	68e3      	ldr	r3, [r4, #12]
 8004c0a:	9903      	ldr	r1, [sp, #12]
 8004c0c:	1a5b      	subs	r3, r3, r1
 8004c0e:	42ab      	cmp	r3, r5
 8004c10:	dcf2      	bgt.n	8004bf8 <_printf_i+0x220>
 8004c12:	e7eb      	b.n	8004bec <_printf_i+0x214>
 8004c14:	2500      	movs	r5, #0
 8004c16:	f104 0619 	add.w	r6, r4, #25
 8004c1a:	e7f5      	b.n	8004c08 <_printf_i+0x230>
 8004c1c:	080070fa 	.word	0x080070fa
 8004c20:	0800710b 	.word	0x0800710b

08004c24 <siprintf>:
 8004c24:	b40e      	push	{r1, r2, r3}
 8004c26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c2a:	b500      	push	{lr}
 8004c2c:	b09c      	sub	sp, #112	; 0x70
 8004c2e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c30:	9002      	str	r0, [sp, #8]
 8004c32:	9006      	str	r0, [sp, #24]
 8004c34:	9107      	str	r1, [sp, #28]
 8004c36:	9104      	str	r1, [sp, #16]
 8004c38:	4808      	ldr	r0, [pc, #32]	; (8004c5c <siprintf+0x38>)
 8004c3a:	4909      	ldr	r1, [pc, #36]	; (8004c60 <siprintf+0x3c>)
 8004c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c40:	9105      	str	r1, [sp, #20]
 8004c42:	6800      	ldr	r0, [r0, #0]
 8004c44:	a902      	add	r1, sp, #8
 8004c46:	9301      	str	r3, [sp, #4]
 8004c48:	f001 fb42 	bl	80062d0 <_svfiprintf_r>
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	9b02      	ldr	r3, [sp, #8]
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	b01c      	add	sp, #112	; 0x70
 8004c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c58:	b003      	add	sp, #12
 8004c5a:	4770      	bx	lr
 8004c5c:	2000000c 	.word	0x2000000c
 8004c60:	ffff0208 	.word	0xffff0208

08004c64 <quorem>:
 8004c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c68:	6903      	ldr	r3, [r0, #16]
 8004c6a:	690c      	ldr	r4, [r1, #16]
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	42a3      	cmp	r3, r4
 8004c70:	f2c0 8083 	blt.w	8004d7a <quorem+0x116>
 8004c74:	3c01      	subs	r4, #1
 8004c76:	f100 0514 	add.w	r5, r0, #20
 8004c7a:	f101 0814 	add.w	r8, r1, #20
 8004c7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004c98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c9c:	d332      	bcc.n	8004d04 <quorem+0xa0>
 8004c9e:	f04f 0e00 	mov.w	lr, #0
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	46ac      	mov	ip, r5
 8004ca6:	46f2      	mov	sl, lr
 8004ca8:	f850 2b04 	ldr.w	r2, [r0], #4
 8004cac:	b293      	uxth	r3, r2
 8004cae:	fb06 e303 	mla	r3, r6, r3, lr
 8004cb2:	0c12      	lsrs	r2, r2, #16
 8004cb4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004cb8:	fb06 e202 	mla	r2, r6, r2, lr
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	ebaa 0303 	sub.w	r3, sl, r3
 8004cc2:	f8dc a000 	ldr.w	sl, [ip]
 8004cc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004cca:	fa1f fa8a 	uxth.w	sl, sl
 8004cce:	4453      	add	r3, sl
 8004cd0:	fa1f fa82 	uxth.w	sl, r2
 8004cd4:	f8dc 2000 	ldr.w	r2, [ip]
 8004cd8:	4581      	cmp	r9, r0
 8004cda:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004cde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ce8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004cec:	f84c 3b04 	str.w	r3, [ip], #4
 8004cf0:	d2da      	bcs.n	8004ca8 <quorem+0x44>
 8004cf2:	f855 300b 	ldr.w	r3, [r5, fp]
 8004cf6:	b92b      	cbnz	r3, 8004d04 <quorem+0xa0>
 8004cf8:	9b01      	ldr	r3, [sp, #4]
 8004cfa:	3b04      	subs	r3, #4
 8004cfc:	429d      	cmp	r5, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	d32f      	bcc.n	8004d62 <quorem+0xfe>
 8004d02:	613c      	str	r4, [r7, #16]
 8004d04:	4638      	mov	r0, r7
 8004d06:	f001 f8cb 	bl	8005ea0 <__mcmp>
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	db25      	blt.n	8004d5a <quorem+0xf6>
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f04f 0c00 	mov.w	ip, #0
 8004d14:	3601      	adds	r6, #1
 8004d16:	f858 1b04 	ldr.w	r1, [r8], #4
 8004d1a:	f8d0 e000 	ldr.w	lr, [r0]
 8004d1e:	b28b      	uxth	r3, r1
 8004d20:	ebac 0303 	sub.w	r3, ip, r3
 8004d24:	fa1f f28e 	uxth.w	r2, lr
 8004d28:	4413      	add	r3, r2
 8004d2a:	0c0a      	lsrs	r2, r1, #16
 8004d2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d3a:	45c1      	cmp	r9, r8
 8004d3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d40:	f840 3b04 	str.w	r3, [r0], #4
 8004d44:	d2e7      	bcs.n	8004d16 <quorem+0xb2>
 8004d46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d4e:	b922      	cbnz	r2, 8004d5a <quorem+0xf6>
 8004d50:	3b04      	subs	r3, #4
 8004d52:	429d      	cmp	r5, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	d30a      	bcc.n	8004d6e <quorem+0x10a>
 8004d58:	613c      	str	r4, [r7, #16]
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	b003      	add	sp, #12
 8004d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	3b04      	subs	r3, #4
 8004d66:	2a00      	cmp	r2, #0
 8004d68:	d1cb      	bne.n	8004d02 <quorem+0x9e>
 8004d6a:	3c01      	subs	r4, #1
 8004d6c:	e7c6      	b.n	8004cfc <quorem+0x98>
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	3b04      	subs	r3, #4
 8004d72:	2a00      	cmp	r2, #0
 8004d74:	d1f0      	bne.n	8004d58 <quorem+0xf4>
 8004d76:	3c01      	subs	r4, #1
 8004d78:	e7eb      	b.n	8004d52 <quorem+0xee>
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	e7ee      	b.n	8004d5c <quorem+0xf8>
	...

08004d80 <_dtoa_r>:
 8004d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	4616      	mov	r6, r2
 8004d86:	461f      	mov	r7, r3
 8004d88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004d8a:	b099      	sub	sp, #100	; 0x64
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004d96:	b974      	cbnz	r4, 8004db6 <_dtoa_r+0x36>
 8004d98:	2010      	movs	r0, #16
 8004d9a:	f000 fde3 	bl	8005964 <malloc>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	6268      	str	r0, [r5, #36]	; 0x24
 8004da2:	b920      	cbnz	r0, 8004dae <_dtoa_r+0x2e>
 8004da4:	21ea      	movs	r1, #234	; 0xea
 8004da6:	4bae      	ldr	r3, [pc, #696]	; (8005060 <_dtoa_r+0x2e0>)
 8004da8:	48ae      	ldr	r0, [pc, #696]	; (8005064 <_dtoa_r+0x2e4>)
 8004daa:	f001 fba1 	bl	80064f0 <__assert_func>
 8004dae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004db2:	6004      	str	r4, [r0, #0]
 8004db4:	60c4      	str	r4, [r0, #12]
 8004db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004db8:	6819      	ldr	r1, [r3, #0]
 8004dba:	b151      	cbz	r1, 8004dd2 <_dtoa_r+0x52>
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4093      	lsls	r3, r2
 8004dc2:	604a      	str	r2, [r1, #4]
 8004dc4:	608b      	str	r3, [r1, #8]
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 fe30 	bl	8005a2c <_Bfree>
 8004dcc:	2200      	movs	r2, #0
 8004dce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	1e3b      	subs	r3, r7, #0
 8004dd4:	bfaf      	iteee	ge
 8004dd6:	2300      	movge	r3, #0
 8004dd8:	2201      	movlt	r2, #1
 8004dda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004dde:	9305      	strlt	r3, [sp, #20]
 8004de0:	bfa8      	it	ge
 8004de2:	f8c8 3000 	strge.w	r3, [r8]
 8004de6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004dea:	4b9f      	ldr	r3, [pc, #636]	; (8005068 <_dtoa_r+0x2e8>)
 8004dec:	bfb8      	it	lt
 8004dee:	f8c8 2000 	strlt.w	r2, [r8]
 8004df2:	ea33 0309 	bics.w	r3, r3, r9
 8004df6:	d119      	bne.n	8004e2c <_dtoa_r+0xac>
 8004df8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004dfc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e04:	4333      	orrs	r3, r6
 8004e06:	f000 8580 	beq.w	800590a <_dtoa_r+0xb8a>
 8004e0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e0c:	b953      	cbnz	r3, 8004e24 <_dtoa_r+0xa4>
 8004e0e:	4b97      	ldr	r3, [pc, #604]	; (800506c <_dtoa_r+0x2ec>)
 8004e10:	e022      	b.n	8004e58 <_dtoa_r+0xd8>
 8004e12:	4b97      	ldr	r3, [pc, #604]	; (8005070 <_dtoa_r+0x2f0>)
 8004e14:	9308      	str	r3, [sp, #32]
 8004e16:	3308      	adds	r3, #8
 8004e18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	9808      	ldr	r0, [sp, #32]
 8004e1e:	b019      	add	sp, #100	; 0x64
 8004e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e24:	4b91      	ldr	r3, [pc, #580]	; (800506c <_dtoa_r+0x2ec>)
 8004e26:	9308      	str	r3, [sp, #32]
 8004e28:	3303      	adds	r3, #3
 8004e2a:	e7f5      	b.n	8004e18 <_dtoa_r+0x98>
 8004e2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004e34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f7fb fdb4 	bl	80009a8 <__aeabi_dcmpeq>
 8004e40:	4680      	mov	r8, r0
 8004e42:	b158      	cbz	r0, 8004e5c <_dtoa_r+0xdc>
 8004e44:	2301      	movs	r3, #1
 8004e46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8559 	beq.w	8005904 <_dtoa_r+0xb84>
 8004e52:	4888      	ldr	r0, [pc, #544]	; (8005074 <_dtoa_r+0x2f4>)
 8004e54:	6018      	str	r0, [r3, #0]
 8004e56:	1e43      	subs	r3, r0, #1
 8004e58:	9308      	str	r3, [sp, #32]
 8004e5a:	e7df      	b.n	8004e1c <_dtoa_r+0x9c>
 8004e5c:	ab16      	add	r3, sp, #88	; 0x58
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	ab17      	add	r3, sp, #92	; 0x5c
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	4628      	mov	r0, r5
 8004e66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e6a:	f001 f8c5 	bl	8005ff8 <__d2b>
 8004e6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e72:	4682      	mov	sl, r0
 8004e74:	2c00      	cmp	r4, #0
 8004e76:	d07e      	beq.n	8004f76 <_dtoa_r+0x1f6>
 8004e78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e7e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e86:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004e8a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e8e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e92:	2200      	movs	r2, #0
 8004e94:	4b78      	ldr	r3, [pc, #480]	; (8005078 <_dtoa_r+0x2f8>)
 8004e96:	f7fb f967 	bl	8000168 <__aeabi_dsub>
 8004e9a:	a36b      	add	r3, pc, #428	; (adr r3, 8005048 <_dtoa_r+0x2c8>)
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	f7fb fb1a 	bl	80004d8 <__aeabi_dmul>
 8004ea4:	a36a      	add	r3, pc, #424	; (adr r3, 8005050 <_dtoa_r+0x2d0>)
 8004ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eaa:	f7fb f95f 	bl	800016c <__adddf3>
 8004eae:	4606      	mov	r6, r0
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	460f      	mov	r7, r1
 8004eb4:	f7fb faa6 	bl	8000404 <__aeabi_i2d>
 8004eb8:	a367      	add	r3, pc, #412	; (adr r3, 8005058 <_dtoa_r+0x2d8>)
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	f7fb fb0b 	bl	80004d8 <__aeabi_dmul>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	4639      	mov	r1, r7
 8004eca:	f7fb f94f 	bl	800016c <__adddf3>
 8004ece:	4606      	mov	r6, r0
 8004ed0:	460f      	mov	r7, r1
 8004ed2:	f7fb fdb1 	bl	8000a38 <__aeabi_d2iz>
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	4681      	mov	r9, r0
 8004eda:	2300      	movs	r3, #0
 8004edc:	4630      	mov	r0, r6
 8004ede:	4639      	mov	r1, r7
 8004ee0:	f7fb fd6c 	bl	80009bc <__aeabi_dcmplt>
 8004ee4:	b148      	cbz	r0, 8004efa <_dtoa_r+0x17a>
 8004ee6:	4648      	mov	r0, r9
 8004ee8:	f7fb fa8c 	bl	8000404 <__aeabi_i2d>
 8004eec:	4632      	mov	r2, r6
 8004eee:	463b      	mov	r3, r7
 8004ef0:	f7fb fd5a 	bl	80009a8 <__aeabi_dcmpeq>
 8004ef4:	b908      	cbnz	r0, 8004efa <_dtoa_r+0x17a>
 8004ef6:	f109 39ff 	add.w	r9, r9, #4294967295
 8004efa:	f1b9 0f16 	cmp.w	r9, #22
 8004efe:	d857      	bhi.n	8004fb0 <_dtoa_r+0x230>
 8004f00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f04:	4b5d      	ldr	r3, [pc, #372]	; (800507c <_dtoa_r+0x2fc>)
 8004f06:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f7fb fd55 	bl	80009bc <__aeabi_dcmplt>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d04e      	beq.n	8004fb4 <_dtoa_r+0x234>
 8004f16:	2300      	movs	r3, #0
 8004f18:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f20:	1b1c      	subs	r4, r3, r4
 8004f22:	1e63      	subs	r3, r4, #1
 8004f24:	9309      	str	r3, [sp, #36]	; 0x24
 8004f26:	bf49      	itett	mi
 8004f28:	f1c4 0301 	rsbmi	r3, r4, #1
 8004f2c:	2300      	movpl	r3, #0
 8004f2e:	9306      	strmi	r3, [sp, #24]
 8004f30:	2300      	movmi	r3, #0
 8004f32:	bf54      	ite	pl
 8004f34:	9306      	strpl	r3, [sp, #24]
 8004f36:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004f38:	f1b9 0f00 	cmp.w	r9, #0
 8004f3c:	db3c      	blt.n	8004fb8 <_dtoa_r+0x238>
 8004f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f40:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004f44:	444b      	add	r3, r9
 8004f46:	9309      	str	r3, [sp, #36]	; 0x24
 8004f48:	2300      	movs	r3, #0
 8004f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f4e:	2b09      	cmp	r3, #9
 8004f50:	d86c      	bhi.n	800502c <_dtoa_r+0x2ac>
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	bfc4      	itt	gt
 8004f56:	3b04      	subgt	r3, #4
 8004f58:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004f5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f5c:	bfc8      	it	gt
 8004f5e:	2400      	movgt	r4, #0
 8004f60:	f1a3 0302 	sub.w	r3, r3, #2
 8004f64:	bfd8      	it	le
 8004f66:	2401      	movle	r4, #1
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	f200 808b 	bhi.w	8005084 <_dtoa_r+0x304>
 8004f6e:	e8df f003 	tbb	[pc, r3]
 8004f72:	4f2d      	.short	0x4f2d
 8004f74:	5b4d      	.short	0x5b4d
 8004f76:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004f7a:	441c      	add	r4, r3
 8004f7c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	bfc3      	ittte	gt
 8004f84:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004f88:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004f8c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004f90:	f1c3 0320 	rsble	r3, r3, #32
 8004f94:	bfc6      	itte	gt
 8004f96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004f9a:	4318      	orrgt	r0, r3
 8004f9c:	fa06 f003 	lslle.w	r0, r6, r3
 8004fa0:	f7fb fa20 	bl	80003e4 <__aeabi_ui2d>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004faa:	3c01      	subs	r4, #1
 8004fac:	9313      	str	r3, [sp, #76]	; 0x4c
 8004fae:	e770      	b.n	8004e92 <_dtoa_r+0x112>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e7b3      	b.n	8004f1c <_dtoa_r+0x19c>
 8004fb4:	900f      	str	r0, [sp, #60]	; 0x3c
 8004fb6:	e7b2      	b.n	8004f1e <_dtoa_r+0x19e>
 8004fb8:	9b06      	ldr	r3, [sp, #24]
 8004fba:	eba3 0309 	sub.w	r3, r3, r9
 8004fbe:	9306      	str	r3, [sp, #24]
 8004fc0:	f1c9 0300 	rsb	r3, r9, #0
 8004fc4:	930a      	str	r3, [sp, #40]	; 0x28
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	930e      	str	r3, [sp, #56]	; 0x38
 8004fca:	e7bf      	b.n	8004f4c <_dtoa_r+0x1cc>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	dc59      	bgt.n	800508a <_dtoa_r+0x30a>
 8004fd6:	f04f 0b01 	mov.w	fp, #1
 8004fda:	465b      	mov	r3, fp
 8004fdc:	f8cd b008 	str.w	fp, [sp, #8]
 8004fe0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004fe8:	6042      	str	r2, [r0, #4]
 8004fea:	2204      	movs	r2, #4
 8004fec:	f102 0614 	add.w	r6, r2, #20
 8004ff0:	429e      	cmp	r6, r3
 8004ff2:	6841      	ldr	r1, [r0, #4]
 8004ff4:	d94f      	bls.n	8005096 <_dtoa_r+0x316>
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 fcd8 	bl	80059ac <_Balloc>
 8004ffc:	9008      	str	r0, [sp, #32]
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d14d      	bne.n	800509e <_dtoa_r+0x31e>
 8005002:	4602      	mov	r2, r0
 8005004:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005008:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <_dtoa_r+0x300>)
 800500a:	e6cd      	b.n	8004da8 <_dtoa_r+0x28>
 800500c:	2301      	movs	r3, #1
 800500e:	e7de      	b.n	8004fce <_dtoa_r+0x24e>
 8005010:	2300      	movs	r3, #0
 8005012:	930b      	str	r3, [sp, #44]	; 0x2c
 8005014:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005016:	eb09 0b03 	add.w	fp, r9, r3
 800501a:	f10b 0301 	add.w	r3, fp, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	9302      	str	r3, [sp, #8]
 8005022:	bfb8      	it	lt
 8005024:	2301      	movlt	r3, #1
 8005026:	e7dd      	b.n	8004fe4 <_dtoa_r+0x264>
 8005028:	2301      	movs	r3, #1
 800502a:	e7f2      	b.n	8005012 <_dtoa_r+0x292>
 800502c:	2401      	movs	r4, #1
 800502e:	2300      	movs	r3, #0
 8005030:	940b      	str	r4, [sp, #44]	; 0x2c
 8005032:	9322      	str	r3, [sp, #136]	; 0x88
 8005034:	f04f 3bff 	mov.w	fp, #4294967295
 8005038:	2200      	movs	r2, #0
 800503a:	2312      	movs	r3, #18
 800503c:	f8cd b008 	str.w	fp, [sp, #8]
 8005040:	9223      	str	r2, [sp, #140]	; 0x8c
 8005042:	e7cf      	b.n	8004fe4 <_dtoa_r+0x264>
 8005044:	f3af 8000 	nop.w
 8005048:	636f4361 	.word	0x636f4361
 800504c:	3fd287a7 	.word	0x3fd287a7
 8005050:	8b60c8b3 	.word	0x8b60c8b3
 8005054:	3fc68a28 	.word	0x3fc68a28
 8005058:	509f79fb 	.word	0x509f79fb
 800505c:	3fd34413 	.word	0x3fd34413
 8005060:	08007129 	.word	0x08007129
 8005064:	08007140 	.word	0x08007140
 8005068:	7ff00000 	.word	0x7ff00000
 800506c:	08007125 	.word	0x08007125
 8005070:	0800711c 	.word	0x0800711c
 8005074:	080070f9 	.word	0x080070f9
 8005078:	3ff80000 	.word	0x3ff80000
 800507c:	08007238 	.word	0x08007238
 8005080:	0800719f 	.word	0x0800719f
 8005084:	2301      	movs	r3, #1
 8005086:	930b      	str	r3, [sp, #44]	; 0x2c
 8005088:	e7d4      	b.n	8005034 <_dtoa_r+0x2b4>
 800508a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800508e:	465b      	mov	r3, fp
 8005090:	f8cd b008 	str.w	fp, [sp, #8]
 8005094:	e7a6      	b.n	8004fe4 <_dtoa_r+0x264>
 8005096:	3101      	adds	r1, #1
 8005098:	6041      	str	r1, [r0, #4]
 800509a:	0052      	lsls	r2, r2, #1
 800509c:	e7a6      	b.n	8004fec <_dtoa_r+0x26c>
 800509e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050a0:	9a08      	ldr	r2, [sp, #32]
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	9b02      	ldr	r3, [sp, #8]
 80050a6:	2b0e      	cmp	r3, #14
 80050a8:	f200 80a8 	bhi.w	80051fc <_dtoa_r+0x47c>
 80050ac:	2c00      	cmp	r4, #0
 80050ae:	f000 80a5 	beq.w	80051fc <_dtoa_r+0x47c>
 80050b2:	f1b9 0f00 	cmp.w	r9, #0
 80050b6:	dd34      	ble.n	8005122 <_dtoa_r+0x3a2>
 80050b8:	4a9a      	ldr	r2, [pc, #616]	; (8005324 <_dtoa_r+0x5a4>)
 80050ba:	f009 030f 	and.w	r3, r9, #15
 80050be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050c2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80050c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050ce:	ea4f 1429 	mov.w	r4, r9, asr #4
 80050d2:	d016      	beq.n	8005102 <_dtoa_r+0x382>
 80050d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050d8:	4b93      	ldr	r3, [pc, #588]	; (8005328 <_dtoa_r+0x5a8>)
 80050da:	2703      	movs	r7, #3
 80050dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050e0:	f7fb fb24 	bl	800072c <__aeabi_ddiv>
 80050e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050e8:	f004 040f 	and.w	r4, r4, #15
 80050ec:	4e8e      	ldr	r6, [pc, #568]	; (8005328 <_dtoa_r+0x5a8>)
 80050ee:	b954      	cbnz	r4, 8005106 <_dtoa_r+0x386>
 80050f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050f8:	f7fb fb18 	bl	800072c <__aeabi_ddiv>
 80050fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005100:	e029      	b.n	8005156 <_dtoa_r+0x3d6>
 8005102:	2702      	movs	r7, #2
 8005104:	e7f2      	b.n	80050ec <_dtoa_r+0x36c>
 8005106:	07e1      	lsls	r1, r4, #31
 8005108:	d508      	bpl.n	800511c <_dtoa_r+0x39c>
 800510a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800510e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005112:	f7fb f9e1 	bl	80004d8 <__aeabi_dmul>
 8005116:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800511a:	3701      	adds	r7, #1
 800511c:	1064      	asrs	r4, r4, #1
 800511e:	3608      	adds	r6, #8
 8005120:	e7e5      	b.n	80050ee <_dtoa_r+0x36e>
 8005122:	f000 80a5 	beq.w	8005270 <_dtoa_r+0x4f0>
 8005126:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800512a:	f1c9 0400 	rsb	r4, r9, #0
 800512e:	4b7d      	ldr	r3, [pc, #500]	; (8005324 <_dtoa_r+0x5a4>)
 8005130:	f004 020f 	and.w	r2, r4, #15
 8005134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f7fb f9cc 	bl	80004d8 <__aeabi_dmul>
 8005140:	2702      	movs	r7, #2
 8005142:	2300      	movs	r3, #0
 8005144:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005148:	4e77      	ldr	r6, [pc, #476]	; (8005328 <_dtoa_r+0x5a8>)
 800514a:	1124      	asrs	r4, r4, #4
 800514c:	2c00      	cmp	r4, #0
 800514e:	f040 8084 	bne.w	800525a <_dtoa_r+0x4da>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1d2      	bne.n	80050fc <_dtoa_r+0x37c>
 8005156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 808b 	beq.w	8005274 <_dtoa_r+0x4f4>
 800515e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005162:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005166:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800516a:	2200      	movs	r2, #0
 800516c:	4b6f      	ldr	r3, [pc, #444]	; (800532c <_dtoa_r+0x5ac>)
 800516e:	f7fb fc25 	bl	80009bc <__aeabi_dcmplt>
 8005172:	2800      	cmp	r0, #0
 8005174:	d07e      	beq.n	8005274 <_dtoa_r+0x4f4>
 8005176:	9b02      	ldr	r3, [sp, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d07b      	beq.n	8005274 <_dtoa_r+0x4f4>
 800517c:	f1bb 0f00 	cmp.w	fp, #0
 8005180:	dd38      	ble.n	80051f4 <_dtoa_r+0x474>
 8005182:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005186:	2200      	movs	r2, #0
 8005188:	4b69      	ldr	r3, [pc, #420]	; (8005330 <_dtoa_r+0x5b0>)
 800518a:	f7fb f9a5 	bl	80004d8 <__aeabi_dmul>
 800518e:	465c      	mov	r4, fp
 8005190:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005194:	f109 38ff 	add.w	r8, r9, #4294967295
 8005198:	3701      	adds	r7, #1
 800519a:	4638      	mov	r0, r7
 800519c:	f7fb f932 	bl	8000404 <__aeabi_i2d>
 80051a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051a4:	f7fb f998 	bl	80004d8 <__aeabi_dmul>
 80051a8:	2200      	movs	r2, #0
 80051aa:	4b62      	ldr	r3, [pc, #392]	; (8005334 <_dtoa_r+0x5b4>)
 80051ac:	f7fa ffde 	bl	800016c <__adddf3>
 80051b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80051b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051b8:	9611      	str	r6, [sp, #68]	; 0x44
 80051ba:	2c00      	cmp	r4, #0
 80051bc:	d15d      	bne.n	800527a <_dtoa_r+0x4fa>
 80051be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051c2:	2200      	movs	r2, #0
 80051c4:	4b5c      	ldr	r3, [pc, #368]	; (8005338 <_dtoa_r+0x5b8>)
 80051c6:	f7fa ffcf 	bl	8000168 <__aeabi_dsub>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051d2:	4633      	mov	r3, r6
 80051d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051d6:	f7fb fc0f 	bl	80009f8 <__aeabi_dcmpgt>
 80051da:	2800      	cmp	r0, #0
 80051dc:	f040 829e 	bne.w	800571c <_dtoa_r+0x99c>
 80051e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80051ea:	f7fb fbe7 	bl	80009bc <__aeabi_dcmplt>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	f040 8292 	bne.w	8005718 <_dtoa_r+0x998>
 80051f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80051f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80051fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f2c0 8153 	blt.w	80054aa <_dtoa_r+0x72a>
 8005204:	f1b9 0f0e 	cmp.w	r9, #14
 8005208:	f300 814f 	bgt.w	80054aa <_dtoa_r+0x72a>
 800520c:	4b45      	ldr	r3, [pc, #276]	; (8005324 <_dtoa_r+0x5a4>)
 800520e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005212:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005216:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800521a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800521c:	2b00      	cmp	r3, #0
 800521e:	f280 80db 	bge.w	80053d8 <_dtoa_r+0x658>
 8005222:	9b02      	ldr	r3, [sp, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f300 80d7 	bgt.w	80053d8 <_dtoa_r+0x658>
 800522a:	f040 8274 	bne.w	8005716 <_dtoa_r+0x996>
 800522e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005232:	2200      	movs	r2, #0
 8005234:	4b40      	ldr	r3, [pc, #256]	; (8005338 <_dtoa_r+0x5b8>)
 8005236:	f7fb f94f 	bl	80004d8 <__aeabi_dmul>
 800523a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800523e:	f7fb fbd1 	bl	80009e4 <__aeabi_dcmpge>
 8005242:	9c02      	ldr	r4, [sp, #8]
 8005244:	4626      	mov	r6, r4
 8005246:	2800      	cmp	r0, #0
 8005248:	f040 824a 	bne.w	80056e0 <_dtoa_r+0x960>
 800524c:	2331      	movs	r3, #49	; 0x31
 800524e:	9f08      	ldr	r7, [sp, #32]
 8005250:	f109 0901 	add.w	r9, r9, #1
 8005254:	f807 3b01 	strb.w	r3, [r7], #1
 8005258:	e246      	b.n	80056e8 <_dtoa_r+0x968>
 800525a:	07e2      	lsls	r2, r4, #31
 800525c:	d505      	bpl.n	800526a <_dtoa_r+0x4ea>
 800525e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005262:	f7fb f939 	bl	80004d8 <__aeabi_dmul>
 8005266:	2301      	movs	r3, #1
 8005268:	3701      	adds	r7, #1
 800526a:	1064      	asrs	r4, r4, #1
 800526c:	3608      	adds	r6, #8
 800526e:	e76d      	b.n	800514c <_dtoa_r+0x3cc>
 8005270:	2702      	movs	r7, #2
 8005272:	e770      	b.n	8005156 <_dtoa_r+0x3d6>
 8005274:	46c8      	mov	r8, r9
 8005276:	9c02      	ldr	r4, [sp, #8]
 8005278:	e78f      	b.n	800519a <_dtoa_r+0x41a>
 800527a:	9908      	ldr	r1, [sp, #32]
 800527c:	4b29      	ldr	r3, [pc, #164]	; (8005324 <_dtoa_r+0x5a4>)
 800527e:	4421      	add	r1, r4
 8005280:	9112      	str	r1, [sp, #72]	; 0x48
 8005282:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005284:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005288:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800528c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005290:	2900      	cmp	r1, #0
 8005292:	d055      	beq.n	8005340 <_dtoa_r+0x5c0>
 8005294:	2000      	movs	r0, #0
 8005296:	4929      	ldr	r1, [pc, #164]	; (800533c <_dtoa_r+0x5bc>)
 8005298:	f7fb fa48 	bl	800072c <__aeabi_ddiv>
 800529c:	463b      	mov	r3, r7
 800529e:	4632      	mov	r2, r6
 80052a0:	f7fa ff62 	bl	8000168 <__aeabi_dsub>
 80052a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052a8:	9f08      	ldr	r7, [sp, #32]
 80052aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052ae:	f7fb fbc3 	bl	8000a38 <__aeabi_d2iz>
 80052b2:	4604      	mov	r4, r0
 80052b4:	f7fb f8a6 	bl	8000404 <__aeabi_i2d>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052c0:	f7fa ff52 	bl	8000168 <__aeabi_dsub>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	3430      	adds	r4, #48	; 0x30
 80052ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052d2:	f807 4b01 	strb.w	r4, [r7], #1
 80052d6:	f7fb fb71 	bl	80009bc <__aeabi_dcmplt>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d174      	bne.n	80053c8 <_dtoa_r+0x648>
 80052de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052e2:	2000      	movs	r0, #0
 80052e4:	4911      	ldr	r1, [pc, #68]	; (800532c <_dtoa_r+0x5ac>)
 80052e6:	f7fa ff3f 	bl	8000168 <__aeabi_dsub>
 80052ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052ee:	f7fb fb65 	bl	80009bc <__aeabi_dcmplt>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	f040 80b6 	bne.w	8005464 <_dtoa_r+0x6e4>
 80052f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052fa:	429f      	cmp	r7, r3
 80052fc:	f43f af7a 	beq.w	80051f4 <_dtoa_r+0x474>
 8005300:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005304:	2200      	movs	r2, #0
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <_dtoa_r+0x5b0>)
 8005308:	f7fb f8e6 	bl	80004d8 <__aeabi_dmul>
 800530c:	2200      	movs	r2, #0
 800530e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005316:	4b06      	ldr	r3, [pc, #24]	; (8005330 <_dtoa_r+0x5b0>)
 8005318:	f7fb f8de 	bl	80004d8 <__aeabi_dmul>
 800531c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005320:	e7c3      	b.n	80052aa <_dtoa_r+0x52a>
 8005322:	bf00      	nop
 8005324:	08007238 	.word	0x08007238
 8005328:	08007210 	.word	0x08007210
 800532c:	3ff00000 	.word	0x3ff00000
 8005330:	40240000 	.word	0x40240000
 8005334:	401c0000 	.word	0x401c0000
 8005338:	40140000 	.word	0x40140000
 800533c:	3fe00000 	.word	0x3fe00000
 8005340:	4630      	mov	r0, r6
 8005342:	4639      	mov	r1, r7
 8005344:	f7fb f8c8 	bl	80004d8 <__aeabi_dmul>
 8005348:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800534a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800534e:	9c08      	ldr	r4, [sp, #32]
 8005350:	9314      	str	r3, [sp, #80]	; 0x50
 8005352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005356:	f7fb fb6f 	bl	8000a38 <__aeabi_d2iz>
 800535a:	9015      	str	r0, [sp, #84]	; 0x54
 800535c:	f7fb f852 	bl	8000404 <__aeabi_i2d>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005368:	f7fa fefe 	bl	8000168 <__aeabi_dsub>
 800536c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800536e:	4606      	mov	r6, r0
 8005370:	3330      	adds	r3, #48	; 0x30
 8005372:	f804 3b01 	strb.w	r3, [r4], #1
 8005376:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005378:	460f      	mov	r7, r1
 800537a:	429c      	cmp	r4, r3
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	d124      	bne.n	80053cc <_dtoa_r+0x64c>
 8005382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005386:	4bb3      	ldr	r3, [pc, #716]	; (8005654 <_dtoa_r+0x8d4>)
 8005388:	f7fa fef0 	bl	800016c <__adddf3>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4630      	mov	r0, r6
 8005392:	4639      	mov	r1, r7
 8005394:	f7fb fb30 	bl	80009f8 <__aeabi_dcmpgt>
 8005398:	2800      	cmp	r0, #0
 800539a:	d162      	bne.n	8005462 <_dtoa_r+0x6e2>
 800539c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053a0:	2000      	movs	r0, #0
 80053a2:	49ac      	ldr	r1, [pc, #688]	; (8005654 <_dtoa_r+0x8d4>)
 80053a4:	f7fa fee0 	bl	8000168 <__aeabi_dsub>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	4630      	mov	r0, r6
 80053ae:	4639      	mov	r1, r7
 80053b0:	f7fb fb04 	bl	80009bc <__aeabi_dcmplt>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	f43f af1d 	beq.w	80051f4 <_dtoa_r+0x474>
 80053ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80053bc:	1e7b      	subs	r3, r7, #1
 80053be:	9314      	str	r3, [sp, #80]	; 0x50
 80053c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80053c4:	2b30      	cmp	r3, #48	; 0x30
 80053c6:	d0f8      	beq.n	80053ba <_dtoa_r+0x63a>
 80053c8:	46c1      	mov	r9, r8
 80053ca:	e03a      	b.n	8005442 <_dtoa_r+0x6c2>
 80053cc:	4ba2      	ldr	r3, [pc, #648]	; (8005658 <_dtoa_r+0x8d8>)
 80053ce:	f7fb f883 	bl	80004d8 <__aeabi_dmul>
 80053d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053d6:	e7bc      	b.n	8005352 <_dtoa_r+0x5d2>
 80053d8:	9f08      	ldr	r7, [sp, #32]
 80053da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053e2:	f7fb f9a3 	bl	800072c <__aeabi_ddiv>
 80053e6:	f7fb fb27 	bl	8000a38 <__aeabi_d2iz>
 80053ea:	4604      	mov	r4, r0
 80053ec:	f7fb f80a 	bl	8000404 <__aeabi_i2d>
 80053f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053f4:	f7fb f870 	bl	80004d8 <__aeabi_dmul>
 80053f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80053fc:	460b      	mov	r3, r1
 80053fe:	4602      	mov	r2, r0
 8005400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005404:	f7fa feb0 	bl	8000168 <__aeabi_dsub>
 8005408:	f807 6b01 	strb.w	r6, [r7], #1
 800540c:	9e08      	ldr	r6, [sp, #32]
 800540e:	9b02      	ldr	r3, [sp, #8]
 8005410:	1bbe      	subs	r6, r7, r6
 8005412:	42b3      	cmp	r3, r6
 8005414:	d13a      	bne.n	800548c <_dtoa_r+0x70c>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	f7fa fea7 	bl	800016c <__adddf3>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005426:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800542a:	f7fb fae5 	bl	80009f8 <__aeabi_dcmpgt>
 800542e:	bb58      	cbnz	r0, 8005488 <_dtoa_r+0x708>
 8005430:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005438:	f7fb fab6 	bl	80009a8 <__aeabi_dcmpeq>
 800543c:	b108      	cbz	r0, 8005442 <_dtoa_r+0x6c2>
 800543e:	07e1      	lsls	r1, r4, #31
 8005440:	d422      	bmi.n	8005488 <_dtoa_r+0x708>
 8005442:	4628      	mov	r0, r5
 8005444:	4651      	mov	r1, sl
 8005446:	f000 faf1 	bl	8005a2c <_Bfree>
 800544a:	2300      	movs	r3, #0
 800544c:	703b      	strb	r3, [r7, #0]
 800544e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005450:	f109 0001 	add.w	r0, r9, #1
 8005454:	6018      	str	r0, [r3, #0]
 8005456:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005458:	2b00      	cmp	r3, #0
 800545a:	f43f acdf 	beq.w	8004e1c <_dtoa_r+0x9c>
 800545e:	601f      	str	r7, [r3, #0]
 8005460:	e4dc      	b.n	8004e1c <_dtoa_r+0x9c>
 8005462:	4627      	mov	r7, r4
 8005464:	463b      	mov	r3, r7
 8005466:	461f      	mov	r7, r3
 8005468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800546c:	2a39      	cmp	r2, #57	; 0x39
 800546e:	d107      	bne.n	8005480 <_dtoa_r+0x700>
 8005470:	9a08      	ldr	r2, [sp, #32]
 8005472:	429a      	cmp	r2, r3
 8005474:	d1f7      	bne.n	8005466 <_dtoa_r+0x6e6>
 8005476:	2230      	movs	r2, #48	; 0x30
 8005478:	9908      	ldr	r1, [sp, #32]
 800547a:	f108 0801 	add.w	r8, r8, #1
 800547e:	700a      	strb	r2, [r1, #0]
 8005480:	781a      	ldrb	r2, [r3, #0]
 8005482:	3201      	adds	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	e79f      	b.n	80053c8 <_dtoa_r+0x648>
 8005488:	46c8      	mov	r8, r9
 800548a:	e7eb      	b.n	8005464 <_dtoa_r+0x6e4>
 800548c:	2200      	movs	r2, #0
 800548e:	4b72      	ldr	r3, [pc, #456]	; (8005658 <_dtoa_r+0x8d8>)
 8005490:	f7fb f822 	bl	80004d8 <__aeabi_dmul>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800549c:	2200      	movs	r2, #0
 800549e:	2300      	movs	r3, #0
 80054a0:	f7fb fa82 	bl	80009a8 <__aeabi_dcmpeq>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d098      	beq.n	80053da <_dtoa_r+0x65a>
 80054a8:	e7cb      	b.n	8005442 <_dtoa_r+0x6c2>
 80054aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054ac:	2a00      	cmp	r2, #0
 80054ae:	f000 80cd 	beq.w	800564c <_dtoa_r+0x8cc>
 80054b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054b4:	2a01      	cmp	r2, #1
 80054b6:	f300 80af 	bgt.w	8005618 <_dtoa_r+0x898>
 80054ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80054bc:	2a00      	cmp	r2, #0
 80054be:	f000 80a7 	beq.w	8005610 <_dtoa_r+0x890>
 80054c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80054c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80054c8:	9f06      	ldr	r7, [sp, #24]
 80054ca:	9a06      	ldr	r2, [sp, #24]
 80054cc:	2101      	movs	r1, #1
 80054ce:	441a      	add	r2, r3
 80054d0:	9206      	str	r2, [sp, #24]
 80054d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054d4:	4628      	mov	r0, r5
 80054d6:	441a      	add	r2, r3
 80054d8:	9209      	str	r2, [sp, #36]	; 0x24
 80054da:	f000 fb61 	bl	8005ba0 <__i2b>
 80054de:	4606      	mov	r6, r0
 80054e0:	2f00      	cmp	r7, #0
 80054e2:	dd0c      	ble.n	80054fe <_dtoa_r+0x77e>
 80054e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dd09      	ble.n	80054fe <_dtoa_r+0x77e>
 80054ea:	42bb      	cmp	r3, r7
 80054ec:	bfa8      	it	ge
 80054ee:	463b      	movge	r3, r7
 80054f0:	9a06      	ldr	r2, [sp, #24]
 80054f2:	1aff      	subs	r7, r7, r3
 80054f4:	1ad2      	subs	r2, r2, r3
 80054f6:	9206      	str	r2, [sp, #24]
 80054f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	9309      	str	r3, [sp, #36]	; 0x24
 80054fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005500:	b1f3      	cbz	r3, 8005540 <_dtoa_r+0x7c0>
 8005502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80a9 	beq.w	800565c <_dtoa_r+0x8dc>
 800550a:	2c00      	cmp	r4, #0
 800550c:	dd10      	ble.n	8005530 <_dtoa_r+0x7b0>
 800550e:	4631      	mov	r1, r6
 8005510:	4622      	mov	r2, r4
 8005512:	4628      	mov	r0, r5
 8005514:	f000 fbfe 	bl	8005d14 <__pow5mult>
 8005518:	4652      	mov	r2, sl
 800551a:	4601      	mov	r1, r0
 800551c:	4606      	mov	r6, r0
 800551e:	4628      	mov	r0, r5
 8005520:	f000 fb54 	bl	8005bcc <__multiply>
 8005524:	4680      	mov	r8, r0
 8005526:	4651      	mov	r1, sl
 8005528:	4628      	mov	r0, r5
 800552a:	f000 fa7f 	bl	8005a2c <_Bfree>
 800552e:	46c2      	mov	sl, r8
 8005530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005532:	1b1a      	subs	r2, r3, r4
 8005534:	d004      	beq.n	8005540 <_dtoa_r+0x7c0>
 8005536:	4651      	mov	r1, sl
 8005538:	4628      	mov	r0, r5
 800553a:	f000 fbeb 	bl	8005d14 <__pow5mult>
 800553e:	4682      	mov	sl, r0
 8005540:	2101      	movs	r1, #1
 8005542:	4628      	mov	r0, r5
 8005544:	f000 fb2c 	bl	8005ba0 <__i2b>
 8005548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800554a:	4604      	mov	r4, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	f340 8087 	ble.w	8005660 <_dtoa_r+0x8e0>
 8005552:	461a      	mov	r2, r3
 8005554:	4601      	mov	r1, r0
 8005556:	4628      	mov	r0, r5
 8005558:	f000 fbdc 	bl	8005d14 <__pow5mult>
 800555c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800555e:	4604      	mov	r4, r0
 8005560:	2b01      	cmp	r3, #1
 8005562:	f340 8080 	ble.w	8005666 <_dtoa_r+0x8e6>
 8005566:	f04f 0800 	mov.w	r8, #0
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005570:	6918      	ldr	r0, [r3, #16]
 8005572:	f000 fac7 	bl	8005b04 <__hi0bits>
 8005576:	f1c0 0020 	rsb	r0, r0, #32
 800557a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800557c:	4418      	add	r0, r3
 800557e:	f010 001f 	ands.w	r0, r0, #31
 8005582:	f000 8092 	beq.w	80056aa <_dtoa_r+0x92a>
 8005586:	f1c0 0320 	rsb	r3, r0, #32
 800558a:	2b04      	cmp	r3, #4
 800558c:	f340 808a 	ble.w	80056a4 <_dtoa_r+0x924>
 8005590:	f1c0 001c 	rsb	r0, r0, #28
 8005594:	9b06      	ldr	r3, [sp, #24]
 8005596:	4407      	add	r7, r0
 8005598:	4403      	add	r3, r0
 800559a:	9306      	str	r3, [sp, #24]
 800559c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800559e:	4403      	add	r3, r0
 80055a0:	9309      	str	r3, [sp, #36]	; 0x24
 80055a2:	9b06      	ldr	r3, [sp, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	dd05      	ble.n	80055b4 <_dtoa_r+0x834>
 80055a8:	4651      	mov	r1, sl
 80055aa:	461a      	mov	r2, r3
 80055ac:	4628      	mov	r0, r5
 80055ae:	f000 fc0b 	bl	8005dc8 <__lshift>
 80055b2:	4682      	mov	sl, r0
 80055b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	dd05      	ble.n	80055c6 <_dtoa_r+0x846>
 80055ba:	4621      	mov	r1, r4
 80055bc:	461a      	mov	r2, r3
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 fc02 	bl	8005dc8 <__lshift>
 80055c4:	4604      	mov	r4, r0
 80055c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d070      	beq.n	80056ae <_dtoa_r+0x92e>
 80055cc:	4621      	mov	r1, r4
 80055ce:	4650      	mov	r0, sl
 80055d0:	f000 fc66 	bl	8005ea0 <__mcmp>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	da6a      	bge.n	80056ae <_dtoa_r+0x92e>
 80055d8:	2300      	movs	r3, #0
 80055da:	4651      	mov	r1, sl
 80055dc:	220a      	movs	r2, #10
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 fa46 	bl	8005a70 <__multadd>
 80055e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055e6:	4682      	mov	sl, r0
 80055e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8193 	beq.w	8005918 <_dtoa_r+0xb98>
 80055f2:	4631      	mov	r1, r6
 80055f4:	2300      	movs	r3, #0
 80055f6:	220a      	movs	r2, #10
 80055f8:	4628      	mov	r0, r5
 80055fa:	f000 fa39 	bl	8005a70 <__multadd>
 80055fe:	f1bb 0f00 	cmp.w	fp, #0
 8005602:	4606      	mov	r6, r0
 8005604:	f300 8093 	bgt.w	800572e <_dtoa_r+0x9ae>
 8005608:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800560a:	2b02      	cmp	r3, #2
 800560c:	dc57      	bgt.n	80056be <_dtoa_r+0x93e>
 800560e:	e08e      	b.n	800572e <_dtoa_r+0x9ae>
 8005610:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005612:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005616:	e756      	b.n	80054c6 <_dtoa_r+0x746>
 8005618:	9b02      	ldr	r3, [sp, #8]
 800561a:	1e5c      	subs	r4, r3, #1
 800561c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800561e:	42a3      	cmp	r3, r4
 8005620:	bfb7      	itett	lt
 8005622:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005624:	1b1c      	subge	r4, r3, r4
 8005626:	1ae2      	sublt	r2, r4, r3
 8005628:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800562a:	bfbe      	ittt	lt
 800562c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800562e:	189b      	addlt	r3, r3, r2
 8005630:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005632:	9b02      	ldr	r3, [sp, #8]
 8005634:	bfb8      	it	lt
 8005636:	2400      	movlt	r4, #0
 8005638:	2b00      	cmp	r3, #0
 800563a:	bfbb      	ittet	lt
 800563c:	9b06      	ldrlt	r3, [sp, #24]
 800563e:	9a02      	ldrlt	r2, [sp, #8]
 8005640:	9f06      	ldrge	r7, [sp, #24]
 8005642:	1a9f      	sublt	r7, r3, r2
 8005644:	bfac      	ite	ge
 8005646:	9b02      	ldrge	r3, [sp, #8]
 8005648:	2300      	movlt	r3, #0
 800564a:	e73e      	b.n	80054ca <_dtoa_r+0x74a>
 800564c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800564e:	9f06      	ldr	r7, [sp, #24]
 8005650:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005652:	e745      	b.n	80054e0 <_dtoa_r+0x760>
 8005654:	3fe00000 	.word	0x3fe00000
 8005658:	40240000 	.word	0x40240000
 800565c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800565e:	e76a      	b.n	8005536 <_dtoa_r+0x7b6>
 8005660:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005662:	2b01      	cmp	r3, #1
 8005664:	dc19      	bgt.n	800569a <_dtoa_r+0x91a>
 8005666:	9b04      	ldr	r3, [sp, #16]
 8005668:	b9bb      	cbnz	r3, 800569a <_dtoa_r+0x91a>
 800566a:	9b05      	ldr	r3, [sp, #20]
 800566c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005670:	b99b      	cbnz	r3, 800569a <_dtoa_r+0x91a>
 8005672:	9b05      	ldr	r3, [sp, #20]
 8005674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005678:	0d1b      	lsrs	r3, r3, #20
 800567a:	051b      	lsls	r3, r3, #20
 800567c:	b183      	cbz	r3, 80056a0 <_dtoa_r+0x920>
 800567e:	f04f 0801 	mov.w	r8, #1
 8005682:	9b06      	ldr	r3, [sp, #24]
 8005684:	3301      	adds	r3, #1
 8005686:	9306      	str	r3, [sp, #24]
 8005688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800568a:	3301      	adds	r3, #1
 800568c:	9309      	str	r3, [sp, #36]	; 0x24
 800568e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005690:	2b00      	cmp	r3, #0
 8005692:	f47f af6a 	bne.w	800556a <_dtoa_r+0x7ea>
 8005696:	2001      	movs	r0, #1
 8005698:	e76f      	b.n	800557a <_dtoa_r+0x7fa>
 800569a:	f04f 0800 	mov.w	r8, #0
 800569e:	e7f6      	b.n	800568e <_dtoa_r+0x90e>
 80056a0:	4698      	mov	r8, r3
 80056a2:	e7f4      	b.n	800568e <_dtoa_r+0x90e>
 80056a4:	f43f af7d 	beq.w	80055a2 <_dtoa_r+0x822>
 80056a8:	4618      	mov	r0, r3
 80056aa:	301c      	adds	r0, #28
 80056ac:	e772      	b.n	8005594 <_dtoa_r+0x814>
 80056ae:	9b02      	ldr	r3, [sp, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	dc36      	bgt.n	8005722 <_dtoa_r+0x9a2>
 80056b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	dd33      	ble.n	8005722 <_dtoa_r+0x9a2>
 80056ba:	f8dd b008 	ldr.w	fp, [sp, #8]
 80056be:	f1bb 0f00 	cmp.w	fp, #0
 80056c2:	d10d      	bne.n	80056e0 <_dtoa_r+0x960>
 80056c4:	4621      	mov	r1, r4
 80056c6:	465b      	mov	r3, fp
 80056c8:	2205      	movs	r2, #5
 80056ca:	4628      	mov	r0, r5
 80056cc:	f000 f9d0 	bl	8005a70 <__multadd>
 80056d0:	4601      	mov	r1, r0
 80056d2:	4604      	mov	r4, r0
 80056d4:	4650      	mov	r0, sl
 80056d6:	f000 fbe3 	bl	8005ea0 <__mcmp>
 80056da:	2800      	cmp	r0, #0
 80056dc:	f73f adb6 	bgt.w	800524c <_dtoa_r+0x4cc>
 80056e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056e2:	9f08      	ldr	r7, [sp, #32]
 80056e4:	ea6f 0903 	mvn.w	r9, r3
 80056e8:	f04f 0800 	mov.w	r8, #0
 80056ec:	4621      	mov	r1, r4
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 f99c 	bl	8005a2c <_Bfree>
 80056f4:	2e00      	cmp	r6, #0
 80056f6:	f43f aea4 	beq.w	8005442 <_dtoa_r+0x6c2>
 80056fa:	f1b8 0f00 	cmp.w	r8, #0
 80056fe:	d005      	beq.n	800570c <_dtoa_r+0x98c>
 8005700:	45b0      	cmp	r8, r6
 8005702:	d003      	beq.n	800570c <_dtoa_r+0x98c>
 8005704:	4641      	mov	r1, r8
 8005706:	4628      	mov	r0, r5
 8005708:	f000 f990 	bl	8005a2c <_Bfree>
 800570c:	4631      	mov	r1, r6
 800570e:	4628      	mov	r0, r5
 8005710:	f000 f98c 	bl	8005a2c <_Bfree>
 8005714:	e695      	b.n	8005442 <_dtoa_r+0x6c2>
 8005716:	2400      	movs	r4, #0
 8005718:	4626      	mov	r6, r4
 800571a:	e7e1      	b.n	80056e0 <_dtoa_r+0x960>
 800571c:	46c1      	mov	r9, r8
 800571e:	4626      	mov	r6, r4
 8005720:	e594      	b.n	800524c <_dtoa_r+0x4cc>
 8005722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005724:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80fc 	beq.w	8005926 <_dtoa_r+0xba6>
 800572e:	2f00      	cmp	r7, #0
 8005730:	dd05      	ble.n	800573e <_dtoa_r+0x9be>
 8005732:	4631      	mov	r1, r6
 8005734:	463a      	mov	r2, r7
 8005736:	4628      	mov	r0, r5
 8005738:	f000 fb46 	bl	8005dc8 <__lshift>
 800573c:	4606      	mov	r6, r0
 800573e:	f1b8 0f00 	cmp.w	r8, #0
 8005742:	d05c      	beq.n	80057fe <_dtoa_r+0xa7e>
 8005744:	4628      	mov	r0, r5
 8005746:	6871      	ldr	r1, [r6, #4]
 8005748:	f000 f930 	bl	80059ac <_Balloc>
 800574c:	4607      	mov	r7, r0
 800574e:	b928      	cbnz	r0, 800575c <_dtoa_r+0x9dc>
 8005750:	4602      	mov	r2, r0
 8005752:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005756:	4b7e      	ldr	r3, [pc, #504]	; (8005950 <_dtoa_r+0xbd0>)
 8005758:	f7ff bb26 	b.w	8004da8 <_dtoa_r+0x28>
 800575c:	6932      	ldr	r2, [r6, #16]
 800575e:	f106 010c 	add.w	r1, r6, #12
 8005762:	3202      	adds	r2, #2
 8005764:	0092      	lsls	r2, r2, #2
 8005766:	300c      	adds	r0, #12
 8005768:	f000 f912 	bl	8005990 <memcpy>
 800576c:	2201      	movs	r2, #1
 800576e:	4639      	mov	r1, r7
 8005770:	4628      	mov	r0, r5
 8005772:	f000 fb29 	bl	8005dc8 <__lshift>
 8005776:	46b0      	mov	r8, r6
 8005778:	4606      	mov	r6, r0
 800577a:	9b08      	ldr	r3, [sp, #32]
 800577c:	3301      	adds	r3, #1
 800577e:	9302      	str	r3, [sp, #8]
 8005780:	9b08      	ldr	r3, [sp, #32]
 8005782:	445b      	add	r3, fp
 8005784:	930a      	str	r3, [sp, #40]	; 0x28
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	9309      	str	r3, [sp, #36]	; 0x24
 800578e:	9b02      	ldr	r3, [sp, #8]
 8005790:	4621      	mov	r1, r4
 8005792:	4650      	mov	r0, sl
 8005794:	f103 3bff 	add.w	fp, r3, #4294967295
 8005798:	f7ff fa64 	bl	8004c64 <quorem>
 800579c:	4603      	mov	r3, r0
 800579e:	4641      	mov	r1, r8
 80057a0:	3330      	adds	r3, #48	; 0x30
 80057a2:	9004      	str	r0, [sp, #16]
 80057a4:	4650      	mov	r0, sl
 80057a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80057a8:	f000 fb7a 	bl	8005ea0 <__mcmp>
 80057ac:	4632      	mov	r2, r6
 80057ae:	9006      	str	r0, [sp, #24]
 80057b0:	4621      	mov	r1, r4
 80057b2:	4628      	mov	r0, r5
 80057b4:	f000 fb90 	bl	8005ed8 <__mdiff>
 80057b8:	68c2      	ldr	r2, [r0, #12]
 80057ba:	4607      	mov	r7, r0
 80057bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057be:	bb02      	cbnz	r2, 8005802 <_dtoa_r+0xa82>
 80057c0:	4601      	mov	r1, r0
 80057c2:	4650      	mov	r0, sl
 80057c4:	f000 fb6c 	bl	8005ea0 <__mcmp>
 80057c8:	4602      	mov	r2, r0
 80057ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057cc:	4639      	mov	r1, r7
 80057ce:	4628      	mov	r0, r5
 80057d0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80057d4:	f000 f92a 	bl	8005a2c <_Bfree>
 80057d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057dc:	9f02      	ldr	r7, [sp, #8]
 80057de:	ea43 0102 	orr.w	r1, r3, r2
 80057e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e4:	430b      	orrs	r3, r1
 80057e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057e8:	d10d      	bne.n	8005806 <_dtoa_r+0xa86>
 80057ea:	2b39      	cmp	r3, #57	; 0x39
 80057ec:	d027      	beq.n	800583e <_dtoa_r+0xabe>
 80057ee:	9a06      	ldr	r2, [sp, #24]
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	dd01      	ble.n	80057f8 <_dtoa_r+0xa78>
 80057f4:	9b04      	ldr	r3, [sp, #16]
 80057f6:	3331      	adds	r3, #49	; 0x31
 80057f8:	f88b 3000 	strb.w	r3, [fp]
 80057fc:	e776      	b.n	80056ec <_dtoa_r+0x96c>
 80057fe:	4630      	mov	r0, r6
 8005800:	e7b9      	b.n	8005776 <_dtoa_r+0x9f6>
 8005802:	2201      	movs	r2, #1
 8005804:	e7e2      	b.n	80057cc <_dtoa_r+0xa4c>
 8005806:	9906      	ldr	r1, [sp, #24]
 8005808:	2900      	cmp	r1, #0
 800580a:	db04      	blt.n	8005816 <_dtoa_r+0xa96>
 800580c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800580e:	4301      	orrs	r1, r0
 8005810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005812:	4301      	orrs	r1, r0
 8005814:	d120      	bne.n	8005858 <_dtoa_r+0xad8>
 8005816:	2a00      	cmp	r2, #0
 8005818:	ddee      	ble.n	80057f8 <_dtoa_r+0xa78>
 800581a:	4651      	mov	r1, sl
 800581c:	2201      	movs	r2, #1
 800581e:	4628      	mov	r0, r5
 8005820:	9302      	str	r3, [sp, #8]
 8005822:	f000 fad1 	bl	8005dc8 <__lshift>
 8005826:	4621      	mov	r1, r4
 8005828:	4682      	mov	sl, r0
 800582a:	f000 fb39 	bl	8005ea0 <__mcmp>
 800582e:	2800      	cmp	r0, #0
 8005830:	9b02      	ldr	r3, [sp, #8]
 8005832:	dc02      	bgt.n	800583a <_dtoa_r+0xaba>
 8005834:	d1e0      	bne.n	80057f8 <_dtoa_r+0xa78>
 8005836:	07da      	lsls	r2, r3, #31
 8005838:	d5de      	bpl.n	80057f8 <_dtoa_r+0xa78>
 800583a:	2b39      	cmp	r3, #57	; 0x39
 800583c:	d1da      	bne.n	80057f4 <_dtoa_r+0xa74>
 800583e:	2339      	movs	r3, #57	; 0x39
 8005840:	f88b 3000 	strb.w	r3, [fp]
 8005844:	463b      	mov	r3, r7
 8005846:	461f      	mov	r7, r3
 8005848:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800584c:	3b01      	subs	r3, #1
 800584e:	2a39      	cmp	r2, #57	; 0x39
 8005850:	d050      	beq.n	80058f4 <_dtoa_r+0xb74>
 8005852:	3201      	adds	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e749      	b.n	80056ec <_dtoa_r+0x96c>
 8005858:	2a00      	cmp	r2, #0
 800585a:	dd03      	ble.n	8005864 <_dtoa_r+0xae4>
 800585c:	2b39      	cmp	r3, #57	; 0x39
 800585e:	d0ee      	beq.n	800583e <_dtoa_r+0xabe>
 8005860:	3301      	adds	r3, #1
 8005862:	e7c9      	b.n	80057f8 <_dtoa_r+0xa78>
 8005864:	9a02      	ldr	r2, [sp, #8]
 8005866:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005868:	f802 3c01 	strb.w	r3, [r2, #-1]
 800586c:	428a      	cmp	r2, r1
 800586e:	d02a      	beq.n	80058c6 <_dtoa_r+0xb46>
 8005870:	4651      	mov	r1, sl
 8005872:	2300      	movs	r3, #0
 8005874:	220a      	movs	r2, #10
 8005876:	4628      	mov	r0, r5
 8005878:	f000 f8fa 	bl	8005a70 <__multadd>
 800587c:	45b0      	cmp	r8, r6
 800587e:	4682      	mov	sl, r0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	f04f 020a 	mov.w	r2, #10
 8005888:	4641      	mov	r1, r8
 800588a:	4628      	mov	r0, r5
 800588c:	d107      	bne.n	800589e <_dtoa_r+0xb1e>
 800588e:	f000 f8ef 	bl	8005a70 <__multadd>
 8005892:	4680      	mov	r8, r0
 8005894:	4606      	mov	r6, r0
 8005896:	9b02      	ldr	r3, [sp, #8]
 8005898:	3301      	adds	r3, #1
 800589a:	9302      	str	r3, [sp, #8]
 800589c:	e777      	b.n	800578e <_dtoa_r+0xa0e>
 800589e:	f000 f8e7 	bl	8005a70 <__multadd>
 80058a2:	4631      	mov	r1, r6
 80058a4:	4680      	mov	r8, r0
 80058a6:	2300      	movs	r3, #0
 80058a8:	220a      	movs	r2, #10
 80058aa:	4628      	mov	r0, r5
 80058ac:	f000 f8e0 	bl	8005a70 <__multadd>
 80058b0:	4606      	mov	r6, r0
 80058b2:	e7f0      	b.n	8005896 <_dtoa_r+0xb16>
 80058b4:	f1bb 0f00 	cmp.w	fp, #0
 80058b8:	bfcc      	ite	gt
 80058ba:	465f      	movgt	r7, fp
 80058bc:	2701      	movle	r7, #1
 80058be:	f04f 0800 	mov.w	r8, #0
 80058c2:	9a08      	ldr	r2, [sp, #32]
 80058c4:	4417      	add	r7, r2
 80058c6:	4651      	mov	r1, sl
 80058c8:	2201      	movs	r2, #1
 80058ca:	4628      	mov	r0, r5
 80058cc:	9302      	str	r3, [sp, #8]
 80058ce:	f000 fa7b 	bl	8005dc8 <__lshift>
 80058d2:	4621      	mov	r1, r4
 80058d4:	4682      	mov	sl, r0
 80058d6:	f000 fae3 	bl	8005ea0 <__mcmp>
 80058da:	2800      	cmp	r0, #0
 80058dc:	dcb2      	bgt.n	8005844 <_dtoa_r+0xac4>
 80058de:	d102      	bne.n	80058e6 <_dtoa_r+0xb66>
 80058e0:	9b02      	ldr	r3, [sp, #8]
 80058e2:	07db      	lsls	r3, r3, #31
 80058e4:	d4ae      	bmi.n	8005844 <_dtoa_r+0xac4>
 80058e6:	463b      	mov	r3, r7
 80058e8:	461f      	mov	r7, r3
 80058ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058ee:	2a30      	cmp	r2, #48	; 0x30
 80058f0:	d0fa      	beq.n	80058e8 <_dtoa_r+0xb68>
 80058f2:	e6fb      	b.n	80056ec <_dtoa_r+0x96c>
 80058f4:	9a08      	ldr	r2, [sp, #32]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d1a5      	bne.n	8005846 <_dtoa_r+0xac6>
 80058fa:	2331      	movs	r3, #49	; 0x31
 80058fc:	f109 0901 	add.w	r9, r9, #1
 8005900:	7013      	strb	r3, [r2, #0]
 8005902:	e6f3      	b.n	80056ec <_dtoa_r+0x96c>
 8005904:	4b13      	ldr	r3, [pc, #76]	; (8005954 <_dtoa_r+0xbd4>)
 8005906:	f7ff baa7 	b.w	8004e58 <_dtoa_r+0xd8>
 800590a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800590c:	2b00      	cmp	r3, #0
 800590e:	f47f aa80 	bne.w	8004e12 <_dtoa_r+0x92>
 8005912:	4b11      	ldr	r3, [pc, #68]	; (8005958 <_dtoa_r+0xbd8>)
 8005914:	f7ff baa0 	b.w	8004e58 <_dtoa_r+0xd8>
 8005918:	f1bb 0f00 	cmp.w	fp, #0
 800591c:	dc03      	bgt.n	8005926 <_dtoa_r+0xba6>
 800591e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005920:	2b02      	cmp	r3, #2
 8005922:	f73f aecc 	bgt.w	80056be <_dtoa_r+0x93e>
 8005926:	9f08      	ldr	r7, [sp, #32]
 8005928:	4621      	mov	r1, r4
 800592a:	4650      	mov	r0, sl
 800592c:	f7ff f99a 	bl	8004c64 <quorem>
 8005930:	9a08      	ldr	r2, [sp, #32]
 8005932:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005936:	f807 3b01 	strb.w	r3, [r7], #1
 800593a:	1aba      	subs	r2, r7, r2
 800593c:	4593      	cmp	fp, r2
 800593e:	ddb9      	ble.n	80058b4 <_dtoa_r+0xb34>
 8005940:	4651      	mov	r1, sl
 8005942:	2300      	movs	r3, #0
 8005944:	220a      	movs	r2, #10
 8005946:	4628      	mov	r0, r5
 8005948:	f000 f892 	bl	8005a70 <__multadd>
 800594c:	4682      	mov	sl, r0
 800594e:	e7eb      	b.n	8005928 <_dtoa_r+0xba8>
 8005950:	0800719f 	.word	0x0800719f
 8005954:	080070f8 	.word	0x080070f8
 8005958:	0800711c 	.word	0x0800711c

0800595c <_localeconv_r>:
 800595c:	4800      	ldr	r0, [pc, #0]	; (8005960 <_localeconv_r+0x4>)
 800595e:	4770      	bx	lr
 8005960:	20000160 	.word	0x20000160

08005964 <malloc>:
 8005964:	4b02      	ldr	r3, [pc, #8]	; (8005970 <malloc+0xc>)
 8005966:	4601      	mov	r1, r0
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	f000 bbfb 	b.w	8006164 <_malloc_r>
 800596e:	bf00      	nop
 8005970:	2000000c 	.word	0x2000000c

08005974 <memchr>:
 8005974:	4603      	mov	r3, r0
 8005976:	b510      	push	{r4, lr}
 8005978:	b2c9      	uxtb	r1, r1
 800597a:	4402      	add	r2, r0
 800597c:	4293      	cmp	r3, r2
 800597e:	4618      	mov	r0, r3
 8005980:	d101      	bne.n	8005986 <memchr+0x12>
 8005982:	2000      	movs	r0, #0
 8005984:	e003      	b.n	800598e <memchr+0x1a>
 8005986:	7804      	ldrb	r4, [r0, #0]
 8005988:	3301      	adds	r3, #1
 800598a:	428c      	cmp	r4, r1
 800598c:	d1f6      	bne.n	800597c <memchr+0x8>
 800598e:	bd10      	pop	{r4, pc}

08005990 <memcpy>:
 8005990:	440a      	add	r2, r1
 8005992:	4291      	cmp	r1, r2
 8005994:	f100 33ff 	add.w	r3, r0, #4294967295
 8005998:	d100      	bne.n	800599c <memcpy+0xc>
 800599a:	4770      	bx	lr
 800599c:	b510      	push	{r4, lr}
 800599e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059a2:	4291      	cmp	r1, r2
 80059a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059a8:	d1f9      	bne.n	800599e <memcpy+0xe>
 80059aa:	bd10      	pop	{r4, pc}

080059ac <_Balloc>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059b0:	4604      	mov	r4, r0
 80059b2:	460d      	mov	r5, r1
 80059b4:	b976      	cbnz	r6, 80059d4 <_Balloc+0x28>
 80059b6:	2010      	movs	r0, #16
 80059b8:	f7ff ffd4 	bl	8005964 <malloc>
 80059bc:	4602      	mov	r2, r0
 80059be:	6260      	str	r0, [r4, #36]	; 0x24
 80059c0:	b920      	cbnz	r0, 80059cc <_Balloc+0x20>
 80059c2:	2166      	movs	r1, #102	; 0x66
 80059c4:	4b17      	ldr	r3, [pc, #92]	; (8005a24 <_Balloc+0x78>)
 80059c6:	4818      	ldr	r0, [pc, #96]	; (8005a28 <_Balloc+0x7c>)
 80059c8:	f000 fd92 	bl	80064f0 <__assert_func>
 80059cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059d0:	6006      	str	r6, [r0, #0]
 80059d2:	60c6      	str	r6, [r0, #12]
 80059d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059d6:	68f3      	ldr	r3, [r6, #12]
 80059d8:	b183      	cbz	r3, 80059fc <_Balloc+0x50>
 80059da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059e2:	b9b8      	cbnz	r0, 8005a14 <_Balloc+0x68>
 80059e4:	2101      	movs	r1, #1
 80059e6:	fa01 f605 	lsl.w	r6, r1, r5
 80059ea:	1d72      	adds	r2, r6, #5
 80059ec:	4620      	mov	r0, r4
 80059ee:	0092      	lsls	r2, r2, #2
 80059f0:	f000 fb5e 	bl	80060b0 <_calloc_r>
 80059f4:	b160      	cbz	r0, 8005a10 <_Balloc+0x64>
 80059f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059fa:	e00e      	b.n	8005a1a <_Balloc+0x6e>
 80059fc:	2221      	movs	r2, #33	; 0x21
 80059fe:	2104      	movs	r1, #4
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 fb55 	bl	80060b0 <_calloc_r>
 8005a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a08:	60f0      	str	r0, [r6, #12]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e4      	bne.n	80059da <_Balloc+0x2e>
 8005a10:	2000      	movs	r0, #0
 8005a12:	bd70      	pop	{r4, r5, r6, pc}
 8005a14:	6802      	ldr	r2, [r0, #0]
 8005a16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a20:	e7f7      	b.n	8005a12 <_Balloc+0x66>
 8005a22:	bf00      	nop
 8005a24:	08007129 	.word	0x08007129
 8005a28:	080071b0 	.word	0x080071b0

08005a2c <_Bfree>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a30:	4605      	mov	r5, r0
 8005a32:	460c      	mov	r4, r1
 8005a34:	b976      	cbnz	r6, 8005a54 <_Bfree+0x28>
 8005a36:	2010      	movs	r0, #16
 8005a38:	f7ff ff94 	bl	8005964 <malloc>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6268      	str	r0, [r5, #36]	; 0x24
 8005a40:	b920      	cbnz	r0, 8005a4c <_Bfree+0x20>
 8005a42:	218a      	movs	r1, #138	; 0x8a
 8005a44:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <_Bfree+0x3c>)
 8005a46:	4809      	ldr	r0, [pc, #36]	; (8005a6c <_Bfree+0x40>)
 8005a48:	f000 fd52 	bl	80064f0 <__assert_func>
 8005a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a50:	6006      	str	r6, [r0, #0]
 8005a52:	60c6      	str	r6, [r0, #12]
 8005a54:	b13c      	cbz	r4, 8005a66 <_Bfree+0x3a>
 8005a56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a58:	6862      	ldr	r2, [r4, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a60:	6021      	str	r1, [r4, #0]
 8005a62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	08007129 	.word	0x08007129
 8005a6c:	080071b0 	.word	0x080071b0

08005a70 <__multadd>:
 8005a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a74:	4698      	mov	r8, r3
 8005a76:	460c      	mov	r4, r1
 8005a78:	2300      	movs	r3, #0
 8005a7a:	690e      	ldr	r6, [r1, #16]
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	f101 0014 	add.w	r0, r1, #20
 8005a82:	6805      	ldr	r5, [r0, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	b2a9      	uxth	r1, r5
 8005a88:	fb02 8101 	mla	r1, r2, r1, r8
 8005a8c:	0c2d      	lsrs	r5, r5, #16
 8005a8e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005a92:	fb02 c505 	mla	r5, r2, r5, ip
 8005a96:	b289      	uxth	r1, r1
 8005a98:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005a9c:	429e      	cmp	r6, r3
 8005a9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005aa2:	f840 1b04 	str.w	r1, [r0], #4
 8005aa6:	dcec      	bgt.n	8005a82 <__multadd+0x12>
 8005aa8:	f1b8 0f00 	cmp.w	r8, #0
 8005aac:	d022      	beq.n	8005af4 <__multadd+0x84>
 8005aae:	68a3      	ldr	r3, [r4, #8]
 8005ab0:	42b3      	cmp	r3, r6
 8005ab2:	dc19      	bgt.n	8005ae8 <__multadd+0x78>
 8005ab4:	6861      	ldr	r1, [r4, #4]
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	3101      	adds	r1, #1
 8005aba:	f7ff ff77 	bl	80059ac <_Balloc>
 8005abe:	4605      	mov	r5, r0
 8005ac0:	b928      	cbnz	r0, 8005ace <__multadd+0x5e>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	21b5      	movs	r1, #181	; 0xb5
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <__multadd+0x8c>)
 8005ac8:	480d      	ldr	r0, [pc, #52]	; (8005b00 <__multadd+0x90>)
 8005aca:	f000 fd11 	bl	80064f0 <__assert_func>
 8005ace:	6922      	ldr	r2, [r4, #16]
 8005ad0:	f104 010c 	add.w	r1, r4, #12
 8005ad4:	3202      	adds	r2, #2
 8005ad6:	0092      	lsls	r2, r2, #2
 8005ad8:	300c      	adds	r0, #12
 8005ada:	f7ff ff59 	bl	8005990 <memcpy>
 8005ade:	4621      	mov	r1, r4
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	f7ff ffa3 	bl	8005a2c <_Bfree>
 8005ae6:	462c      	mov	r4, r5
 8005ae8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005aec:	3601      	adds	r6, #1
 8005aee:	f8c3 8014 	str.w	r8, [r3, #20]
 8005af2:	6126      	str	r6, [r4, #16]
 8005af4:	4620      	mov	r0, r4
 8005af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005afa:	bf00      	nop
 8005afc:	0800719f 	.word	0x0800719f
 8005b00:	080071b0 	.word	0x080071b0

08005b04 <__hi0bits>:
 8005b04:	0c02      	lsrs	r2, r0, #16
 8005b06:	0412      	lsls	r2, r2, #16
 8005b08:	4603      	mov	r3, r0
 8005b0a:	b9ca      	cbnz	r2, 8005b40 <__hi0bits+0x3c>
 8005b0c:	0403      	lsls	r3, r0, #16
 8005b0e:	2010      	movs	r0, #16
 8005b10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b14:	bf04      	itt	eq
 8005b16:	021b      	lsleq	r3, r3, #8
 8005b18:	3008      	addeq	r0, #8
 8005b1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b1e:	bf04      	itt	eq
 8005b20:	011b      	lsleq	r3, r3, #4
 8005b22:	3004      	addeq	r0, #4
 8005b24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b28:	bf04      	itt	eq
 8005b2a:	009b      	lsleq	r3, r3, #2
 8005b2c:	3002      	addeq	r0, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	db05      	blt.n	8005b3e <__hi0bits+0x3a>
 8005b32:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005b36:	f100 0001 	add.w	r0, r0, #1
 8005b3a:	bf08      	it	eq
 8005b3c:	2020      	moveq	r0, #32
 8005b3e:	4770      	bx	lr
 8005b40:	2000      	movs	r0, #0
 8005b42:	e7e5      	b.n	8005b10 <__hi0bits+0xc>

08005b44 <__lo0bits>:
 8005b44:	6803      	ldr	r3, [r0, #0]
 8005b46:	4602      	mov	r2, r0
 8005b48:	f013 0007 	ands.w	r0, r3, #7
 8005b4c:	d00b      	beq.n	8005b66 <__lo0bits+0x22>
 8005b4e:	07d9      	lsls	r1, r3, #31
 8005b50:	d422      	bmi.n	8005b98 <__lo0bits+0x54>
 8005b52:	0798      	lsls	r0, r3, #30
 8005b54:	bf49      	itett	mi
 8005b56:	085b      	lsrmi	r3, r3, #1
 8005b58:	089b      	lsrpl	r3, r3, #2
 8005b5a:	2001      	movmi	r0, #1
 8005b5c:	6013      	strmi	r3, [r2, #0]
 8005b5e:	bf5c      	itt	pl
 8005b60:	2002      	movpl	r0, #2
 8005b62:	6013      	strpl	r3, [r2, #0]
 8005b64:	4770      	bx	lr
 8005b66:	b299      	uxth	r1, r3
 8005b68:	b909      	cbnz	r1, 8005b6e <__lo0bits+0x2a>
 8005b6a:	2010      	movs	r0, #16
 8005b6c:	0c1b      	lsrs	r3, r3, #16
 8005b6e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b72:	bf04      	itt	eq
 8005b74:	0a1b      	lsreq	r3, r3, #8
 8005b76:	3008      	addeq	r0, #8
 8005b78:	0719      	lsls	r1, r3, #28
 8005b7a:	bf04      	itt	eq
 8005b7c:	091b      	lsreq	r3, r3, #4
 8005b7e:	3004      	addeq	r0, #4
 8005b80:	0799      	lsls	r1, r3, #30
 8005b82:	bf04      	itt	eq
 8005b84:	089b      	lsreq	r3, r3, #2
 8005b86:	3002      	addeq	r0, #2
 8005b88:	07d9      	lsls	r1, r3, #31
 8005b8a:	d403      	bmi.n	8005b94 <__lo0bits+0x50>
 8005b8c:	085b      	lsrs	r3, r3, #1
 8005b8e:	f100 0001 	add.w	r0, r0, #1
 8005b92:	d003      	beq.n	8005b9c <__lo0bits+0x58>
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4770      	bx	lr
 8005b98:	2000      	movs	r0, #0
 8005b9a:	4770      	bx	lr
 8005b9c:	2020      	movs	r0, #32
 8005b9e:	4770      	bx	lr

08005ba0 <__i2b>:
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	f7ff ff01 	bl	80059ac <_Balloc>
 8005baa:	4602      	mov	r2, r0
 8005bac:	b928      	cbnz	r0, 8005bba <__i2b+0x1a>
 8005bae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005bb2:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <__i2b+0x24>)
 8005bb4:	4804      	ldr	r0, [pc, #16]	; (8005bc8 <__i2b+0x28>)
 8005bb6:	f000 fc9b 	bl	80064f0 <__assert_func>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	6144      	str	r4, [r0, #20]
 8005bbe:	6103      	str	r3, [r0, #16]
 8005bc0:	bd10      	pop	{r4, pc}
 8005bc2:	bf00      	nop
 8005bc4:	0800719f 	.word	0x0800719f
 8005bc8:	080071b0 	.word	0x080071b0

08005bcc <__multiply>:
 8005bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd0:	4614      	mov	r4, r2
 8005bd2:	690a      	ldr	r2, [r1, #16]
 8005bd4:	6923      	ldr	r3, [r4, #16]
 8005bd6:	460d      	mov	r5, r1
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	bfbe      	ittt	lt
 8005bdc:	460b      	movlt	r3, r1
 8005bde:	4625      	movlt	r5, r4
 8005be0:	461c      	movlt	r4, r3
 8005be2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005be6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005bea:	68ab      	ldr	r3, [r5, #8]
 8005bec:	6869      	ldr	r1, [r5, #4]
 8005bee:	eb0a 0709 	add.w	r7, sl, r9
 8005bf2:	42bb      	cmp	r3, r7
 8005bf4:	b085      	sub	sp, #20
 8005bf6:	bfb8      	it	lt
 8005bf8:	3101      	addlt	r1, #1
 8005bfa:	f7ff fed7 	bl	80059ac <_Balloc>
 8005bfe:	b930      	cbnz	r0, 8005c0e <__multiply+0x42>
 8005c00:	4602      	mov	r2, r0
 8005c02:	f240 115d 	movw	r1, #349	; 0x15d
 8005c06:	4b41      	ldr	r3, [pc, #260]	; (8005d0c <__multiply+0x140>)
 8005c08:	4841      	ldr	r0, [pc, #260]	; (8005d10 <__multiply+0x144>)
 8005c0a:	f000 fc71 	bl	80064f0 <__assert_func>
 8005c0e:	f100 0614 	add.w	r6, r0, #20
 8005c12:	4633      	mov	r3, r6
 8005c14:	2200      	movs	r2, #0
 8005c16:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005c1a:	4543      	cmp	r3, r8
 8005c1c:	d31e      	bcc.n	8005c5c <__multiply+0x90>
 8005c1e:	f105 0c14 	add.w	ip, r5, #20
 8005c22:	f104 0314 	add.w	r3, r4, #20
 8005c26:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005c2a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005c2e:	9202      	str	r2, [sp, #8]
 8005c30:	ebac 0205 	sub.w	r2, ip, r5
 8005c34:	3a15      	subs	r2, #21
 8005c36:	f022 0203 	bic.w	r2, r2, #3
 8005c3a:	3204      	adds	r2, #4
 8005c3c:	f105 0115 	add.w	r1, r5, #21
 8005c40:	458c      	cmp	ip, r1
 8005c42:	bf38      	it	cc
 8005c44:	2204      	movcc	r2, #4
 8005c46:	9201      	str	r2, [sp, #4]
 8005c48:	9a02      	ldr	r2, [sp, #8]
 8005c4a:	9303      	str	r3, [sp, #12]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d808      	bhi.n	8005c62 <__multiply+0x96>
 8005c50:	2f00      	cmp	r7, #0
 8005c52:	dc55      	bgt.n	8005d00 <__multiply+0x134>
 8005c54:	6107      	str	r7, [r0, #16]
 8005c56:	b005      	add	sp, #20
 8005c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5c:	f843 2b04 	str.w	r2, [r3], #4
 8005c60:	e7db      	b.n	8005c1a <__multiply+0x4e>
 8005c62:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c66:	f1ba 0f00 	cmp.w	sl, #0
 8005c6a:	d020      	beq.n	8005cae <__multiply+0xe2>
 8005c6c:	46b1      	mov	r9, r6
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f105 0e14 	add.w	lr, r5, #20
 8005c74:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005c78:	f8d9 b000 	ldr.w	fp, [r9]
 8005c7c:	b2a1      	uxth	r1, r4
 8005c7e:	fa1f fb8b 	uxth.w	fp, fp
 8005c82:	fb0a b101 	mla	r1, sl, r1, fp
 8005c86:	4411      	add	r1, r2
 8005c88:	f8d9 2000 	ldr.w	r2, [r9]
 8005c8c:	0c24      	lsrs	r4, r4, #16
 8005c8e:	0c12      	lsrs	r2, r2, #16
 8005c90:	fb0a 2404 	mla	r4, sl, r4, r2
 8005c94:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005c98:	b289      	uxth	r1, r1
 8005c9a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c9e:	45f4      	cmp	ip, lr
 8005ca0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005ca4:	f849 1b04 	str.w	r1, [r9], #4
 8005ca8:	d8e4      	bhi.n	8005c74 <__multiply+0xa8>
 8005caa:	9901      	ldr	r1, [sp, #4]
 8005cac:	5072      	str	r2, [r6, r1]
 8005cae:	9a03      	ldr	r2, [sp, #12]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005cb6:	f1b9 0f00 	cmp.w	r9, #0
 8005cba:	d01f      	beq.n	8005cfc <__multiply+0x130>
 8005cbc:	46b6      	mov	lr, r6
 8005cbe:	f04f 0a00 	mov.w	sl, #0
 8005cc2:	6834      	ldr	r4, [r6, #0]
 8005cc4:	f105 0114 	add.w	r1, r5, #20
 8005cc8:	880a      	ldrh	r2, [r1, #0]
 8005cca:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005cce:	b2a4      	uxth	r4, r4
 8005cd0:	fb09 b202 	mla	r2, r9, r2, fp
 8005cd4:	4492      	add	sl, r2
 8005cd6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005cda:	f84e 4b04 	str.w	r4, [lr], #4
 8005cde:	f851 4b04 	ldr.w	r4, [r1], #4
 8005ce2:	f8be 2000 	ldrh.w	r2, [lr]
 8005ce6:	0c24      	lsrs	r4, r4, #16
 8005ce8:	fb09 2404 	mla	r4, r9, r4, r2
 8005cec:	458c      	cmp	ip, r1
 8005cee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005cf2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005cf6:	d8e7      	bhi.n	8005cc8 <__multiply+0xfc>
 8005cf8:	9a01      	ldr	r2, [sp, #4]
 8005cfa:	50b4      	str	r4, [r6, r2]
 8005cfc:	3604      	adds	r6, #4
 8005cfe:	e7a3      	b.n	8005c48 <__multiply+0x7c>
 8005d00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1a5      	bne.n	8005c54 <__multiply+0x88>
 8005d08:	3f01      	subs	r7, #1
 8005d0a:	e7a1      	b.n	8005c50 <__multiply+0x84>
 8005d0c:	0800719f 	.word	0x0800719f
 8005d10:	080071b0 	.word	0x080071b0

08005d14 <__pow5mult>:
 8005d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d18:	4615      	mov	r5, r2
 8005d1a:	f012 0203 	ands.w	r2, r2, #3
 8005d1e:	4606      	mov	r6, r0
 8005d20:	460f      	mov	r7, r1
 8005d22:	d007      	beq.n	8005d34 <__pow5mult+0x20>
 8005d24:	4c25      	ldr	r4, [pc, #148]	; (8005dbc <__pow5mult+0xa8>)
 8005d26:	3a01      	subs	r2, #1
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d2e:	f7ff fe9f 	bl	8005a70 <__multadd>
 8005d32:	4607      	mov	r7, r0
 8005d34:	10ad      	asrs	r5, r5, #2
 8005d36:	d03d      	beq.n	8005db4 <__pow5mult+0xa0>
 8005d38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d3a:	b97c      	cbnz	r4, 8005d5c <__pow5mult+0x48>
 8005d3c:	2010      	movs	r0, #16
 8005d3e:	f7ff fe11 	bl	8005964 <malloc>
 8005d42:	4602      	mov	r2, r0
 8005d44:	6270      	str	r0, [r6, #36]	; 0x24
 8005d46:	b928      	cbnz	r0, 8005d54 <__pow5mult+0x40>
 8005d48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d4c:	4b1c      	ldr	r3, [pc, #112]	; (8005dc0 <__pow5mult+0xac>)
 8005d4e:	481d      	ldr	r0, [pc, #116]	; (8005dc4 <__pow5mult+0xb0>)
 8005d50:	f000 fbce 	bl	80064f0 <__assert_func>
 8005d54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d58:	6004      	str	r4, [r0, #0]
 8005d5a:	60c4      	str	r4, [r0, #12]
 8005d5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d64:	b94c      	cbnz	r4, 8005d7a <__pow5mult+0x66>
 8005d66:	f240 2171 	movw	r1, #625	; 0x271
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7ff ff18 	bl	8005ba0 <__i2b>
 8005d70:	2300      	movs	r3, #0
 8005d72:	4604      	mov	r4, r0
 8005d74:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d78:	6003      	str	r3, [r0, #0]
 8005d7a:	f04f 0900 	mov.w	r9, #0
 8005d7e:	07eb      	lsls	r3, r5, #31
 8005d80:	d50a      	bpl.n	8005d98 <__pow5mult+0x84>
 8005d82:	4639      	mov	r1, r7
 8005d84:	4622      	mov	r2, r4
 8005d86:	4630      	mov	r0, r6
 8005d88:	f7ff ff20 	bl	8005bcc <__multiply>
 8005d8c:	4680      	mov	r8, r0
 8005d8e:	4639      	mov	r1, r7
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7ff fe4b 	bl	8005a2c <_Bfree>
 8005d96:	4647      	mov	r7, r8
 8005d98:	106d      	asrs	r5, r5, #1
 8005d9a:	d00b      	beq.n	8005db4 <__pow5mult+0xa0>
 8005d9c:	6820      	ldr	r0, [r4, #0]
 8005d9e:	b938      	cbnz	r0, 8005db0 <__pow5mult+0x9c>
 8005da0:	4622      	mov	r2, r4
 8005da2:	4621      	mov	r1, r4
 8005da4:	4630      	mov	r0, r6
 8005da6:	f7ff ff11 	bl	8005bcc <__multiply>
 8005daa:	6020      	str	r0, [r4, #0]
 8005dac:	f8c0 9000 	str.w	r9, [r0]
 8005db0:	4604      	mov	r4, r0
 8005db2:	e7e4      	b.n	8005d7e <__pow5mult+0x6a>
 8005db4:	4638      	mov	r0, r7
 8005db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dba:	bf00      	nop
 8005dbc:	08007300 	.word	0x08007300
 8005dc0:	08007129 	.word	0x08007129
 8005dc4:	080071b0 	.word	0x080071b0

08005dc8 <__lshift>:
 8005dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dcc:	460c      	mov	r4, r1
 8005dce:	4607      	mov	r7, r0
 8005dd0:	4691      	mov	r9, r2
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	6849      	ldr	r1, [r1, #4]
 8005dd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dda:	68a3      	ldr	r3, [r4, #8]
 8005ddc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005de0:	f108 0601 	add.w	r6, r8, #1
 8005de4:	42b3      	cmp	r3, r6
 8005de6:	db0b      	blt.n	8005e00 <__lshift+0x38>
 8005de8:	4638      	mov	r0, r7
 8005dea:	f7ff fddf 	bl	80059ac <_Balloc>
 8005dee:	4605      	mov	r5, r0
 8005df0:	b948      	cbnz	r0, 8005e06 <__lshift+0x3e>
 8005df2:	4602      	mov	r2, r0
 8005df4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005df8:	4b27      	ldr	r3, [pc, #156]	; (8005e98 <__lshift+0xd0>)
 8005dfa:	4828      	ldr	r0, [pc, #160]	; (8005e9c <__lshift+0xd4>)
 8005dfc:	f000 fb78 	bl	80064f0 <__assert_func>
 8005e00:	3101      	adds	r1, #1
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	e7ee      	b.n	8005de4 <__lshift+0x1c>
 8005e06:	2300      	movs	r3, #0
 8005e08:	f100 0114 	add.w	r1, r0, #20
 8005e0c:	f100 0210 	add.w	r2, r0, #16
 8005e10:	4618      	mov	r0, r3
 8005e12:	4553      	cmp	r3, sl
 8005e14:	db33      	blt.n	8005e7e <__lshift+0xb6>
 8005e16:	6920      	ldr	r0, [r4, #16]
 8005e18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e1c:	f104 0314 	add.w	r3, r4, #20
 8005e20:	f019 091f 	ands.w	r9, r9, #31
 8005e24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e2c:	d02b      	beq.n	8005e86 <__lshift+0xbe>
 8005e2e:	468a      	mov	sl, r1
 8005e30:	2200      	movs	r2, #0
 8005e32:	f1c9 0e20 	rsb	lr, r9, #32
 8005e36:	6818      	ldr	r0, [r3, #0]
 8005e38:	fa00 f009 	lsl.w	r0, r0, r9
 8005e3c:	4302      	orrs	r2, r0
 8005e3e:	f84a 2b04 	str.w	r2, [sl], #4
 8005e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e46:	459c      	cmp	ip, r3
 8005e48:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e4c:	d8f3      	bhi.n	8005e36 <__lshift+0x6e>
 8005e4e:	ebac 0304 	sub.w	r3, ip, r4
 8005e52:	3b15      	subs	r3, #21
 8005e54:	f023 0303 	bic.w	r3, r3, #3
 8005e58:	3304      	adds	r3, #4
 8005e5a:	f104 0015 	add.w	r0, r4, #21
 8005e5e:	4584      	cmp	ip, r0
 8005e60:	bf38      	it	cc
 8005e62:	2304      	movcc	r3, #4
 8005e64:	50ca      	str	r2, [r1, r3]
 8005e66:	b10a      	cbz	r2, 8005e6c <__lshift+0xa4>
 8005e68:	f108 0602 	add.w	r6, r8, #2
 8005e6c:	3e01      	subs	r6, #1
 8005e6e:	4638      	mov	r0, r7
 8005e70:	4621      	mov	r1, r4
 8005e72:	612e      	str	r6, [r5, #16]
 8005e74:	f7ff fdda 	bl	8005a2c <_Bfree>
 8005e78:	4628      	mov	r0, r5
 8005e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e82:	3301      	adds	r3, #1
 8005e84:	e7c5      	b.n	8005e12 <__lshift+0x4a>
 8005e86:	3904      	subs	r1, #4
 8005e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e8c:	459c      	cmp	ip, r3
 8005e8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e92:	d8f9      	bhi.n	8005e88 <__lshift+0xc0>
 8005e94:	e7ea      	b.n	8005e6c <__lshift+0xa4>
 8005e96:	bf00      	nop
 8005e98:	0800719f 	.word	0x0800719f
 8005e9c:	080071b0 	.word	0x080071b0

08005ea0 <__mcmp>:
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	690a      	ldr	r2, [r1, #16]
 8005ea4:	6900      	ldr	r0, [r0, #16]
 8005ea6:	b530      	push	{r4, r5, lr}
 8005ea8:	1a80      	subs	r0, r0, r2
 8005eaa:	d10d      	bne.n	8005ec8 <__mcmp+0x28>
 8005eac:	3314      	adds	r3, #20
 8005eae:	3114      	adds	r1, #20
 8005eb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005eb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005eb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ebc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ec0:	4295      	cmp	r5, r2
 8005ec2:	d002      	beq.n	8005eca <__mcmp+0x2a>
 8005ec4:	d304      	bcc.n	8005ed0 <__mcmp+0x30>
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	bd30      	pop	{r4, r5, pc}
 8005eca:	42a3      	cmp	r3, r4
 8005ecc:	d3f4      	bcc.n	8005eb8 <__mcmp+0x18>
 8005ece:	e7fb      	b.n	8005ec8 <__mcmp+0x28>
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	e7f8      	b.n	8005ec8 <__mcmp+0x28>
	...

08005ed8 <__mdiff>:
 8005ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005edc:	460c      	mov	r4, r1
 8005ede:	4606      	mov	r6, r0
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	4692      	mov	sl, r2
 8005ee6:	f7ff ffdb 	bl	8005ea0 <__mcmp>
 8005eea:	1e05      	subs	r5, r0, #0
 8005eec:	d111      	bne.n	8005f12 <__mdiff+0x3a>
 8005eee:	4629      	mov	r1, r5
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f7ff fd5b 	bl	80059ac <_Balloc>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	b928      	cbnz	r0, 8005f06 <__mdiff+0x2e>
 8005efa:	f240 2132 	movw	r1, #562	; 0x232
 8005efe:	4b3c      	ldr	r3, [pc, #240]	; (8005ff0 <__mdiff+0x118>)
 8005f00:	483c      	ldr	r0, [pc, #240]	; (8005ff4 <__mdiff+0x11c>)
 8005f02:	f000 faf5 	bl	80064f0 <__assert_func>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f12:	bfa4      	itt	ge
 8005f14:	4653      	movge	r3, sl
 8005f16:	46a2      	movge	sl, r4
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005f1e:	bfa6      	itte	ge
 8005f20:	461c      	movge	r4, r3
 8005f22:	2500      	movge	r5, #0
 8005f24:	2501      	movlt	r5, #1
 8005f26:	f7ff fd41 	bl	80059ac <_Balloc>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	b918      	cbnz	r0, 8005f36 <__mdiff+0x5e>
 8005f2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f32:	4b2f      	ldr	r3, [pc, #188]	; (8005ff0 <__mdiff+0x118>)
 8005f34:	e7e4      	b.n	8005f00 <__mdiff+0x28>
 8005f36:	f100 0814 	add.w	r8, r0, #20
 8005f3a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005f3e:	60c5      	str	r5, [r0, #12]
 8005f40:	f04f 0c00 	mov.w	ip, #0
 8005f44:	f10a 0514 	add.w	r5, sl, #20
 8005f48:	f10a 0010 	add.w	r0, sl, #16
 8005f4c:	46c2      	mov	sl, r8
 8005f4e:	6926      	ldr	r6, [r4, #16]
 8005f50:	f104 0914 	add.w	r9, r4, #20
 8005f54:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005f58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f5c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005f60:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f64:	fa1f f18b 	uxth.w	r1, fp
 8005f68:	4461      	add	r1, ip
 8005f6a:	fa1f fc83 	uxth.w	ip, r3
 8005f6e:	0c1b      	lsrs	r3, r3, #16
 8005f70:	eba1 010c 	sub.w	r1, r1, ip
 8005f74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f78:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f7c:	b289      	uxth	r1, r1
 8005f7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f82:	454e      	cmp	r6, r9
 8005f84:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f88:	f84a 3b04 	str.w	r3, [sl], #4
 8005f8c:	d8e6      	bhi.n	8005f5c <__mdiff+0x84>
 8005f8e:	1b33      	subs	r3, r6, r4
 8005f90:	3b15      	subs	r3, #21
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	3415      	adds	r4, #21
 8005f98:	3304      	adds	r3, #4
 8005f9a:	42a6      	cmp	r6, r4
 8005f9c:	bf38      	it	cc
 8005f9e:	2304      	movcc	r3, #4
 8005fa0:	441d      	add	r5, r3
 8005fa2:	4443      	add	r3, r8
 8005fa4:	461e      	mov	r6, r3
 8005fa6:	462c      	mov	r4, r5
 8005fa8:	4574      	cmp	r4, lr
 8005faa:	d30e      	bcc.n	8005fca <__mdiff+0xf2>
 8005fac:	f10e 0103 	add.w	r1, lr, #3
 8005fb0:	1b49      	subs	r1, r1, r5
 8005fb2:	f021 0103 	bic.w	r1, r1, #3
 8005fb6:	3d03      	subs	r5, #3
 8005fb8:	45ae      	cmp	lr, r5
 8005fba:	bf38      	it	cc
 8005fbc:	2100      	movcc	r1, #0
 8005fbe:	4419      	add	r1, r3
 8005fc0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005fc4:	b18b      	cbz	r3, 8005fea <__mdiff+0x112>
 8005fc6:	6117      	str	r7, [r2, #16]
 8005fc8:	e7a0      	b.n	8005f0c <__mdiff+0x34>
 8005fca:	f854 8b04 	ldr.w	r8, [r4], #4
 8005fce:	fa1f f188 	uxth.w	r1, r8
 8005fd2:	4461      	add	r1, ip
 8005fd4:	1408      	asrs	r0, r1, #16
 8005fd6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005fda:	b289      	uxth	r1, r1
 8005fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005fe0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005fe4:	f846 1b04 	str.w	r1, [r6], #4
 8005fe8:	e7de      	b.n	8005fa8 <__mdiff+0xd0>
 8005fea:	3f01      	subs	r7, #1
 8005fec:	e7e8      	b.n	8005fc0 <__mdiff+0xe8>
 8005fee:	bf00      	nop
 8005ff0:	0800719f 	.word	0x0800719f
 8005ff4:	080071b0 	.word	0x080071b0

08005ff8 <__d2b>:
 8005ff8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006002:	4690      	mov	r8, r2
 8006004:	461d      	mov	r5, r3
 8006006:	f7ff fcd1 	bl	80059ac <_Balloc>
 800600a:	4604      	mov	r4, r0
 800600c:	b930      	cbnz	r0, 800601c <__d2b+0x24>
 800600e:	4602      	mov	r2, r0
 8006010:	f240 310a 	movw	r1, #778	; 0x30a
 8006014:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <__d2b+0xb0>)
 8006016:	4825      	ldr	r0, [pc, #148]	; (80060ac <__d2b+0xb4>)
 8006018:	f000 fa6a 	bl	80064f0 <__assert_func>
 800601c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006020:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006024:	bb2d      	cbnz	r5, 8006072 <__d2b+0x7a>
 8006026:	9301      	str	r3, [sp, #4]
 8006028:	f1b8 0300 	subs.w	r3, r8, #0
 800602c:	d026      	beq.n	800607c <__d2b+0x84>
 800602e:	4668      	mov	r0, sp
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	f7ff fd87 	bl	8005b44 <__lo0bits>
 8006036:	9900      	ldr	r1, [sp, #0]
 8006038:	b1f0      	cbz	r0, 8006078 <__d2b+0x80>
 800603a:	9a01      	ldr	r2, [sp, #4]
 800603c:	f1c0 0320 	rsb	r3, r0, #32
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	430b      	orrs	r3, r1
 8006046:	40c2      	lsrs	r2, r0
 8006048:	6163      	str	r3, [r4, #20]
 800604a:	9201      	str	r2, [sp, #4]
 800604c:	9b01      	ldr	r3, [sp, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	bf14      	ite	ne
 8006052:	2102      	movne	r1, #2
 8006054:	2101      	moveq	r1, #1
 8006056:	61a3      	str	r3, [r4, #24]
 8006058:	6121      	str	r1, [r4, #16]
 800605a:	b1c5      	cbz	r5, 800608e <__d2b+0x96>
 800605c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006060:	4405      	add	r5, r0
 8006062:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006066:	603d      	str	r5, [r7, #0]
 8006068:	6030      	str	r0, [r6, #0]
 800606a:	4620      	mov	r0, r4
 800606c:	b002      	add	sp, #8
 800606e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006076:	e7d6      	b.n	8006026 <__d2b+0x2e>
 8006078:	6161      	str	r1, [r4, #20]
 800607a:	e7e7      	b.n	800604c <__d2b+0x54>
 800607c:	a801      	add	r0, sp, #4
 800607e:	f7ff fd61 	bl	8005b44 <__lo0bits>
 8006082:	2101      	movs	r1, #1
 8006084:	9b01      	ldr	r3, [sp, #4]
 8006086:	6121      	str	r1, [r4, #16]
 8006088:	6163      	str	r3, [r4, #20]
 800608a:	3020      	adds	r0, #32
 800608c:	e7e5      	b.n	800605a <__d2b+0x62>
 800608e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006092:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006096:	6038      	str	r0, [r7, #0]
 8006098:	6918      	ldr	r0, [r3, #16]
 800609a:	f7ff fd33 	bl	8005b04 <__hi0bits>
 800609e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80060a2:	6031      	str	r1, [r6, #0]
 80060a4:	e7e1      	b.n	800606a <__d2b+0x72>
 80060a6:	bf00      	nop
 80060a8:	0800719f 	.word	0x0800719f
 80060ac:	080071b0 	.word	0x080071b0

080060b0 <_calloc_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	fb02 f501 	mul.w	r5, r2, r1
 80060b6:	4629      	mov	r1, r5
 80060b8:	f000 f854 	bl	8006164 <_malloc_r>
 80060bc:	4604      	mov	r4, r0
 80060be:	b118      	cbz	r0, 80060c8 <_calloc_r+0x18>
 80060c0:	462a      	mov	r2, r5
 80060c2:	2100      	movs	r1, #0
 80060c4:	f7fe f946 	bl	8004354 <memset>
 80060c8:	4620      	mov	r0, r4
 80060ca:	bd38      	pop	{r3, r4, r5, pc}

080060cc <_free_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	4605      	mov	r5, r0
 80060d0:	2900      	cmp	r1, #0
 80060d2:	d043      	beq.n	800615c <_free_r+0x90>
 80060d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060d8:	1f0c      	subs	r4, r1, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bfb8      	it	lt
 80060de:	18e4      	addlt	r4, r4, r3
 80060e0:	f000 fa62 	bl	80065a8 <__malloc_lock>
 80060e4:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <_free_r+0x94>)
 80060e6:	6813      	ldr	r3, [r2, #0]
 80060e8:	4610      	mov	r0, r2
 80060ea:	b933      	cbnz	r3, 80060fa <_free_r+0x2e>
 80060ec:	6063      	str	r3, [r4, #4]
 80060ee:	6014      	str	r4, [r2, #0]
 80060f0:	4628      	mov	r0, r5
 80060f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060f6:	f000 ba5d 	b.w	80065b4 <__malloc_unlock>
 80060fa:	42a3      	cmp	r3, r4
 80060fc:	d90a      	bls.n	8006114 <_free_r+0x48>
 80060fe:	6821      	ldr	r1, [r4, #0]
 8006100:	1862      	adds	r2, r4, r1
 8006102:	4293      	cmp	r3, r2
 8006104:	bf01      	itttt	eq
 8006106:	681a      	ldreq	r2, [r3, #0]
 8006108:	685b      	ldreq	r3, [r3, #4]
 800610a:	1852      	addeq	r2, r2, r1
 800610c:	6022      	streq	r2, [r4, #0]
 800610e:	6063      	str	r3, [r4, #4]
 8006110:	6004      	str	r4, [r0, #0]
 8006112:	e7ed      	b.n	80060f0 <_free_r+0x24>
 8006114:	461a      	mov	r2, r3
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	b10b      	cbz	r3, 800611e <_free_r+0x52>
 800611a:	42a3      	cmp	r3, r4
 800611c:	d9fa      	bls.n	8006114 <_free_r+0x48>
 800611e:	6811      	ldr	r1, [r2, #0]
 8006120:	1850      	adds	r0, r2, r1
 8006122:	42a0      	cmp	r0, r4
 8006124:	d10b      	bne.n	800613e <_free_r+0x72>
 8006126:	6820      	ldr	r0, [r4, #0]
 8006128:	4401      	add	r1, r0
 800612a:	1850      	adds	r0, r2, r1
 800612c:	4283      	cmp	r3, r0
 800612e:	6011      	str	r1, [r2, #0]
 8006130:	d1de      	bne.n	80060f0 <_free_r+0x24>
 8006132:	6818      	ldr	r0, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	4401      	add	r1, r0
 8006138:	6011      	str	r1, [r2, #0]
 800613a:	6053      	str	r3, [r2, #4]
 800613c:	e7d8      	b.n	80060f0 <_free_r+0x24>
 800613e:	d902      	bls.n	8006146 <_free_r+0x7a>
 8006140:	230c      	movs	r3, #12
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	e7d4      	b.n	80060f0 <_free_r+0x24>
 8006146:	6820      	ldr	r0, [r4, #0]
 8006148:	1821      	adds	r1, r4, r0
 800614a:	428b      	cmp	r3, r1
 800614c:	bf01      	itttt	eq
 800614e:	6819      	ldreq	r1, [r3, #0]
 8006150:	685b      	ldreq	r3, [r3, #4]
 8006152:	1809      	addeq	r1, r1, r0
 8006154:	6021      	streq	r1, [r4, #0]
 8006156:	6063      	str	r3, [r4, #4]
 8006158:	6054      	str	r4, [r2, #4]
 800615a:	e7c9      	b.n	80060f0 <_free_r+0x24>
 800615c:	bd38      	pop	{r3, r4, r5, pc}
 800615e:	bf00      	nop
 8006160:	20000218 	.word	0x20000218

08006164 <_malloc_r>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	1ccd      	adds	r5, r1, #3
 8006168:	f025 0503 	bic.w	r5, r5, #3
 800616c:	3508      	adds	r5, #8
 800616e:	2d0c      	cmp	r5, #12
 8006170:	bf38      	it	cc
 8006172:	250c      	movcc	r5, #12
 8006174:	2d00      	cmp	r5, #0
 8006176:	4606      	mov	r6, r0
 8006178:	db01      	blt.n	800617e <_malloc_r+0x1a>
 800617a:	42a9      	cmp	r1, r5
 800617c:	d903      	bls.n	8006186 <_malloc_r+0x22>
 800617e:	230c      	movs	r3, #12
 8006180:	6033      	str	r3, [r6, #0]
 8006182:	2000      	movs	r0, #0
 8006184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006186:	f000 fa0f 	bl	80065a8 <__malloc_lock>
 800618a:	4921      	ldr	r1, [pc, #132]	; (8006210 <_malloc_r+0xac>)
 800618c:	680a      	ldr	r2, [r1, #0]
 800618e:	4614      	mov	r4, r2
 8006190:	b99c      	cbnz	r4, 80061ba <_malloc_r+0x56>
 8006192:	4f20      	ldr	r7, [pc, #128]	; (8006214 <_malloc_r+0xb0>)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	b923      	cbnz	r3, 80061a2 <_malloc_r+0x3e>
 8006198:	4621      	mov	r1, r4
 800619a:	4630      	mov	r0, r6
 800619c:	f000 f998 	bl	80064d0 <_sbrk_r>
 80061a0:	6038      	str	r0, [r7, #0]
 80061a2:	4629      	mov	r1, r5
 80061a4:	4630      	mov	r0, r6
 80061a6:	f000 f993 	bl	80064d0 <_sbrk_r>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	d123      	bne.n	80061f6 <_malloc_r+0x92>
 80061ae:	230c      	movs	r3, #12
 80061b0:	4630      	mov	r0, r6
 80061b2:	6033      	str	r3, [r6, #0]
 80061b4:	f000 f9fe 	bl	80065b4 <__malloc_unlock>
 80061b8:	e7e3      	b.n	8006182 <_malloc_r+0x1e>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	1b5b      	subs	r3, r3, r5
 80061be:	d417      	bmi.n	80061f0 <_malloc_r+0x8c>
 80061c0:	2b0b      	cmp	r3, #11
 80061c2:	d903      	bls.n	80061cc <_malloc_r+0x68>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	441c      	add	r4, r3
 80061c8:	6025      	str	r5, [r4, #0]
 80061ca:	e004      	b.n	80061d6 <_malloc_r+0x72>
 80061cc:	6863      	ldr	r3, [r4, #4]
 80061ce:	42a2      	cmp	r2, r4
 80061d0:	bf0c      	ite	eq
 80061d2:	600b      	streq	r3, [r1, #0]
 80061d4:	6053      	strne	r3, [r2, #4]
 80061d6:	4630      	mov	r0, r6
 80061d8:	f000 f9ec 	bl	80065b4 <__malloc_unlock>
 80061dc:	f104 000b 	add.w	r0, r4, #11
 80061e0:	1d23      	adds	r3, r4, #4
 80061e2:	f020 0007 	bic.w	r0, r0, #7
 80061e6:	1ac2      	subs	r2, r0, r3
 80061e8:	d0cc      	beq.n	8006184 <_malloc_r+0x20>
 80061ea:	1a1b      	subs	r3, r3, r0
 80061ec:	50a3      	str	r3, [r4, r2]
 80061ee:	e7c9      	b.n	8006184 <_malloc_r+0x20>
 80061f0:	4622      	mov	r2, r4
 80061f2:	6864      	ldr	r4, [r4, #4]
 80061f4:	e7cc      	b.n	8006190 <_malloc_r+0x2c>
 80061f6:	1cc4      	adds	r4, r0, #3
 80061f8:	f024 0403 	bic.w	r4, r4, #3
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	d0e3      	beq.n	80061c8 <_malloc_r+0x64>
 8006200:	1a21      	subs	r1, r4, r0
 8006202:	4630      	mov	r0, r6
 8006204:	f000 f964 	bl	80064d0 <_sbrk_r>
 8006208:	3001      	adds	r0, #1
 800620a:	d1dd      	bne.n	80061c8 <_malloc_r+0x64>
 800620c:	e7cf      	b.n	80061ae <_malloc_r+0x4a>
 800620e:	bf00      	nop
 8006210:	20000218 	.word	0x20000218
 8006214:	2000021c 	.word	0x2000021c

08006218 <__ssputs_r>:
 8006218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800621c:	688e      	ldr	r6, [r1, #8]
 800621e:	4682      	mov	sl, r0
 8006220:	429e      	cmp	r6, r3
 8006222:	460c      	mov	r4, r1
 8006224:	4690      	mov	r8, r2
 8006226:	461f      	mov	r7, r3
 8006228:	d838      	bhi.n	800629c <__ssputs_r+0x84>
 800622a:	898a      	ldrh	r2, [r1, #12]
 800622c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006230:	d032      	beq.n	8006298 <__ssputs_r+0x80>
 8006232:	6825      	ldr	r5, [r4, #0]
 8006234:	6909      	ldr	r1, [r1, #16]
 8006236:	3301      	adds	r3, #1
 8006238:	eba5 0901 	sub.w	r9, r5, r1
 800623c:	6965      	ldr	r5, [r4, #20]
 800623e:	444b      	add	r3, r9
 8006240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006244:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006248:	106d      	asrs	r5, r5, #1
 800624a:	429d      	cmp	r5, r3
 800624c:	bf38      	it	cc
 800624e:	461d      	movcc	r5, r3
 8006250:	0553      	lsls	r3, r2, #21
 8006252:	d531      	bpl.n	80062b8 <__ssputs_r+0xa0>
 8006254:	4629      	mov	r1, r5
 8006256:	f7ff ff85 	bl	8006164 <_malloc_r>
 800625a:	4606      	mov	r6, r0
 800625c:	b950      	cbnz	r0, 8006274 <__ssputs_r+0x5c>
 800625e:	230c      	movs	r3, #12
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	f8ca 3000 	str.w	r3, [sl]
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800626e:	81a3      	strh	r3, [r4, #12]
 8006270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006274:	464a      	mov	r2, r9
 8006276:	6921      	ldr	r1, [r4, #16]
 8006278:	f7ff fb8a 	bl	8005990 <memcpy>
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006286:	81a3      	strh	r3, [r4, #12]
 8006288:	6126      	str	r6, [r4, #16]
 800628a:	444e      	add	r6, r9
 800628c:	6026      	str	r6, [r4, #0]
 800628e:	463e      	mov	r6, r7
 8006290:	6165      	str	r5, [r4, #20]
 8006292:	eba5 0509 	sub.w	r5, r5, r9
 8006296:	60a5      	str	r5, [r4, #8]
 8006298:	42be      	cmp	r6, r7
 800629a:	d900      	bls.n	800629e <__ssputs_r+0x86>
 800629c:	463e      	mov	r6, r7
 800629e:	4632      	mov	r2, r6
 80062a0:	4641      	mov	r1, r8
 80062a2:	6820      	ldr	r0, [r4, #0]
 80062a4:	f000 f966 	bl	8006574 <memmove>
 80062a8:	68a3      	ldr	r3, [r4, #8]
 80062aa:	6822      	ldr	r2, [r4, #0]
 80062ac:	1b9b      	subs	r3, r3, r6
 80062ae:	4432      	add	r2, r6
 80062b0:	2000      	movs	r0, #0
 80062b2:	60a3      	str	r3, [r4, #8]
 80062b4:	6022      	str	r2, [r4, #0]
 80062b6:	e7db      	b.n	8006270 <__ssputs_r+0x58>
 80062b8:	462a      	mov	r2, r5
 80062ba:	f000 f981 	bl	80065c0 <_realloc_r>
 80062be:	4606      	mov	r6, r0
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d1e1      	bne.n	8006288 <__ssputs_r+0x70>
 80062c4:	4650      	mov	r0, sl
 80062c6:	6921      	ldr	r1, [r4, #16]
 80062c8:	f7ff ff00 	bl	80060cc <_free_r>
 80062cc:	e7c7      	b.n	800625e <__ssputs_r+0x46>
	...

080062d0 <_svfiprintf_r>:
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	4698      	mov	r8, r3
 80062d6:	898b      	ldrh	r3, [r1, #12]
 80062d8:	4607      	mov	r7, r0
 80062da:	061b      	lsls	r3, r3, #24
 80062dc:	460d      	mov	r5, r1
 80062de:	4614      	mov	r4, r2
 80062e0:	b09d      	sub	sp, #116	; 0x74
 80062e2:	d50e      	bpl.n	8006302 <_svfiprintf_r+0x32>
 80062e4:	690b      	ldr	r3, [r1, #16]
 80062e6:	b963      	cbnz	r3, 8006302 <_svfiprintf_r+0x32>
 80062e8:	2140      	movs	r1, #64	; 0x40
 80062ea:	f7ff ff3b 	bl	8006164 <_malloc_r>
 80062ee:	6028      	str	r0, [r5, #0]
 80062f0:	6128      	str	r0, [r5, #16]
 80062f2:	b920      	cbnz	r0, 80062fe <_svfiprintf_r+0x2e>
 80062f4:	230c      	movs	r3, #12
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	f04f 30ff 	mov.w	r0, #4294967295
 80062fc:	e0d1      	b.n	80064a2 <_svfiprintf_r+0x1d2>
 80062fe:	2340      	movs	r3, #64	; 0x40
 8006300:	616b      	str	r3, [r5, #20]
 8006302:	2300      	movs	r3, #0
 8006304:	9309      	str	r3, [sp, #36]	; 0x24
 8006306:	2320      	movs	r3, #32
 8006308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800630c:	2330      	movs	r3, #48	; 0x30
 800630e:	f04f 0901 	mov.w	r9, #1
 8006312:	f8cd 800c 	str.w	r8, [sp, #12]
 8006316:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80064bc <_svfiprintf_r+0x1ec>
 800631a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800631e:	4623      	mov	r3, r4
 8006320:	469a      	mov	sl, r3
 8006322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006326:	b10a      	cbz	r2, 800632c <_svfiprintf_r+0x5c>
 8006328:	2a25      	cmp	r2, #37	; 0x25
 800632a:	d1f9      	bne.n	8006320 <_svfiprintf_r+0x50>
 800632c:	ebba 0b04 	subs.w	fp, sl, r4
 8006330:	d00b      	beq.n	800634a <_svfiprintf_r+0x7a>
 8006332:	465b      	mov	r3, fp
 8006334:	4622      	mov	r2, r4
 8006336:	4629      	mov	r1, r5
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff ff6d 	bl	8006218 <__ssputs_r>
 800633e:	3001      	adds	r0, #1
 8006340:	f000 80aa 	beq.w	8006498 <_svfiprintf_r+0x1c8>
 8006344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006346:	445a      	add	r2, fp
 8006348:	9209      	str	r2, [sp, #36]	; 0x24
 800634a:	f89a 3000 	ldrb.w	r3, [sl]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80a2 	beq.w	8006498 <_svfiprintf_r+0x1c8>
 8006354:	2300      	movs	r3, #0
 8006356:	f04f 32ff 	mov.w	r2, #4294967295
 800635a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800635e:	f10a 0a01 	add.w	sl, sl, #1
 8006362:	9304      	str	r3, [sp, #16]
 8006364:	9307      	str	r3, [sp, #28]
 8006366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800636a:	931a      	str	r3, [sp, #104]	; 0x68
 800636c:	4654      	mov	r4, sl
 800636e:	2205      	movs	r2, #5
 8006370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006374:	4851      	ldr	r0, [pc, #324]	; (80064bc <_svfiprintf_r+0x1ec>)
 8006376:	f7ff fafd 	bl	8005974 <memchr>
 800637a:	9a04      	ldr	r2, [sp, #16]
 800637c:	b9d8      	cbnz	r0, 80063b6 <_svfiprintf_r+0xe6>
 800637e:	06d0      	lsls	r0, r2, #27
 8006380:	bf44      	itt	mi
 8006382:	2320      	movmi	r3, #32
 8006384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006388:	0711      	lsls	r1, r2, #28
 800638a:	bf44      	itt	mi
 800638c:	232b      	movmi	r3, #43	; 0x2b
 800638e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006392:	f89a 3000 	ldrb.w	r3, [sl]
 8006396:	2b2a      	cmp	r3, #42	; 0x2a
 8006398:	d015      	beq.n	80063c6 <_svfiprintf_r+0xf6>
 800639a:	4654      	mov	r4, sl
 800639c:	2000      	movs	r0, #0
 800639e:	f04f 0c0a 	mov.w	ip, #10
 80063a2:	9a07      	ldr	r2, [sp, #28]
 80063a4:	4621      	mov	r1, r4
 80063a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063aa:	3b30      	subs	r3, #48	; 0x30
 80063ac:	2b09      	cmp	r3, #9
 80063ae:	d94e      	bls.n	800644e <_svfiprintf_r+0x17e>
 80063b0:	b1b0      	cbz	r0, 80063e0 <_svfiprintf_r+0x110>
 80063b2:	9207      	str	r2, [sp, #28]
 80063b4:	e014      	b.n	80063e0 <_svfiprintf_r+0x110>
 80063b6:	eba0 0308 	sub.w	r3, r0, r8
 80063ba:	fa09 f303 	lsl.w	r3, r9, r3
 80063be:	4313      	orrs	r3, r2
 80063c0:	46a2      	mov	sl, r4
 80063c2:	9304      	str	r3, [sp, #16]
 80063c4:	e7d2      	b.n	800636c <_svfiprintf_r+0x9c>
 80063c6:	9b03      	ldr	r3, [sp, #12]
 80063c8:	1d19      	adds	r1, r3, #4
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	9103      	str	r1, [sp, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bfbb      	ittet	lt
 80063d2:	425b      	neglt	r3, r3
 80063d4:	f042 0202 	orrlt.w	r2, r2, #2
 80063d8:	9307      	strge	r3, [sp, #28]
 80063da:	9307      	strlt	r3, [sp, #28]
 80063dc:	bfb8      	it	lt
 80063de:	9204      	strlt	r2, [sp, #16]
 80063e0:	7823      	ldrb	r3, [r4, #0]
 80063e2:	2b2e      	cmp	r3, #46	; 0x2e
 80063e4:	d10c      	bne.n	8006400 <_svfiprintf_r+0x130>
 80063e6:	7863      	ldrb	r3, [r4, #1]
 80063e8:	2b2a      	cmp	r3, #42	; 0x2a
 80063ea:	d135      	bne.n	8006458 <_svfiprintf_r+0x188>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	3402      	adds	r4, #2
 80063f0:	1d1a      	adds	r2, r3, #4
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	9203      	str	r2, [sp, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bfb8      	it	lt
 80063fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80063fe:	9305      	str	r3, [sp, #20]
 8006400:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80064cc <_svfiprintf_r+0x1fc>
 8006404:	2203      	movs	r2, #3
 8006406:	4650      	mov	r0, sl
 8006408:	7821      	ldrb	r1, [r4, #0]
 800640a:	f7ff fab3 	bl	8005974 <memchr>
 800640e:	b140      	cbz	r0, 8006422 <_svfiprintf_r+0x152>
 8006410:	2340      	movs	r3, #64	; 0x40
 8006412:	eba0 000a 	sub.w	r0, r0, sl
 8006416:	fa03 f000 	lsl.w	r0, r3, r0
 800641a:	9b04      	ldr	r3, [sp, #16]
 800641c:	3401      	adds	r4, #1
 800641e:	4303      	orrs	r3, r0
 8006420:	9304      	str	r3, [sp, #16]
 8006422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006426:	2206      	movs	r2, #6
 8006428:	4825      	ldr	r0, [pc, #148]	; (80064c0 <_svfiprintf_r+0x1f0>)
 800642a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800642e:	f7ff faa1 	bl	8005974 <memchr>
 8006432:	2800      	cmp	r0, #0
 8006434:	d038      	beq.n	80064a8 <_svfiprintf_r+0x1d8>
 8006436:	4b23      	ldr	r3, [pc, #140]	; (80064c4 <_svfiprintf_r+0x1f4>)
 8006438:	bb1b      	cbnz	r3, 8006482 <_svfiprintf_r+0x1b2>
 800643a:	9b03      	ldr	r3, [sp, #12]
 800643c:	3307      	adds	r3, #7
 800643e:	f023 0307 	bic.w	r3, r3, #7
 8006442:	3308      	adds	r3, #8
 8006444:	9303      	str	r3, [sp, #12]
 8006446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006448:	4433      	add	r3, r6
 800644a:	9309      	str	r3, [sp, #36]	; 0x24
 800644c:	e767      	b.n	800631e <_svfiprintf_r+0x4e>
 800644e:	460c      	mov	r4, r1
 8006450:	2001      	movs	r0, #1
 8006452:	fb0c 3202 	mla	r2, ip, r2, r3
 8006456:	e7a5      	b.n	80063a4 <_svfiprintf_r+0xd4>
 8006458:	2300      	movs	r3, #0
 800645a:	f04f 0c0a 	mov.w	ip, #10
 800645e:	4619      	mov	r1, r3
 8006460:	3401      	adds	r4, #1
 8006462:	9305      	str	r3, [sp, #20]
 8006464:	4620      	mov	r0, r4
 8006466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800646a:	3a30      	subs	r2, #48	; 0x30
 800646c:	2a09      	cmp	r2, #9
 800646e:	d903      	bls.n	8006478 <_svfiprintf_r+0x1a8>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0c5      	beq.n	8006400 <_svfiprintf_r+0x130>
 8006474:	9105      	str	r1, [sp, #20]
 8006476:	e7c3      	b.n	8006400 <_svfiprintf_r+0x130>
 8006478:	4604      	mov	r4, r0
 800647a:	2301      	movs	r3, #1
 800647c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006480:	e7f0      	b.n	8006464 <_svfiprintf_r+0x194>
 8006482:	ab03      	add	r3, sp, #12
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	462a      	mov	r2, r5
 8006488:	4638      	mov	r0, r7
 800648a:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <_svfiprintf_r+0x1f8>)
 800648c:	a904      	add	r1, sp, #16
 800648e:	f7fe f807 	bl	80044a0 <_printf_float>
 8006492:	1c42      	adds	r2, r0, #1
 8006494:	4606      	mov	r6, r0
 8006496:	d1d6      	bne.n	8006446 <_svfiprintf_r+0x176>
 8006498:	89ab      	ldrh	r3, [r5, #12]
 800649a:	065b      	lsls	r3, r3, #25
 800649c:	f53f af2c 	bmi.w	80062f8 <_svfiprintf_r+0x28>
 80064a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064a2:	b01d      	add	sp, #116	; 0x74
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	ab03      	add	r3, sp, #12
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	462a      	mov	r2, r5
 80064ae:	4638      	mov	r0, r7
 80064b0:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <_svfiprintf_r+0x1f8>)
 80064b2:	a904      	add	r1, sp, #16
 80064b4:	f7fe fa90 	bl	80049d8 <_printf_i>
 80064b8:	e7eb      	b.n	8006492 <_svfiprintf_r+0x1c2>
 80064ba:	bf00      	nop
 80064bc:	0800730c 	.word	0x0800730c
 80064c0:	08007316 	.word	0x08007316
 80064c4:	080044a1 	.word	0x080044a1
 80064c8:	08006219 	.word	0x08006219
 80064cc:	08007312 	.word	0x08007312

080064d0 <_sbrk_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	2300      	movs	r3, #0
 80064d4:	4d05      	ldr	r5, [pc, #20]	; (80064ec <_sbrk_r+0x1c>)
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	f7fb f9d0 	bl	8001880 <_sbrk>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_sbrk_r+0x1a>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_sbrk_r+0x1a>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	20000308 	.word	0x20000308

080064f0 <__assert_func>:
 80064f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064f2:	4614      	mov	r4, r2
 80064f4:	461a      	mov	r2, r3
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <__assert_func+0x2c>)
 80064f8:	4605      	mov	r5, r0
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68d8      	ldr	r0, [r3, #12]
 80064fe:	b14c      	cbz	r4, 8006514 <__assert_func+0x24>
 8006500:	4b07      	ldr	r3, [pc, #28]	; (8006520 <__assert_func+0x30>)
 8006502:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006506:	9100      	str	r1, [sp, #0]
 8006508:	462b      	mov	r3, r5
 800650a:	4906      	ldr	r1, [pc, #24]	; (8006524 <__assert_func+0x34>)
 800650c:	f000 f80e 	bl	800652c <fiprintf>
 8006510:	f000 faa2 	bl	8006a58 <abort>
 8006514:	4b04      	ldr	r3, [pc, #16]	; (8006528 <__assert_func+0x38>)
 8006516:	461c      	mov	r4, r3
 8006518:	e7f3      	b.n	8006502 <__assert_func+0x12>
 800651a:	bf00      	nop
 800651c:	2000000c 	.word	0x2000000c
 8006520:	0800731d 	.word	0x0800731d
 8006524:	0800732a 	.word	0x0800732a
 8006528:	08007358 	.word	0x08007358

0800652c <fiprintf>:
 800652c:	b40e      	push	{r1, r2, r3}
 800652e:	b503      	push	{r0, r1, lr}
 8006530:	4601      	mov	r1, r0
 8006532:	ab03      	add	r3, sp, #12
 8006534:	4805      	ldr	r0, [pc, #20]	; (800654c <fiprintf+0x20>)
 8006536:	f853 2b04 	ldr.w	r2, [r3], #4
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	f000 f88d 	bl	800665c <_vfiprintf_r>
 8006542:	b002      	add	sp, #8
 8006544:	f85d eb04 	ldr.w	lr, [sp], #4
 8006548:	b003      	add	sp, #12
 800654a:	4770      	bx	lr
 800654c:	2000000c 	.word	0x2000000c

08006550 <__ascii_mbtowc>:
 8006550:	b082      	sub	sp, #8
 8006552:	b901      	cbnz	r1, 8006556 <__ascii_mbtowc+0x6>
 8006554:	a901      	add	r1, sp, #4
 8006556:	b142      	cbz	r2, 800656a <__ascii_mbtowc+0x1a>
 8006558:	b14b      	cbz	r3, 800656e <__ascii_mbtowc+0x1e>
 800655a:	7813      	ldrb	r3, [r2, #0]
 800655c:	600b      	str	r3, [r1, #0]
 800655e:	7812      	ldrb	r2, [r2, #0]
 8006560:	1e10      	subs	r0, r2, #0
 8006562:	bf18      	it	ne
 8006564:	2001      	movne	r0, #1
 8006566:	b002      	add	sp, #8
 8006568:	4770      	bx	lr
 800656a:	4610      	mov	r0, r2
 800656c:	e7fb      	b.n	8006566 <__ascii_mbtowc+0x16>
 800656e:	f06f 0001 	mvn.w	r0, #1
 8006572:	e7f8      	b.n	8006566 <__ascii_mbtowc+0x16>

08006574 <memmove>:
 8006574:	4288      	cmp	r0, r1
 8006576:	b510      	push	{r4, lr}
 8006578:	eb01 0402 	add.w	r4, r1, r2
 800657c:	d902      	bls.n	8006584 <memmove+0x10>
 800657e:	4284      	cmp	r4, r0
 8006580:	4623      	mov	r3, r4
 8006582:	d807      	bhi.n	8006594 <memmove+0x20>
 8006584:	1e43      	subs	r3, r0, #1
 8006586:	42a1      	cmp	r1, r4
 8006588:	d008      	beq.n	800659c <memmove+0x28>
 800658a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800658e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006592:	e7f8      	b.n	8006586 <memmove+0x12>
 8006594:	4601      	mov	r1, r0
 8006596:	4402      	add	r2, r0
 8006598:	428a      	cmp	r2, r1
 800659a:	d100      	bne.n	800659e <memmove+0x2a>
 800659c:	bd10      	pop	{r4, pc}
 800659e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065a6:	e7f7      	b.n	8006598 <memmove+0x24>

080065a8 <__malloc_lock>:
 80065a8:	4801      	ldr	r0, [pc, #4]	; (80065b0 <__malloc_lock+0x8>)
 80065aa:	f000 bc15 	b.w	8006dd8 <__retarget_lock_acquire_recursive>
 80065ae:	bf00      	nop
 80065b0:	20000310 	.word	0x20000310

080065b4 <__malloc_unlock>:
 80065b4:	4801      	ldr	r0, [pc, #4]	; (80065bc <__malloc_unlock+0x8>)
 80065b6:	f000 bc10 	b.w	8006dda <__retarget_lock_release_recursive>
 80065ba:	bf00      	nop
 80065bc:	20000310 	.word	0x20000310

080065c0 <_realloc_r>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	4607      	mov	r7, r0
 80065c4:	4614      	mov	r4, r2
 80065c6:	460e      	mov	r6, r1
 80065c8:	b921      	cbnz	r1, 80065d4 <_realloc_r+0x14>
 80065ca:	4611      	mov	r1, r2
 80065cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065d0:	f7ff bdc8 	b.w	8006164 <_malloc_r>
 80065d4:	b922      	cbnz	r2, 80065e0 <_realloc_r+0x20>
 80065d6:	f7ff fd79 	bl	80060cc <_free_r>
 80065da:	4625      	mov	r5, r4
 80065dc:	4628      	mov	r0, r5
 80065de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065e0:	f000 fc60 	bl	8006ea4 <_malloc_usable_size_r>
 80065e4:	42a0      	cmp	r0, r4
 80065e6:	d20f      	bcs.n	8006608 <_realloc_r+0x48>
 80065e8:	4621      	mov	r1, r4
 80065ea:	4638      	mov	r0, r7
 80065ec:	f7ff fdba 	bl	8006164 <_malloc_r>
 80065f0:	4605      	mov	r5, r0
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d0f2      	beq.n	80065dc <_realloc_r+0x1c>
 80065f6:	4631      	mov	r1, r6
 80065f8:	4622      	mov	r2, r4
 80065fa:	f7ff f9c9 	bl	8005990 <memcpy>
 80065fe:	4631      	mov	r1, r6
 8006600:	4638      	mov	r0, r7
 8006602:	f7ff fd63 	bl	80060cc <_free_r>
 8006606:	e7e9      	b.n	80065dc <_realloc_r+0x1c>
 8006608:	4635      	mov	r5, r6
 800660a:	e7e7      	b.n	80065dc <_realloc_r+0x1c>

0800660c <__sfputc_r>:
 800660c:	6893      	ldr	r3, [r2, #8]
 800660e:	b410      	push	{r4}
 8006610:	3b01      	subs	r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	6093      	str	r3, [r2, #8]
 8006616:	da07      	bge.n	8006628 <__sfputc_r+0x1c>
 8006618:	6994      	ldr	r4, [r2, #24]
 800661a:	42a3      	cmp	r3, r4
 800661c:	db01      	blt.n	8006622 <__sfputc_r+0x16>
 800661e:	290a      	cmp	r1, #10
 8006620:	d102      	bne.n	8006628 <__sfputc_r+0x1c>
 8006622:	bc10      	pop	{r4}
 8006624:	f000 b94a 	b.w	80068bc <__swbuf_r>
 8006628:	6813      	ldr	r3, [r2, #0]
 800662a:	1c58      	adds	r0, r3, #1
 800662c:	6010      	str	r0, [r2, #0]
 800662e:	7019      	strb	r1, [r3, #0]
 8006630:	4608      	mov	r0, r1
 8006632:	bc10      	pop	{r4}
 8006634:	4770      	bx	lr

08006636 <__sfputs_r>:
 8006636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006638:	4606      	mov	r6, r0
 800663a:	460f      	mov	r7, r1
 800663c:	4614      	mov	r4, r2
 800663e:	18d5      	adds	r5, r2, r3
 8006640:	42ac      	cmp	r4, r5
 8006642:	d101      	bne.n	8006648 <__sfputs_r+0x12>
 8006644:	2000      	movs	r0, #0
 8006646:	e007      	b.n	8006658 <__sfputs_r+0x22>
 8006648:	463a      	mov	r2, r7
 800664a:	4630      	mov	r0, r6
 800664c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006650:	f7ff ffdc 	bl	800660c <__sfputc_r>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d1f3      	bne.n	8006640 <__sfputs_r+0xa>
 8006658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800665c <_vfiprintf_r>:
 800665c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006660:	460d      	mov	r5, r1
 8006662:	4614      	mov	r4, r2
 8006664:	4698      	mov	r8, r3
 8006666:	4606      	mov	r6, r0
 8006668:	b09d      	sub	sp, #116	; 0x74
 800666a:	b118      	cbz	r0, 8006674 <_vfiprintf_r+0x18>
 800666c:	6983      	ldr	r3, [r0, #24]
 800666e:	b90b      	cbnz	r3, 8006674 <_vfiprintf_r+0x18>
 8006670:	f000 fb14 	bl	8006c9c <__sinit>
 8006674:	4b89      	ldr	r3, [pc, #548]	; (800689c <_vfiprintf_r+0x240>)
 8006676:	429d      	cmp	r5, r3
 8006678:	d11b      	bne.n	80066b2 <_vfiprintf_r+0x56>
 800667a:	6875      	ldr	r5, [r6, #4]
 800667c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800667e:	07d9      	lsls	r1, r3, #31
 8006680:	d405      	bmi.n	800668e <_vfiprintf_r+0x32>
 8006682:	89ab      	ldrh	r3, [r5, #12]
 8006684:	059a      	lsls	r2, r3, #22
 8006686:	d402      	bmi.n	800668e <_vfiprintf_r+0x32>
 8006688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800668a:	f000 fba5 	bl	8006dd8 <__retarget_lock_acquire_recursive>
 800668e:	89ab      	ldrh	r3, [r5, #12]
 8006690:	071b      	lsls	r3, r3, #28
 8006692:	d501      	bpl.n	8006698 <_vfiprintf_r+0x3c>
 8006694:	692b      	ldr	r3, [r5, #16]
 8006696:	b9eb      	cbnz	r3, 80066d4 <_vfiprintf_r+0x78>
 8006698:	4629      	mov	r1, r5
 800669a:	4630      	mov	r0, r6
 800669c:	f000 f96e 	bl	800697c <__swsetup_r>
 80066a0:	b1c0      	cbz	r0, 80066d4 <_vfiprintf_r+0x78>
 80066a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066a4:	07dc      	lsls	r4, r3, #31
 80066a6:	d50e      	bpl.n	80066c6 <_vfiprintf_r+0x6a>
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	b01d      	add	sp, #116	; 0x74
 80066ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b2:	4b7b      	ldr	r3, [pc, #492]	; (80068a0 <_vfiprintf_r+0x244>)
 80066b4:	429d      	cmp	r5, r3
 80066b6:	d101      	bne.n	80066bc <_vfiprintf_r+0x60>
 80066b8:	68b5      	ldr	r5, [r6, #8]
 80066ba:	e7df      	b.n	800667c <_vfiprintf_r+0x20>
 80066bc:	4b79      	ldr	r3, [pc, #484]	; (80068a4 <_vfiprintf_r+0x248>)
 80066be:	429d      	cmp	r5, r3
 80066c0:	bf08      	it	eq
 80066c2:	68f5      	ldreq	r5, [r6, #12]
 80066c4:	e7da      	b.n	800667c <_vfiprintf_r+0x20>
 80066c6:	89ab      	ldrh	r3, [r5, #12]
 80066c8:	0598      	lsls	r0, r3, #22
 80066ca:	d4ed      	bmi.n	80066a8 <_vfiprintf_r+0x4c>
 80066cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ce:	f000 fb84 	bl	8006dda <__retarget_lock_release_recursive>
 80066d2:	e7e9      	b.n	80066a8 <_vfiprintf_r+0x4c>
 80066d4:	2300      	movs	r3, #0
 80066d6:	9309      	str	r3, [sp, #36]	; 0x24
 80066d8:	2320      	movs	r3, #32
 80066da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066de:	2330      	movs	r3, #48	; 0x30
 80066e0:	f04f 0901 	mov.w	r9, #1
 80066e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80068a8 <_vfiprintf_r+0x24c>
 80066ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066f0:	4623      	mov	r3, r4
 80066f2:	469a      	mov	sl, r3
 80066f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066f8:	b10a      	cbz	r2, 80066fe <_vfiprintf_r+0xa2>
 80066fa:	2a25      	cmp	r2, #37	; 0x25
 80066fc:	d1f9      	bne.n	80066f2 <_vfiprintf_r+0x96>
 80066fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006702:	d00b      	beq.n	800671c <_vfiprintf_r+0xc0>
 8006704:	465b      	mov	r3, fp
 8006706:	4622      	mov	r2, r4
 8006708:	4629      	mov	r1, r5
 800670a:	4630      	mov	r0, r6
 800670c:	f7ff ff93 	bl	8006636 <__sfputs_r>
 8006710:	3001      	adds	r0, #1
 8006712:	f000 80aa 	beq.w	800686a <_vfiprintf_r+0x20e>
 8006716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006718:	445a      	add	r2, fp
 800671a:	9209      	str	r2, [sp, #36]	; 0x24
 800671c:	f89a 3000 	ldrb.w	r3, [sl]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80a2 	beq.w	800686a <_vfiprintf_r+0x20e>
 8006726:	2300      	movs	r3, #0
 8006728:	f04f 32ff 	mov.w	r2, #4294967295
 800672c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006730:	f10a 0a01 	add.w	sl, sl, #1
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	9307      	str	r3, [sp, #28]
 8006738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800673c:	931a      	str	r3, [sp, #104]	; 0x68
 800673e:	4654      	mov	r4, sl
 8006740:	2205      	movs	r2, #5
 8006742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006746:	4858      	ldr	r0, [pc, #352]	; (80068a8 <_vfiprintf_r+0x24c>)
 8006748:	f7ff f914 	bl	8005974 <memchr>
 800674c:	9a04      	ldr	r2, [sp, #16]
 800674e:	b9d8      	cbnz	r0, 8006788 <_vfiprintf_r+0x12c>
 8006750:	06d1      	lsls	r1, r2, #27
 8006752:	bf44      	itt	mi
 8006754:	2320      	movmi	r3, #32
 8006756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800675a:	0713      	lsls	r3, r2, #28
 800675c:	bf44      	itt	mi
 800675e:	232b      	movmi	r3, #43	; 0x2b
 8006760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006764:	f89a 3000 	ldrb.w	r3, [sl]
 8006768:	2b2a      	cmp	r3, #42	; 0x2a
 800676a:	d015      	beq.n	8006798 <_vfiprintf_r+0x13c>
 800676c:	4654      	mov	r4, sl
 800676e:	2000      	movs	r0, #0
 8006770:	f04f 0c0a 	mov.w	ip, #10
 8006774:	9a07      	ldr	r2, [sp, #28]
 8006776:	4621      	mov	r1, r4
 8006778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800677c:	3b30      	subs	r3, #48	; 0x30
 800677e:	2b09      	cmp	r3, #9
 8006780:	d94e      	bls.n	8006820 <_vfiprintf_r+0x1c4>
 8006782:	b1b0      	cbz	r0, 80067b2 <_vfiprintf_r+0x156>
 8006784:	9207      	str	r2, [sp, #28]
 8006786:	e014      	b.n	80067b2 <_vfiprintf_r+0x156>
 8006788:	eba0 0308 	sub.w	r3, r0, r8
 800678c:	fa09 f303 	lsl.w	r3, r9, r3
 8006790:	4313      	orrs	r3, r2
 8006792:	46a2      	mov	sl, r4
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	e7d2      	b.n	800673e <_vfiprintf_r+0xe2>
 8006798:	9b03      	ldr	r3, [sp, #12]
 800679a:	1d19      	adds	r1, r3, #4
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	9103      	str	r1, [sp, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bfbb      	ittet	lt
 80067a4:	425b      	neglt	r3, r3
 80067a6:	f042 0202 	orrlt.w	r2, r2, #2
 80067aa:	9307      	strge	r3, [sp, #28]
 80067ac:	9307      	strlt	r3, [sp, #28]
 80067ae:	bfb8      	it	lt
 80067b0:	9204      	strlt	r2, [sp, #16]
 80067b2:	7823      	ldrb	r3, [r4, #0]
 80067b4:	2b2e      	cmp	r3, #46	; 0x2e
 80067b6:	d10c      	bne.n	80067d2 <_vfiprintf_r+0x176>
 80067b8:	7863      	ldrb	r3, [r4, #1]
 80067ba:	2b2a      	cmp	r3, #42	; 0x2a
 80067bc:	d135      	bne.n	800682a <_vfiprintf_r+0x1ce>
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	3402      	adds	r4, #2
 80067c2:	1d1a      	adds	r2, r3, #4
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	9203      	str	r2, [sp, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bfb8      	it	lt
 80067cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80067d0:	9305      	str	r3, [sp, #20]
 80067d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80068b8 <_vfiprintf_r+0x25c>
 80067d6:	2203      	movs	r2, #3
 80067d8:	4650      	mov	r0, sl
 80067da:	7821      	ldrb	r1, [r4, #0]
 80067dc:	f7ff f8ca 	bl	8005974 <memchr>
 80067e0:	b140      	cbz	r0, 80067f4 <_vfiprintf_r+0x198>
 80067e2:	2340      	movs	r3, #64	; 0x40
 80067e4:	eba0 000a 	sub.w	r0, r0, sl
 80067e8:	fa03 f000 	lsl.w	r0, r3, r0
 80067ec:	9b04      	ldr	r3, [sp, #16]
 80067ee:	3401      	adds	r4, #1
 80067f0:	4303      	orrs	r3, r0
 80067f2:	9304      	str	r3, [sp, #16]
 80067f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f8:	2206      	movs	r2, #6
 80067fa:	482c      	ldr	r0, [pc, #176]	; (80068ac <_vfiprintf_r+0x250>)
 80067fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006800:	f7ff f8b8 	bl	8005974 <memchr>
 8006804:	2800      	cmp	r0, #0
 8006806:	d03f      	beq.n	8006888 <_vfiprintf_r+0x22c>
 8006808:	4b29      	ldr	r3, [pc, #164]	; (80068b0 <_vfiprintf_r+0x254>)
 800680a:	bb1b      	cbnz	r3, 8006854 <_vfiprintf_r+0x1f8>
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	3307      	adds	r3, #7
 8006810:	f023 0307 	bic.w	r3, r3, #7
 8006814:	3308      	adds	r3, #8
 8006816:	9303      	str	r3, [sp, #12]
 8006818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681a:	443b      	add	r3, r7
 800681c:	9309      	str	r3, [sp, #36]	; 0x24
 800681e:	e767      	b.n	80066f0 <_vfiprintf_r+0x94>
 8006820:	460c      	mov	r4, r1
 8006822:	2001      	movs	r0, #1
 8006824:	fb0c 3202 	mla	r2, ip, r2, r3
 8006828:	e7a5      	b.n	8006776 <_vfiprintf_r+0x11a>
 800682a:	2300      	movs	r3, #0
 800682c:	f04f 0c0a 	mov.w	ip, #10
 8006830:	4619      	mov	r1, r3
 8006832:	3401      	adds	r4, #1
 8006834:	9305      	str	r3, [sp, #20]
 8006836:	4620      	mov	r0, r4
 8006838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800683c:	3a30      	subs	r2, #48	; 0x30
 800683e:	2a09      	cmp	r2, #9
 8006840:	d903      	bls.n	800684a <_vfiprintf_r+0x1ee>
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0c5      	beq.n	80067d2 <_vfiprintf_r+0x176>
 8006846:	9105      	str	r1, [sp, #20]
 8006848:	e7c3      	b.n	80067d2 <_vfiprintf_r+0x176>
 800684a:	4604      	mov	r4, r0
 800684c:	2301      	movs	r3, #1
 800684e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006852:	e7f0      	b.n	8006836 <_vfiprintf_r+0x1da>
 8006854:	ab03      	add	r3, sp, #12
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	462a      	mov	r2, r5
 800685a:	4630      	mov	r0, r6
 800685c:	4b15      	ldr	r3, [pc, #84]	; (80068b4 <_vfiprintf_r+0x258>)
 800685e:	a904      	add	r1, sp, #16
 8006860:	f7fd fe1e 	bl	80044a0 <_printf_float>
 8006864:	4607      	mov	r7, r0
 8006866:	1c78      	adds	r0, r7, #1
 8006868:	d1d6      	bne.n	8006818 <_vfiprintf_r+0x1bc>
 800686a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800686c:	07d9      	lsls	r1, r3, #31
 800686e:	d405      	bmi.n	800687c <_vfiprintf_r+0x220>
 8006870:	89ab      	ldrh	r3, [r5, #12]
 8006872:	059a      	lsls	r2, r3, #22
 8006874:	d402      	bmi.n	800687c <_vfiprintf_r+0x220>
 8006876:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006878:	f000 faaf 	bl	8006dda <__retarget_lock_release_recursive>
 800687c:	89ab      	ldrh	r3, [r5, #12]
 800687e:	065b      	lsls	r3, r3, #25
 8006880:	f53f af12 	bmi.w	80066a8 <_vfiprintf_r+0x4c>
 8006884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006886:	e711      	b.n	80066ac <_vfiprintf_r+0x50>
 8006888:	ab03      	add	r3, sp, #12
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	462a      	mov	r2, r5
 800688e:	4630      	mov	r0, r6
 8006890:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <_vfiprintf_r+0x258>)
 8006892:	a904      	add	r1, sp, #16
 8006894:	f7fe f8a0 	bl	80049d8 <_printf_i>
 8006898:	e7e4      	b.n	8006864 <_vfiprintf_r+0x208>
 800689a:	bf00      	nop
 800689c:	08007484 	.word	0x08007484
 80068a0:	080074a4 	.word	0x080074a4
 80068a4:	08007464 	.word	0x08007464
 80068a8:	0800730c 	.word	0x0800730c
 80068ac:	08007316 	.word	0x08007316
 80068b0:	080044a1 	.word	0x080044a1
 80068b4:	08006637 	.word	0x08006637
 80068b8:	08007312 	.word	0x08007312

080068bc <__swbuf_r>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	460e      	mov	r6, r1
 80068c0:	4614      	mov	r4, r2
 80068c2:	4605      	mov	r5, r0
 80068c4:	b118      	cbz	r0, 80068ce <__swbuf_r+0x12>
 80068c6:	6983      	ldr	r3, [r0, #24]
 80068c8:	b90b      	cbnz	r3, 80068ce <__swbuf_r+0x12>
 80068ca:	f000 f9e7 	bl	8006c9c <__sinit>
 80068ce:	4b21      	ldr	r3, [pc, #132]	; (8006954 <__swbuf_r+0x98>)
 80068d0:	429c      	cmp	r4, r3
 80068d2:	d12b      	bne.n	800692c <__swbuf_r+0x70>
 80068d4:	686c      	ldr	r4, [r5, #4]
 80068d6:	69a3      	ldr	r3, [r4, #24]
 80068d8:	60a3      	str	r3, [r4, #8]
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	071a      	lsls	r2, r3, #28
 80068de:	d52f      	bpl.n	8006940 <__swbuf_r+0x84>
 80068e0:	6923      	ldr	r3, [r4, #16]
 80068e2:	b36b      	cbz	r3, 8006940 <__swbuf_r+0x84>
 80068e4:	6923      	ldr	r3, [r4, #16]
 80068e6:	6820      	ldr	r0, [r4, #0]
 80068e8:	b2f6      	uxtb	r6, r6
 80068ea:	1ac0      	subs	r0, r0, r3
 80068ec:	6963      	ldr	r3, [r4, #20]
 80068ee:	4637      	mov	r7, r6
 80068f0:	4283      	cmp	r3, r0
 80068f2:	dc04      	bgt.n	80068fe <__swbuf_r+0x42>
 80068f4:	4621      	mov	r1, r4
 80068f6:	4628      	mov	r0, r5
 80068f8:	f000 f93c 	bl	8006b74 <_fflush_r>
 80068fc:	bb30      	cbnz	r0, 800694c <__swbuf_r+0x90>
 80068fe:	68a3      	ldr	r3, [r4, #8]
 8006900:	3001      	adds	r0, #1
 8006902:	3b01      	subs	r3, #1
 8006904:	60a3      	str	r3, [r4, #8]
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	6022      	str	r2, [r4, #0]
 800690c:	701e      	strb	r6, [r3, #0]
 800690e:	6963      	ldr	r3, [r4, #20]
 8006910:	4283      	cmp	r3, r0
 8006912:	d004      	beq.n	800691e <__swbuf_r+0x62>
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	07db      	lsls	r3, r3, #31
 8006918:	d506      	bpl.n	8006928 <__swbuf_r+0x6c>
 800691a:	2e0a      	cmp	r6, #10
 800691c:	d104      	bne.n	8006928 <__swbuf_r+0x6c>
 800691e:	4621      	mov	r1, r4
 8006920:	4628      	mov	r0, r5
 8006922:	f000 f927 	bl	8006b74 <_fflush_r>
 8006926:	b988      	cbnz	r0, 800694c <__swbuf_r+0x90>
 8006928:	4638      	mov	r0, r7
 800692a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800692c:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <__swbuf_r+0x9c>)
 800692e:	429c      	cmp	r4, r3
 8006930:	d101      	bne.n	8006936 <__swbuf_r+0x7a>
 8006932:	68ac      	ldr	r4, [r5, #8]
 8006934:	e7cf      	b.n	80068d6 <__swbuf_r+0x1a>
 8006936:	4b09      	ldr	r3, [pc, #36]	; (800695c <__swbuf_r+0xa0>)
 8006938:	429c      	cmp	r4, r3
 800693a:	bf08      	it	eq
 800693c:	68ec      	ldreq	r4, [r5, #12]
 800693e:	e7ca      	b.n	80068d6 <__swbuf_r+0x1a>
 8006940:	4621      	mov	r1, r4
 8006942:	4628      	mov	r0, r5
 8006944:	f000 f81a 	bl	800697c <__swsetup_r>
 8006948:	2800      	cmp	r0, #0
 800694a:	d0cb      	beq.n	80068e4 <__swbuf_r+0x28>
 800694c:	f04f 37ff 	mov.w	r7, #4294967295
 8006950:	e7ea      	b.n	8006928 <__swbuf_r+0x6c>
 8006952:	bf00      	nop
 8006954:	08007484 	.word	0x08007484
 8006958:	080074a4 	.word	0x080074a4
 800695c:	08007464 	.word	0x08007464

08006960 <__ascii_wctomb>:
 8006960:	4603      	mov	r3, r0
 8006962:	4608      	mov	r0, r1
 8006964:	b141      	cbz	r1, 8006978 <__ascii_wctomb+0x18>
 8006966:	2aff      	cmp	r2, #255	; 0xff
 8006968:	d904      	bls.n	8006974 <__ascii_wctomb+0x14>
 800696a:	228a      	movs	r2, #138	; 0x8a
 800696c:	f04f 30ff 	mov.w	r0, #4294967295
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	4770      	bx	lr
 8006974:	2001      	movs	r0, #1
 8006976:	700a      	strb	r2, [r1, #0]
 8006978:	4770      	bx	lr
	...

0800697c <__swsetup_r>:
 800697c:	4b32      	ldr	r3, [pc, #200]	; (8006a48 <__swsetup_r+0xcc>)
 800697e:	b570      	push	{r4, r5, r6, lr}
 8006980:	681d      	ldr	r5, [r3, #0]
 8006982:	4606      	mov	r6, r0
 8006984:	460c      	mov	r4, r1
 8006986:	b125      	cbz	r5, 8006992 <__swsetup_r+0x16>
 8006988:	69ab      	ldr	r3, [r5, #24]
 800698a:	b913      	cbnz	r3, 8006992 <__swsetup_r+0x16>
 800698c:	4628      	mov	r0, r5
 800698e:	f000 f985 	bl	8006c9c <__sinit>
 8006992:	4b2e      	ldr	r3, [pc, #184]	; (8006a4c <__swsetup_r+0xd0>)
 8006994:	429c      	cmp	r4, r3
 8006996:	d10f      	bne.n	80069b8 <__swsetup_r+0x3c>
 8006998:	686c      	ldr	r4, [r5, #4]
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069a0:	0719      	lsls	r1, r3, #28
 80069a2:	d42c      	bmi.n	80069fe <__swsetup_r+0x82>
 80069a4:	06dd      	lsls	r5, r3, #27
 80069a6:	d411      	bmi.n	80069cc <__swsetup_r+0x50>
 80069a8:	2309      	movs	r3, #9
 80069aa:	6033      	str	r3, [r6, #0]
 80069ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	e03e      	b.n	8006a36 <__swsetup_r+0xba>
 80069b8:	4b25      	ldr	r3, [pc, #148]	; (8006a50 <__swsetup_r+0xd4>)
 80069ba:	429c      	cmp	r4, r3
 80069bc:	d101      	bne.n	80069c2 <__swsetup_r+0x46>
 80069be:	68ac      	ldr	r4, [r5, #8]
 80069c0:	e7eb      	b.n	800699a <__swsetup_r+0x1e>
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <__swsetup_r+0xd8>)
 80069c4:	429c      	cmp	r4, r3
 80069c6:	bf08      	it	eq
 80069c8:	68ec      	ldreq	r4, [r5, #12]
 80069ca:	e7e6      	b.n	800699a <__swsetup_r+0x1e>
 80069cc:	0758      	lsls	r0, r3, #29
 80069ce:	d512      	bpl.n	80069f6 <__swsetup_r+0x7a>
 80069d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069d2:	b141      	cbz	r1, 80069e6 <__swsetup_r+0x6a>
 80069d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069d8:	4299      	cmp	r1, r3
 80069da:	d002      	beq.n	80069e2 <__swsetup_r+0x66>
 80069dc:	4630      	mov	r0, r6
 80069de:	f7ff fb75 	bl	80060cc <_free_r>
 80069e2:	2300      	movs	r3, #0
 80069e4:	6363      	str	r3, [r4, #52]	; 0x34
 80069e6:	89a3      	ldrh	r3, [r4, #12]
 80069e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069ec:	81a3      	strh	r3, [r4, #12]
 80069ee:	2300      	movs	r3, #0
 80069f0:	6063      	str	r3, [r4, #4]
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	f043 0308 	orr.w	r3, r3, #8
 80069fc:	81a3      	strh	r3, [r4, #12]
 80069fe:	6923      	ldr	r3, [r4, #16]
 8006a00:	b94b      	cbnz	r3, 8006a16 <__swsetup_r+0x9a>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a0c:	d003      	beq.n	8006a16 <__swsetup_r+0x9a>
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4630      	mov	r0, r6
 8006a12:	f000 fa07 	bl	8006e24 <__smakebuf_r>
 8006a16:	89a0      	ldrh	r0, [r4, #12]
 8006a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a1c:	f010 0301 	ands.w	r3, r0, #1
 8006a20:	d00a      	beq.n	8006a38 <__swsetup_r+0xbc>
 8006a22:	2300      	movs	r3, #0
 8006a24:	60a3      	str	r3, [r4, #8]
 8006a26:	6963      	ldr	r3, [r4, #20]
 8006a28:	425b      	negs	r3, r3
 8006a2a:	61a3      	str	r3, [r4, #24]
 8006a2c:	6923      	ldr	r3, [r4, #16]
 8006a2e:	b943      	cbnz	r3, 8006a42 <__swsetup_r+0xc6>
 8006a30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a34:	d1ba      	bne.n	80069ac <__swsetup_r+0x30>
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	0781      	lsls	r1, r0, #30
 8006a3a:	bf58      	it	pl
 8006a3c:	6963      	ldrpl	r3, [r4, #20]
 8006a3e:	60a3      	str	r3, [r4, #8]
 8006a40:	e7f4      	b.n	8006a2c <__swsetup_r+0xb0>
 8006a42:	2000      	movs	r0, #0
 8006a44:	e7f7      	b.n	8006a36 <__swsetup_r+0xba>
 8006a46:	bf00      	nop
 8006a48:	2000000c 	.word	0x2000000c
 8006a4c:	08007484 	.word	0x08007484
 8006a50:	080074a4 	.word	0x080074a4
 8006a54:	08007464 	.word	0x08007464

08006a58 <abort>:
 8006a58:	2006      	movs	r0, #6
 8006a5a:	b508      	push	{r3, lr}
 8006a5c:	f000 fa52 	bl	8006f04 <raise>
 8006a60:	2001      	movs	r0, #1
 8006a62:	f7fa fe9a 	bl	800179a <_exit>
	...

08006a68 <__sflush_r>:
 8006a68:	898a      	ldrh	r2, [r1, #12]
 8006a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6e:	4605      	mov	r5, r0
 8006a70:	0710      	lsls	r0, r2, #28
 8006a72:	460c      	mov	r4, r1
 8006a74:	d458      	bmi.n	8006b28 <__sflush_r+0xc0>
 8006a76:	684b      	ldr	r3, [r1, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dc05      	bgt.n	8006a88 <__sflush_r+0x20>
 8006a7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	dc02      	bgt.n	8006a88 <__sflush_r+0x20>
 8006a82:	2000      	movs	r0, #0
 8006a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	d0f9      	beq.n	8006a82 <__sflush_r+0x1a>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a94:	682f      	ldr	r7, [r5, #0]
 8006a96:	602b      	str	r3, [r5, #0]
 8006a98:	d032      	beq.n	8006b00 <__sflush_r+0x98>
 8006a9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	075a      	lsls	r2, r3, #29
 8006aa0:	d505      	bpl.n	8006aae <__sflush_r+0x46>
 8006aa2:	6863      	ldr	r3, [r4, #4]
 8006aa4:	1ac0      	subs	r0, r0, r3
 8006aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aa8:	b10b      	cbz	r3, 8006aae <__sflush_r+0x46>
 8006aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aac:	1ac0      	subs	r0, r0, r3
 8006aae:	2300      	movs	r3, #0
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	6a21      	ldr	r1, [r4, #32]
 8006ab8:	47b0      	blx	r6
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	d106      	bne.n	8006ace <__sflush_r+0x66>
 8006ac0:	6829      	ldr	r1, [r5, #0]
 8006ac2:	291d      	cmp	r1, #29
 8006ac4:	d82c      	bhi.n	8006b20 <__sflush_r+0xb8>
 8006ac6:	4a2a      	ldr	r2, [pc, #168]	; (8006b70 <__sflush_r+0x108>)
 8006ac8:	40ca      	lsrs	r2, r1
 8006aca:	07d6      	lsls	r6, r2, #31
 8006acc:	d528      	bpl.n	8006b20 <__sflush_r+0xb8>
 8006ace:	2200      	movs	r2, #0
 8006ad0:	6062      	str	r2, [r4, #4]
 8006ad2:	6922      	ldr	r2, [r4, #16]
 8006ad4:	04d9      	lsls	r1, r3, #19
 8006ad6:	6022      	str	r2, [r4, #0]
 8006ad8:	d504      	bpl.n	8006ae4 <__sflush_r+0x7c>
 8006ada:	1c42      	adds	r2, r0, #1
 8006adc:	d101      	bne.n	8006ae2 <__sflush_r+0x7a>
 8006ade:	682b      	ldr	r3, [r5, #0]
 8006ae0:	b903      	cbnz	r3, 8006ae4 <__sflush_r+0x7c>
 8006ae2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ae6:	602f      	str	r7, [r5, #0]
 8006ae8:	2900      	cmp	r1, #0
 8006aea:	d0ca      	beq.n	8006a82 <__sflush_r+0x1a>
 8006aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006af0:	4299      	cmp	r1, r3
 8006af2:	d002      	beq.n	8006afa <__sflush_r+0x92>
 8006af4:	4628      	mov	r0, r5
 8006af6:	f7ff fae9 	bl	80060cc <_free_r>
 8006afa:	2000      	movs	r0, #0
 8006afc:	6360      	str	r0, [r4, #52]	; 0x34
 8006afe:	e7c1      	b.n	8006a84 <__sflush_r+0x1c>
 8006b00:	6a21      	ldr	r1, [r4, #32]
 8006b02:	2301      	movs	r3, #1
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b0      	blx	r6
 8006b08:	1c41      	adds	r1, r0, #1
 8006b0a:	d1c7      	bne.n	8006a9c <__sflush_r+0x34>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0c4      	beq.n	8006a9c <__sflush_r+0x34>
 8006b12:	2b1d      	cmp	r3, #29
 8006b14:	d001      	beq.n	8006b1a <__sflush_r+0xb2>
 8006b16:	2b16      	cmp	r3, #22
 8006b18:	d101      	bne.n	8006b1e <__sflush_r+0xb6>
 8006b1a:	602f      	str	r7, [r5, #0]
 8006b1c:	e7b1      	b.n	8006a82 <__sflush_r+0x1a>
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	e7ad      	b.n	8006a84 <__sflush_r+0x1c>
 8006b28:	690f      	ldr	r7, [r1, #16]
 8006b2a:	2f00      	cmp	r7, #0
 8006b2c:	d0a9      	beq.n	8006a82 <__sflush_r+0x1a>
 8006b2e:	0793      	lsls	r3, r2, #30
 8006b30:	bf18      	it	ne
 8006b32:	2300      	movne	r3, #0
 8006b34:	680e      	ldr	r6, [r1, #0]
 8006b36:	bf08      	it	eq
 8006b38:	694b      	ldreq	r3, [r1, #20]
 8006b3a:	eba6 0807 	sub.w	r8, r6, r7
 8006b3e:	600f      	str	r7, [r1, #0]
 8006b40:	608b      	str	r3, [r1, #8]
 8006b42:	f1b8 0f00 	cmp.w	r8, #0
 8006b46:	dd9c      	ble.n	8006a82 <__sflush_r+0x1a>
 8006b48:	4643      	mov	r3, r8
 8006b4a:	463a      	mov	r2, r7
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	6a21      	ldr	r1, [r4, #32]
 8006b50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b52:	47b0      	blx	r6
 8006b54:	2800      	cmp	r0, #0
 8006b56:	dc06      	bgt.n	8006b66 <__sflush_r+0xfe>
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	e78e      	b.n	8006a84 <__sflush_r+0x1c>
 8006b66:	4407      	add	r7, r0
 8006b68:	eba8 0800 	sub.w	r8, r8, r0
 8006b6c:	e7e9      	b.n	8006b42 <__sflush_r+0xda>
 8006b6e:	bf00      	nop
 8006b70:	20400001 	.word	0x20400001

08006b74 <_fflush_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	690b      	ldr	r3, [r1, #16]
 8006b78:	4605      	mov	r5, r0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	b913      	cbnz	r3, 8006b84 <_fflush_r+0x10>
 8006b7e:	2500      	movs	r5, #0
 8006b80:	4628      	mov	r0, r5
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	b118      	cbz	r0, 8006b8e <_fflush_r+0x1a>
 8006b86:	6983      	ldr	r3, [r0, #24]
 8006b88:	b90b      	cbnz	r3, 8006b8e <_fflush_r+0x1a>
 8006b8a:	f000 f887 	bl	8006c9c <__sinit>
 8006b8e:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <_fflush_r+0x6c>)
 8006b90:	429c      	cmp	r4, r3
 8006b92:	d11b      	bne.n	8006bcc <_fflush_r+0x58>
 8006b94:	686c      	ldr	r4, [r5, #4]
 8006b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0ef      	beq.n	8006b7e <_fflush_r+0xa>
 8006b9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ba0:	07d0      	lsls	r0, r2, #31
 8006ba2:	d404      	bmi.n	8006bae <_fflush_r+0x3a>
 8006ba4:	0599      	lsls	r1, r3, #22
 8006ba6:	d402      	bmi.n	8006bae <_fflush_r+0x3a>
 8006ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006baa:	f000 f915 	bl	8006dd8 <__retarget_lock_acquire_recursive>
 8006bae:	4628      	mov	r0, r5
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	f7ff ff59 	bl	8006a68 <__sflush_r>
 8006bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bb8:	4605      	mov	r5, r0
 8006bba:	07da      	lsls	r2, r3, #31
 8006bbc:	d4e0      	bmi.n	8006b80 <_fflush_r+0xc>
 8006bbe:	89a3      	ldrh	r3, [r4, #12]
 8006bc0:	059b      	lsls	r3, r3, #22
 8006bc2:	d4dd      	bmi.n	8006b80 <_fflush_r+0xc>
 8006bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bc6:	f000 f908 	bl	8006dda <__retarget_lock_release_recursive>
 8006bca:	e7d9      	b.n	8006b80 <_fflush_r+0xc>
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <_fflush_r+0x70>)
 8006bce:	429c      	cmp	r4, r3
 8006bd0:	d101      	bne.n	8006bd6 <_fflush_r+0x62>
 8006bd2:	68ac      	ldr	r4, [r5, #8]
 8006bd4:	e7df      	b.n	8006b96 <_fflush_r+0x22>
 8006bd6:	4b04      	ldr	r3, [pc, #16]	; (8006be8 <_fflush_r+0x74>)
 8006bd8:	429c      	cmp	r4, r3
 8006bda:	bf08      	it	eq
 8006bdc:	68ec      	ldreq	r4, [r5, #12]
 8006bde:	e7da      	b.n	8006b96 <_fflush_r+0x22>
 8006be0:	08007484 	.word	0x08007484
 8006be4:	080074a4 	.word	0x080074a4
 8006be8:	08007464 	.word	0x08007464

08006bec <std>:
 8006bec:	2300      	movs	r3, #0
 8006bee:	b510      	push	{r4, lr}
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8006bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bfa:	6083      	str	r3, [r0, #8]
 8006bfc:	8181      	strh	r1, [r0, #12]
 8006bfe:	6643      	str	r3, [r0, #100]	; 0x64
 8006c00:	81c2      	strh	r2, [r0, #14]
 8006c02:	6183      	str	r3, [r0, #24]
 8006c04:	4619      	mov	r1, r3
 8006c06:	2208      	movs	r2, #8
 8006c08:	305c      	adds	r0, #92	; 0x5c
 8006c0a:	f7fd fba3 	bl	8004354 <memset>
 8006c0e:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <std+0x38>)
 8006c10:	6224      	str	r4, [r4, #32]
 8006c12:	6263      	str	r3, [r4, #36]	; 0x24
 8006c14:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <std+0x3c>)
 8006c16:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c18:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <std+0x40>)
 8006c1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c1c:	4b04      	ldr	r3, [pc, #16]	; (8006c30 <std+0x44>)
 8006c1e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	bf00      	nop
 8006c24:	08006f3d 	.word	0x08006f3d
 8006c28:	08006f5f 	.word	0x08006f5f
 8006c2c:	08006f97 	.word	0x08006f97
 8006c30:	08006fbb 	.word	0x08006fbb

08006c34 <_cleanup_r>:
 8006c34:	4901      	ldr	r1, [pc, #4]	; (8006c3c <_cleanup_r+0x8>)
 8006c36:	f000 b8af 	b.w	8006d98 <_fwalk_reent>
 8006c3a:	bf00      	nop
 8006c3c:	08006b75 	.word	0x08006b75

08006c40 <__sfmoreglue>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	2568      	movs	r5, #104	; 0x68
 8006c44:	1e4a      	subs	r2, r1, #1
 8006c46:	4355      	muls	r5, r2
 8006c48:	460e      	mov	r6, r1
 8006c4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c4e:	f7ff fa89 	bl	8006164 <_malloc_r>
 8006c52:	4604      	mov	r4, r0
 8006c54:	b140      	cbz	r0, 8006c68 <__sfmoreglue+0x28>
 8006c56:	2100      	movs	r1, #0
 8006c58:	e9c0 1600 	strd	r1, r6, [r0]
 8006c5c:	300c      	adds	r0, #12
 8006c5e:	60a0      	str	r0, [r4, #8]
 8006c60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c64:	f7fd fb76 	bl	8004354 <memset>
 8006c68:	4620      	mov	r0, r4
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}

08006c6c <__sfp_lock_acquire>:
 8006c6c:	4801      	ldr	r0, [pc, #4]	; (8006c74 <__sfp_lock_acquire+0x8>)
 8006c6e:	f000 b8b3 	b.w	8006dd8 <__retarget_lock_acquire_recursive>
 8006c72:	bf00      	nop
 8006c74:	20000314 	.word	0x20000314

08006c78 <__sfp_lock_release>:
 8006c78:	4801      	ldr	r0, [pc, #4]	; (8006c80 <__sfp_lock_release+0x8>)
 8006c7a:	f000 b8ae 	b.w	8006dda <__retarget_lock_release_recursive>
 8006c7e:	bf00      	nop
 8006c80:	20000314 	.word	0x20000314

08006c84 <__sinit_lock_acquire>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__sinit_lock_acquire+0x8>)
 8006c86:	f000 b8a7 	b.w	8006dd8 <__retarget_lock_acquire_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	2000030f 	.word	0x2000030f

08006c90 <__sinit_lock_release>:
 8006c90:	4801      	ldr	r0, [pc, #4]	; (8006c98 <__sinit_lock_release+0x8>)
 8006c92:	f000 b8a2 	b.w	8006dda <__retarget_lock_release_recursive>
 8006c96:	bf00      	nop
 8006c98:	2000030f 	.word	0x2000030f

08006c9c <__sinit>:
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	f7ff fff0 	bl	8006c84 <__sinit_lock_acquire>
 8006ca4:	69a3      	ldr	r3, [r4, #24]
 8006ca6:	b11b      	cbz	r3, 8006cb0 <__sinit+0x14>
 8006ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cac:	f7ff bff0 	b.w	8006c90 <__sinit_lock_release>
 8006cb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cb4:	6523      	str	r3, [r4, #80]	; 0x50
 8006cb6:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <__sinit+0x68>)
 8006cb8:	4a13      	ldr	r2, [pc, #76]	; (8006d08 <__sinit+0x6c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cbe:	42a3      	cmp	r3, r4
 8006cc0:	bf08      	it	eq
 8006cc2:	2301      	moveq	r3, #1
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	bf08      	it	eq
 8006cc8:	61a3      	streq	r3, [r4, #24]
 8006cca:	f000 f81f 	bl	8006d0c <__sfp>
 8006cce:	6060      	str	r0, [r4, #4]
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f000 f81b 	bl	8006d0c <__sfp>
 8006cd6:	60a0      	str	r0, [r4, #8]
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 f817 	bl	8006d0c <__sfp>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2104      	movs	r1, #4
 8006ce2:	60e0      	str	r0, [r4, #12]
 8006ce4:	6860      	ldr	r0, [r4, #4]
 8006ce6:	f7ff ff81 	bl	8006bec <std>
 8006cea:	2201      	movs	r2, #1
 8006cec:	2109      	movs	r1, #9
 8006cee:	68a0      	ldr	r0, [r4, #8]
 8006cf0:	f7ff ff7c 	bl	8006bec <std>
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	2112      	movs	r1, #18
 8006cf8:	68e0      	ldr	r0, [r4, #12]
 8006cfa:	f7ff ff77 	bl	8006bec <std>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	61a3      	str	r3, [r4, #24]
 8006d02:	e7d1      	b.n	8006ca8 <__sinit+0xc>
 8006d04:	080070e4 	.word	0x080070e4
 8006d08:	08006c35 	.word	0x08006c35

08006d0c <__sfp>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	4607      	mov	r7, r0
 8006d10:	f7ff ffac 	bl	8006c6c <__sfp_lock_acquire>
 8006d14:	4b1e      	ldr	r3, [pc, #120]	; (8006d90 <__sfp+0x84>)
 8006d16:	681e      	ldr	r6, [r3, #0]
 8006d18:	69b3      	ldr	r3, [r6, #24]
 8006d1a:	b913      	cbnz	r3, 8006d22 <__sfp+0x16>
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f7ff ffbd 	bl	8006c9c <__sinit>
 8006d22:	3648      	adds	r6, #72	; 0x48
 8006d24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	d503      	bpl.n	8006d34 <__sfp+0x28>
 8006d2c:	6833      	ldr	r3, [r6, #0]
 8006d2e:	b30b      	cbz	r3, 8006d74 <__sfp+0x68>
 8006d30:	6836      	ldr	r6, [r6, #0]
 8006d32:	e7f7      	b.n	8006d24 <__sfp+0x18>
 8006d34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d38:	b9d5      	cbnz	r5, 8006d70 <__sfp+0x64>
 8006d3a:	4b16      	ldr	r3, [pc, #88]	; (8006d94 <__sfp+0x88>)
 8006d3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d40:	60e3      	str	r3, [r4, #12]
 8006d42:	6665      	str	r5, [r4, #100]	; 0x64
 8006d44:	f000 f847 	bl	8006dd6 <__retarget_lock_init_recursive>
 8006d48:	f7ff ff96 	bl	8006c78 <__sfp_lock_release>
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	4629      	mov	r1, r5
 8006d50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d58:	6025      	str	r5, [r4, #0]
 8006d5a:	61a5      	str	r5, [r4, #24]
 8006d5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d60:	f7fd faf8 	bl	8004354 <memset>
 8006d64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d70:	3468      	adds	r4, #104	; 0x68
 8006d72:	e7d9      	b.n	8006d28 <__sfp+0x1c>
 8006d74:	2104      	movs	r1, #4
 8006d76:	4638      	mov	r0, r7
 8006d78:	f7ff ff62 	bl	8006c40 <__sfmoreglue>
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	6030      	str	r0, [r6, #0]
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d1d5      	bne.n	8006d30 <__sfp+0x24>
 8006d84:	f7ff ff78 	bl	8006c78 <__sfp_lock_release>
 8006d88:	230c      	movs	r3, #12
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	e7ee      	b.n	8006d6c <__sfp+0x60>
 8006d8e:	bf00      	nop
 8006d90:	080070e4 	.word	0x080070e4
 8006d94:	ffff0001 	.word	0xffff0001

08006d98 <_fwalk_reent>:
 8006d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d9c:	4606      	mov	r6, r0
 8006d9e:	4688      	mov	r8, r1
 8006da0:	2700      	movs	r7, #0
 8006da2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006da6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006daa:	f1b9 0901 	subs.w	r9, r9, #1
 8006dae:	d505      	bpl.n	8006dbc <_fwalk_reent+0x24>
 8006db0:	6824      	ldr	r4, [r4, #0]
 8006db2:	2c00      	cmp	r4, #0
 8006db4:	d1f7      	bne.n	8006da6 <_fwalk_reent+0xe>
 8006db6:	4638      	mov	r0, r7
 8006db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dbc:	89ab      	ldrh	r3, [r5, #12]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d907      	bls.n	8006dd2 <_fwalk_reent+0x3a>
 8006dc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	d003      	beq.n	8006dd2 <_fwalk_reent+0x3a>
 8006dca:	4629      	mov	r1, r5
 8006dcc:	4630      	mov	r0, r6
 8006dce:	47c0      	blx	r8
 8006dd0:	4307      	orrs	r7, r0
 8006dd2:	3568      	adds	r5, #104	; 0x68
 8006dd4:	e7e9      	b.n	8006daa <_fwalk_reent+0x12>

08006dd6 <__retarget_lock_init_recursive>:
 8006dd6:	4770      	bx	lr

08006dd8 <__retarget_lock_acquire_recursive>:
 8006dd8:	4770      	bx	lr

08006dda <__retarget_lock_release_recursive>:
 8006dda:	4770      	bx	lr

08006ddc <__swhatbuf_r>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	460e      	mov	r6, r1
 8006de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de4:	4614      	mov	r4, r2
 8006de6:	2900      	cmp	r1, #0
 8006de8:	461d      	mov	r5, r3
 8006dea:	b096      	sub	sp, #88	; 0x58
 8006dec:	da07      	bge.n	8006dfe <__swhatbuf_r+0x22>
 8006dee:	2300      	movs	r3, #0
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	89b3      	ldrh	r3, [r6, #12]
 8006df4:	061a      	lsls	r2, r3, #24
 8006df6:	d410      	bmi.n	8006e1a <__swhatbuf_r+0x3e>
 8006df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dfc:	e00e      	b.n	8006e1c <__swhatbuf_r+0x40>
 8006dfe:	466a      	mov	r2, sp
 8006e00:	f000 f902 	bl	8007008 <_fstat_r>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	dbf2      	blt.n	8006dee <__swhatbuf_r+0x12>
 8006e08:	9a01      	ldr	r2, [sp, #4]
 8006e0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e12:	425a      	negs	r2, r3
 8006e14:	415a      	adcs	r2, r3
 8006e16:	602a      	str	r2, [r5, #0]
 8006e18:	e7ee      	b.n	8006df8 <__swhatbuf_r+0x1c>
 8006e1a:	2340      	movs	r3, #64	; 0x40
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	6023      	str	r3, [r4, #0]
 8006e20:	b016      	add	sp, #88	; 0x58
 8006e22:	bd70      	pop	{r4, r5, r6, pc}

08006e24 <__smakebuf_r>:
 8006e24:	898b      	ldrh	r3, [r1, #12]
 8006e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e28:	079d      	lsls	r5, r3, #30
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	d507      	bpl.n	8006e40 <__smakebuf_r+0x1c>
 8006e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	6123      	str	r3, [r4, #16]
 8006e38:	2301      	movs	r3, #1
 8006e3a:	6163      	str	r3, [r4, #20]
 8006e3c:	b002      	add	sp, #8
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	466a      	mov	r2, sp
 8006e42:	ab01      	add	r3, sp, #4
 8006e44:	f7ff ffca 	bl	8006ddc <__swhatbuf_r>
 8006e48:	9900      	ldr	r1, [sp, #0]
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f7ff f989 	bl	8006164 <_malloc_r>
 8006e52:	b948      	cbnz	r0, 8006e68 <__smakebuf_r+0x44>
 8006e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e58:	059a      	lsls	r2, r3, #22
 8006e5a:	d4ef      	bmi.n	8006e3c <__smakebuf_r+0x18>
 8006e5c:	f023 0303 	bic.w	r3, r3, #3
 8006e60:	f043 0302 	orr.w	r3, r3, #2
 8006e64:	81a3      	strh	r3, [r4, #12]
 8006e66:	e7e3      	b.n	8006e30 <__smakebuf_r+0xc>
 8006e68:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <__smakebuf_r+0x7c>)
 8006e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	6020      	str	r0, [r4, #0]
 8006e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	9b00      	ldr	r3, [sp, #0]
 8006e78:	6120      	str	r0, [r4, #16]
 8006e7a:	6163      	str	r3, [r4, #20]
 8006e7c:	9b01      	ldr	r3, [sp, #4]
 8006e7e:	b15b      	cbz	r3, 8006e98 <__smakebuf_r+0x74>
 8006e80:	4630      	mov	r0, r6
 8006e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e86:	f000 f8d1 	bl	800702c <_isatty_r>
 8006e8a:	b128      	cbz	r0, 8006e98 <__smakebuf_r+0x74>
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	f023 0303 	bic.w	r3, r3, #3
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	81a3      	strh	r3, [r4, #12]
 8006e98:	89a0      	ldrh	r0, [r4, #12]
 8006e9a:	4305      	orrs	r5, r0
 8006e9c:	81a5      	strh	r5, [r4, #12]
 8006e9e:	e7cd      	b.n	8006e3c <__smakebuf_r+0x18>
 8006ea0:	08006c35 	.word	0x08006c35

08006ea4 <_malloc_usable_size_r>:
 8006ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ea8:	1f18      	subs	r0, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	bfbc      	itt	lt
 8006eae:	580b      	ldrlt	r3, [r1, r0]
 8006eb0:	18c0      	addlt	r0, r0, r3
 8006eb2:	4770      	bx	lr

08006eb4 <_raise_r>:
 8006eb4:	291f      	cmp	r1, #31
 8006eb6:	b538      	push	{r3, r4, r5, lr}
 8006eb8:	4604      	mov	r4, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	d904      	bls.n	8006ec8 <_raise_r+0x14>
 8006ebe:	2316      	movs	r3, #22
 8006ec0:	6003      	str	r3, [r0, #0]
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006eca:	b112      	cbz	r2, 8006ed2 <_raise_r+0x1e>
 8006ecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ed0:	b94b      	cbnz	r3, 8006ee6 <_raise_r+0x32>
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 f830 	bl	8006f38 <_getpid_r>
 8006ed8:	462a      	mov	r2, r5
 8006eda:	4601      	mov	r1, r0
 8006edc:	4620      	mov	r0, r4
 8006ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee2:	f000 b817 	b.w	8006f14 <_kill_r>
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d00a      	beq.n	8006f00 <_raise_r+0x4c>
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	d103      	bne.n	8006ef6 <_raise_r+0x42>
 8006eee:	2316      	movs	r3, #22
 8006ef0:	6003      	str	r3, [r0, #0]
 8006ef2:	2001      	movs	r0, #1
 8006ef4:	e7e7      	b.n	8006ec6 <_raise_r+0x12>
 8006ef6:	2400      	movs	r4, #0
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006efe:	4798      	blx	r3
 8006f00:	2000      	movs	r0, #0
 8006f02:	e7e0      	b.n	8006ec6 <_raise_r+0x12>

08006f04 <raise>:
 8006f04:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <raise+0xc>)
 8006f06:	4601      	mov	r1, r0
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	f7ff bfd3 	b.w	8006eb4 <_raise_r>
 8006f0e:	bf00      	nop
 8006f10:	2000000c 	.word	0x2000000c

08006f14 <_kill_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	2300      	movs	r3, #0
 8006f18:	4d06      	ldr	r5, [pc, #24]	; (8006f34 <_kill_r+0x20>)
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	f7fa fc2a 	bl	800177a <_kill>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d102      	bne.n	8006f30 <_kill_r+0x1c>
 8006f2a:	682b      	ldr	r3, [r5, #0]
 8006f2c:	b103      	cbz	r3, 8006f30 <_kill_r+0x1c>
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	20000308 	.word	0x20000308

08006f38 <_getpid_r>:
 8006f38:	f7fa bc18 	b.w	800176c <_getpid>

08006f3c <__sread>:
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	460c      	mov	r4, r1
 8006f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f44:	f000 f894 	bl	8007070 <_read_r>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	bfab      	itete	ge
 8006f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f50:	181b      	addge	r3, r3, r0
 8006f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f56:	bfac      	ite	ge
 8006f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f5a:	81a3      	strhlt	r3, [r4, #12]
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <__swrite>:
 8006f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f62:	461f      	mov	r7, r3
 8006f64:	898b      	ldrh	r3, [r1, #12]
 8006f66:	4605      	mov	r5, r0
 8006f68:	05db      	lsls	r3, r3, #23
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	4616      	mov	r6, r2
 8006f6e:	d505      	bpl.n	8006f7c <__swrite+0x1e>
 8006f70:	2302      	movs	r3, #2
 8006f72:	2200      	movs	r2, #0
 8006f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f78:	f000 f868 	bl	800704c <_lseek_r>
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	4632      	mov	r2, r6
 8006f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f84:	81a3      	strh	r3, [r4, #12]
 8006f86:	4628      	mov	r0, r5
 8006f88:	463b      	mov	r3, r7
 8006f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f92:	f000 b817 	b.w	8006fc4 <_write_r>

08006f96 <__sseek>:
 8006f96:	b510      	push	{r4, lr}
 8006f98:	460c      	mov	r4, r1
 8006f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9e:	f000 f855 	bl	800704c <_lseek_r>
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	bf15      	itete	ne
 8006fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fb2:	81a3      	strheq	r3, [r4, #12]
 8006fb4:	bf18      	it	ne
 8006fb6:	81a3      	strhne	r3, [r4, #12]
 8006fb8:	bd10      	pop	{r4, pc}

08006fba <__sclose>:
 8006fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbe:	f000 b813 	b.w	8006fe8 <_close_r>
	...

08006fc4 <_write_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	4608      	mov	r0, r1
 8006fca:	4611      	mov	r1, r2
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4d05      	ldr	r5, [pc, #20]	; (8006fe4 <_write_r+0x20>)
 8006fd0:	602a      	str	r2, [r5, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f7fa fc08 	bl	80017e8 <_write>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_write_r+0x1e>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_write_r+0x1e>
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	20000308 	.word	0x20000308

08006fe8 <_close_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	2300      	movs	r3, #0
 8006fec:	4d05      	ldr	r5, [pc, #20]	; (8007004 <_close_r+0x1c>)
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	602b      	str	r3, [r5, #0]
 8006ff4:	f7fa fc14 	bl	8001820 <_close>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_close_r+0x1a>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_close_r+0x1a>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	20000308 	.word	0x20000308

08007008 <_fstat_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	2300      	movs	r3, #0
 800700c:	4d06      	ldr	r5, [pc, #24]	; (8007028 <_fstat_r+0x20>)
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	4611      	mov	r1, r2
 8007014:	602b      	str	r3, [r5, #0]
 8007016:	f7fa fc0e 	bl	8001836 <_fstat>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	d102      	bne.n	8007024 <_fstat_r+0x1c>
 800701e:	682b      	ldr	r3, [r5, #0]
 8007020:	b103      	cbz	r3, 8007024 <_fstat_r+0x1c>
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	bd38      	pop	{r3, r4, r5, pc}
 8007026:	bf00      	nop
 8007028:	20000308 	.word	0x20000308

0800702c <_isatty_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	2300      	movs	r3, #0
 8007030:	4d05      	ldr	r5, [pc, #20]	; (8007048 <_isatty_r+0x1c>)
 8007032:	4604      	mov	r4, r0
 8007034:	4608      	mov	r0, r1
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	f7fa fc0c 	bl	8001854 <_isatty>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_isatty_r+0x1a>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_isatty_r+0x1a>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	20000308 	.word	0x20000308

0800704c <_lseek_r>:
 800704c:	b538      	push	{r3, r4, r5, lr}
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	4611      	mov	r1, r2
 8007054:	2200      	movs	r2, #0
 8007056:	4d05      	ldr	r5, [pc, #20]	; (800706c <_lseek_r+0x20>)
 8007058:	602a      	str	r2, [r5, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	f7fa fc04 	bl	8001868 <_lseek>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_lseek_r+0x1e>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b103      	cbz	r3, 800706a <_lseek_r+0x1e>
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	20000308 	.word	0x20000308

08007070 <_read_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4604      	mov	r4, r0
 8007074:	4608      	mov	r0, r1
 8007076:	4611      	mov	r1, r2
 8007078:	2200      	movs	r2, #0
 800707a:	4d05      	ldr	r5, [pc, #20]	; (8007090 <_read_r+0x20>)
 800707c:	602a      	str	r2, [r5, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f7fa fb95 	bl	80017ae <_read>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_read_r+0x1e>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_read_r+0x1e>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	20000308 	.word	0x20000308

08007094 <_init>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	bf00      	nop
 8007098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709a:	bc08      	pop	{r3}
 800709c:	469e      	mov	lr, r3
 800709e:	4770      	bx	lr

080070a0 <_fini>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	bf00      	nop
 80070a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a6:	bc08      	pop	{r3}
 80070a8:	469e      	mov	lr, r3
 80070aa:	4770      	bx	lr
